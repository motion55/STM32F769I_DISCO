
STM32F769I_DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d78  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08006f70  08006f70  00007f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007198  08007198  0000900c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007198  08007198  00008198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071a0  080071a0  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071a0  080071a0  000081a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080071a4  080071a4  000081a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080071a8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  2000000c  080071b4  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  20000290  080071b4  00009290  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a6c3  00000000  00000000  0000903a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003491  00000000  00000000  000236fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a8  00000000  00000000  00026b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000118f  00000000  00000000  00028238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000309f4  00000000  00000000  000293c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c0c9  00000000  00000000  00059dbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001245ed  00000000  00000000  00075e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019a471  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006094  00000000  00000000  0019a4b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001a0548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08006f58 	.word	0x08006f58

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08006f58 	.word	0x08006f58

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b988 	b.w	8000560 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	468e      	mov	lr, r1
 8000270:	4604      	mov	r4, r0
 8000272:	4688      	mov	r8, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d962      	bls.n	8000344 <__udivmoddi4+0xdc>
 800027e:	fab2 f682 	clz	r6, r2
 8000282:	b14e      	cbz	r6, 8000298 <__udivmoddi4+0x30>
 8000284:	f1c6 0320 	rsb	r3, r6, #32
 8000288:	fa01 f806 	lsl.w	r8, r1, r6
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	40b7      	lsls	r7, r6
 8000292:	ea43 0808 	orr.w	r8, r3, r8
 8000296:	40b4      	lsls	r4, r6
 8000298:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800029c:	fa1f fc87 	uxth.w	ip, r7
 80002a0:	fbb8 f1fe 	udiv	r1, r8, lr
 80002a4:	0c23      	lsrs	r3, r4, #16
 80002a6:	fb0e 8811 	mls	r8, lr, r1, r8
 80002aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ae:	fb01 f20c 	mul.w	r2, r1, ip
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002bc:	f080 80ea 	bcs.w	8000494 <__udivmoddi4+0x22c>
 80002c0:	429a      	cmp	r2, r3
 80002c2:	f240 80e7 	bls.w	8000494 <__udivmoddi4+0x22c>
 80002c6:	3902      	subs	r1, #2
 80002c8:	443b      	add	r3, r7
 80002ca:	1a9a      	subs	r2, r3, r2
 80002cc:	b2a3      	uxth	r3, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002da:	fb00 fc0c 	mul.w	ip, r0, ip
 80002de:	459c      	cmp	ip, r3
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0x8e>
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e8:	f080 80d6 	bcs.w	8000498 <__udivmoddi4+0x230>
 80002ec:	459c      	cmp	ip, r3
 80002ee:	f240 80d3 	bls.w	8000498 <__udivmoddi4+0x230>
 80002f2:	443b      	add	r3, r7
 80002f4:	3802      	subs	r0, #2
 80002f6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fa:	eba3 030c 	sub.w	r3, r3, ip
 80002fe:	2100      	movs	r1, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa2>
 8000302:	40f3      	lsrs	r3, r6
 8000304:	2200      	movs	r2, #0
 8000306:	e9c5 3200 	strd	r3, r2, [r5]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d905      	bls.n	800031e <__udivmoddi4+0xb6>
 8000312:	b10d      	cbz	r5, 8000318 <__udivmoddi4+0xb0>
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	2100      	movs	r1, #0
 800031a:	4608      	mov	r0, r1
 800031c:	e7f5      	b.n	800030a <__udivmoddi4+0xa2>
 800031e:	fab3 f183 	clz	r1, r3
 8000322:	2900      	cmp	r1, #0
 8000324:	d146      	bne.n	80003b4 <__udivmoddi4+0x14c>
 8000326:	4573      	cmp	r3, lr
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xc8>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 8105 	bhi.w	800053a <__udivmoddi4+0x2d2>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb6e 0203 	sbc.w	r2, lr, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4690      	mov	r8, r2
 800033a:	2d00      	cmp	r5, #0
 800033c:	d0e5      	beq.n	800030a <__udivmoddi4+0xa2>
 800033e:	e9c5 4800 	strd	r4, r8, [r5]
 8000342:	e7e2      	b.n	800030a <__udivmoddi4+0xa2>
 8000344:	2a00      	cmp	r2, #0
 8000346:	f000 8090 	beq.w	800046a <__udivmoddi4+0x202>
 800034a:	fab2 f682 	clz	r6, r2
 800034e:	2e00      	cmp	r6, #0
 8000350:	f040 80a4 	bne.w	800049c <__udivmoddi4+0x234>
 8000354:	1a8a      	subs	r2, r1, r2
 8000356:	0c03      	lsrs	r3, r0, #16
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	b280      	uxth	r0, r0
 800035e:	b2bc      	uxth	r4, r7
 8000360:	2101      	movs	r1, #1
 8000362:	fbb2 fcfe 	udiv	ip, r2, lr
 8000366:	fb0e 221c 	mls	r2, lr, ip, r2
 800036a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800036e:	fb04 f20c 	mul.w	r2, r4, ip
 8000372:	429a      	cmp	r2, r3
 8000374:	d907      	bls.n	8000386 <__udivmoddi4+0x11e>
 8000376:	18fb      	adds	r3, r7, r3
 8000378:	f10c 38ff 	add.w	r8, ip, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x11c>
 800037e:	429a      	cmp	r2, r3
 8000380:	f200 80e0 	bhi.w	8000544 <__udivmoddi4+0x2dc>
 8000384:	46c4      	mov	ip, r8
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	fbb3 f2fe 	udiv	r2, r3, lr
 800038c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000390:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000394:	fb02 f404 	mul.w	r4, r2, r4
 8000398:	429c      	cmp	r4, r3
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x144>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f102 30ff 	add.w	r0, r2, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x142>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f200 80ca 	bhi.w	800053e <__udivmoddi4+0x2d6>
 80003aa:	4602      	mov	r2, r0
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0x98>
 80003b4:	f1c1 0620 	rsb	r6, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 f706 	lsr.w	r7, r2, r6
 80003be:	431f      	orrs	r7, r3
 80003c0:	fa0e f401 	lsl.w	r4, lr, r1
 80003c4:	fa20 f306 	lsr.w	r3, r0, r6
 80003c8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003cc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d0:	4323      	orrs	r3, r4
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	fa1f fc87 	uxth.w	ip, r7
 80003da:	fbbe f0f9 	udiv	r0, lr, r9
 80003de:	0c1c      	lsrs	r4, r3, #16
 80003e0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003e4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003ec:	45a6      	cmp	lr, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d909      	bls.n	8000408 <__udivmoddi4+0x1a0>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003fa:	f080 809c 	bcs.w	8000536 <__udivmoddi4+0x2ce>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f240 8099 	bls.w	8000536 <__udivmoddi4+0x2ce>
 8000404:	3802      	subs	r0, #2
 8000406:	443c      	add	r4, r7
 8000408:	eba4 040e 	sub.w	r4, r4, lr
 800040c:	fa1f fe83 	uxth.w	lr, r3
 8000410:	fbb4 f3f9 	udiv	r3, r4, r9
 8000414:	fb09 4413 	mls	r4, r9, r3, r4
 8000418:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800041c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000420:	45a4      	cmp	ip, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1ce>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f103 3eff 	add.w	lr, r3, #4294967295
 800042a:	f080 8082 	bcs.w	8000532 <__udivmoddi4+0x2ca>
 800042e:	45a4      	cmp	ip, r4
 8000430:	d97f      	bls.n	8000532 <__udivmoddi4+0x2ca>
 8000432:	3b02      	subs	r3, #2
 8000434:	443c      	add	r4, r7
 8000436:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000442:	4564      	cmp	r4, ip
 8000444:	4673      	mov	r3, lr
 8000446:	46e1      	mov	r9, ip
 8000448:	d362      	bcc.n	8000510 <__udivmoddi4+0x2a8>
 800044a:	d05f      	beq.n	800050c <__udivmoddi4+0x2a4>
 800044c:	b15d      	cbz	r5, 8000466 <__udivmoddi4+0x1fe>
 800044e:	ebb8 0203 	subs.w	r2, r8, r3
 8000452:	eb64 0409 	sbc.w	r4, r4, r9
 8000456:	fa04 f606 	lsl.w	r6, r4, r6
 800045a:	fa22 f301 	lsr.w	r3, r2, r1
 800045e:	431e      	orrs	r6, r3
 8000460:	40cc      	lsrs	r4, r1
 8000462:	e9c5 6400 	strd	r6, r4, [r5]
 8000466:	2100      	movs	r1, #0
 8000468:	e74f      	b.n	800030a <__udivmoddi4+0xa2>
 800046a:	fbb1 fcf2 	udiv	ip, r1, r2
 800046e:	0c01      	lsrs	r1, r0, #16
 8000470:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000474:	b280      	uxth	r0, r0
 8000476:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800047a:	463b      	mov	r3, r7
 800047c:	4638      	mov	r0, r7
 800047e:	463c      	mov	r4, r7
 8000480:	46b8      	mov	r8, r7
 8000482:	46be      	mov	lr, r7
 8000484:	2620      	movs	r6, #32
 8000486:	fbb1 f1f7 	udiv	r1, r1, r7
 800048a:	eba2 0208 	sub.w	r2, r2, r8
 800048e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000492:	e766      	b.n	8000362 <__udivmoddi4+0xfa>
 8000494:	4601      	mov	r1, r0
 8000496:	e718      	b.n	80002ca <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e72c      	b.n	80002f6 <__udivmoddi4+0x8e>
 800049c:	f1c6 0220 	rsb	r2, r6, #32
 80004a0:	fa2e f302 	lsr.w	r3, lr, r2
 80004a4:	40b7      	lsls	r7, r6
 80004a6:	40b1      	lsls	r1, r6
 80004a8:	fa20 f202 	lsr.w	r2, r0, r2
 80004ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b0:	430a      	orrs	r2, r1
 80004b2:	fbb3 f8fe 	udiv	r8, r3, lr
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	fb0e 3318 	mls	r3, lr, r8, r3
 80004bc:	0c11      	lsrs	r1, r2, #16
 80004be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c2:	fb08 f904 	mul.w	r9, r8, r4
 80004c6:	40b0      	lsls	r0, r6
 80004c8:	4589      	cmp	r9, r1
 80004ca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ce:	b280      	uxth	r0, r0
 80004d0:	d93e      	bls.n	8000550 <__udivmoddi4+0x2e8>
 80004d2:	1879      	adds	r1, r7, r1
 80004d4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d8:	d201      	bcs.n	80004de <__udivmoddi4+0x276>
 80004da:	4589      	cmp	r9, r1
 80004dc:	d81f      	bhi.n	800051e <__udivmoddi4+0x2b6>
 80004de:	eba1 0109 	sub.w	r1, r1, r9
 80004e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e6:	fb09 f804 	mul.w	r8, r9, r4
 80004ea:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ee:	b292      	uxth	r2, r2
 80004f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f4:	4542      	cmp	r2, r8
 80004f6:	d229      	bcs.n	800054c <__udivmoddi4+0x2e4>
 80004f8:	18ba      	adds	r2, r7, r2
 80004fa:	f109 31ff 	add.w	r1, r9, #4294967295
 80004fe:	d2c4      	bcs.n	800048a <__udivmoddi4+0x222>
 8000500:	4542      	cmp	r2, r8
 8000502:	d2c2      	bcs.n	800048a <__udivmoddi4+0x222>
 8000504:	f1a9 0102 	sub.w	r1, r9, #2
 8000508:	443a      	add	r2, r7
 800050a:	e7be      	b.n	800048a <__udivmoddi4+0x222>
 800050c:	45f0      	cmp	r8, lr
 800050e:	d29d      	bcs.n	800044c <__udivmoddi4+0x1e4>
 8000510:	ebbe 0302 	subs.w	r3, lr, r2
 8000514:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000518:	3801      	subs	r0, #1
 800051a:	46e1      	mov	r9, ip
 800051c:	e796      	b.n	800044c <__udivmoddi4+0x1e4>
 800051e:	eba7 0909 	sub.w	r9, r7, r9
 8000522:	4449      	add	r1, r9
 8000524:	f1a8 0c02 	sub.w	ip, r8, #2
 8000528:	fbb1 f9fe 	udiv	r9, r1, lr
 800052c:	fb09 f804 	mul.w	r8, r9, r4
 8000530:	e7db      	b.n	80004ea <__udivmoddi4+0x282>
 8000532:	4673      	mov	r3, lr
 8000534:	e77f      	b.n	8000436 <__udivmoddi4+0x1ce>
 8000536:	4650      	mov	r0, sl
 8000538:	e766      	b.n	8000408 <__udivmoddi4+0x1a0>
 800053a:	4608      	mov	r0, r1
 800053c:	e6fd      	b.n	800033a <__udivmoddi4+0xd2>
 800053e:	443b      	add	r3, r7
 8000540:	3a02      	subs	r2, #2
 8000542:	e733      	b.n	80003ac <__udivmoddi4+0x144>
 8000544:	f1ac 0c02 	sub.w	ip, ip, #2
 8000548:	443b      	add	r3, r7
 800054a:	e71c      	b.n	8000386 <__udivmoddi4+0x11e>
 800054c:	4649      	mov	r1, r9
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x222>
 8000550:	eba1 0109 	sub.w	r1, r1, r9
 8000554:	46c4      	mov	ip, r8
 8000556:	fbb1 f9fe 	udiv	r9, r1, lr
 800055a:	fb09 f804 	mul.w	r8, r9, r4
 800055e:	e7c4      	b.n	80004ea <__udivmoddi4+0x282>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000568:	f3bf 8f4f 	dsb	sy
}
 800056c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800056e:	f3bf 8f6f 	isb	sy
}
 8000572:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000574:	4b0d      	ldr	r3, [pc, #52]	@ (80005ac <SCB_EnableICache+0x48>)
 8000576:	2200      	movs	r2, #0
 8000578:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800057c:	f3bf 8f4f 	dsb	sy
}
 8000580:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000582:	f3bf 8f6f 	isb	sy
}
 8000586:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000588:	4b08      	ldr	r3, [pc, #32]	@ (80005ac <SCB_EnableICache+0x48>)
 800058a:	695b      	ldr	r3, [r3, #20]
 800058c:	4a07      	ldr	r2, [pc, #28]	@ (80005ac <SCB_EnableICache+0x48>)
 800058e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000592:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000594:	f3bf 8f4f 	dsb	sy
}
 8000598:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800059a:	f3bf 8f6f 	isb	sy
}
 800059e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	e000ed00 	.word	0xe000ed00

080005b0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80005b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000634 <SCB_EnableDCache+0x84>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80005be:	f3bf 8f4f 	dsb	sy
}
 80005c2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80005c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000634 <SCB_EnableDCache+0x84>)
 80005c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80005ca:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	0b5b      	lsrs	r3, r3, #13
 80005d0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005d4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	08db      	lsrs	r3, r3, #3
 80005da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005de:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	015a      	lsls	r2, r3, #5
 80005e4:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80005e8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005ea:	68ba      	ldr	r2, [r7, #8]
 80005ec:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005ee:	4911      	ldr	r1, [pc, #68]	@ (8000634 <SCB_EnableDCache+0x84>)
 80005f0:	4313      	orrs	r3, r2
 80005f2:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	1e5a      	subs	r2, r3, #1
 80005fa:	60ba      	str	r2, [r7, #8]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d1ef      	bne.n	80005e0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	1e5a      	subs	r2, r3, #1
 8000604:	60fa      	str	r2, [r7, #12]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d1e5      	bne.n	80005d6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800060a:	f3bf 8f4f 	dsb	sy
}
 800060e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000610:	4b08      	ldr	r3, [pc, #32]	@ (8000634 <SCB_EnableDCache+0x84>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	4a07      	ldr	r2, [pc, #28]	@ (8000634 <SCB_EnableDCache+0x84>)
 8000616:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800061a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800061c:	f3bf 8f4f 	dsb	sy
}
 8000620:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000622:	f3bf 8f6f 	isb	sy
}
 8000626:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800063c:	f001 f909 	bl	8001852 <MPU_Config>

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000640:	f7ff ff90 	bl	8000564 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000644:	f7ff ffb4 	bl	80005b0 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000648:	f001 ffc8 	bl	80025dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064c:	f000 f814 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000650:	f000 fbaa 	bl	8000da8 <MX_GPIO_Init>
  MX_DSIHOST_DSI_Init();
 8000654:	f000 f8da 	bl	800080c <MX_DSIHOST_DSI_Init>
  MX_LTDC_Init();
 8000658:	f000 fa2e 	bl	8000ab8 <MX_LTDC_Init>
  MX_FMC_Init();
 800065c:	f000 fb48 	bl	8000cf0 <MX_FMC_Init>
  MX_QUADSPI_Init();
 8000660:	f000 faea 	bl	8000c38 <MX_QUADSPI_Init>
  MX_DMA2D_Init();
 8000664:	f000 f89a 	bl	800079c <MX_DMA2D_Init>
  MX_I2C4_Init();
 8000668:	f000 f9e6 	bl	8000a38 <MX_I2C4_Init>
  MX_LIBJPEG_Init();
 800066c:	f006 fc40 	bl	8006ef0 <MX_LIBJPEG_Init>
  MX_CRC_Init();
 8000670:	f000 f872 	bl	8000758 <MX_CRC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000674:	bf00      	nop
 8000676:	e7fd      	b.n	8000674 <main+0x3c>

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b094      	sub	sp, #80	@ 0x50
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 031c 	add.w	r3, r7, #28
 8000682:	2234      	movs	r2, #52	@ 0x34
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f006 fc39 	bl	8006efe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 0308 	add.w	r3, r7, #8
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	4b2c      	ldr	r3, [pc, #176]	@ (8000750 <SystemClock_Config+0xd8>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a0:	4a2b      	ldr	r2, [pc, #172]	@ (8000750 <SystemClock_Config+0xd8>)
 80006a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006a8:	4b29      	ldr	r3, [pc, #164]	@ (8000750 <SystemClock_Config+0xd8>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b4:	4b27      	ldr	r3, [pc, #156]	@ (8000754 <SystemClock_Config+0xdc>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a26      	ldr	r2, [pc, #152]	@ (8000754 <SystemClock_Config+0xdc>)
 80006ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006be:	6013      	str	r3, [r2, #0]
 80006c0:	4b24      	ldr	r3, [pc, #144]	@ (8000754 <SystemClock_Config+0xdc>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006cc:	2301      	movs	r3, #1
 80006ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d6:	2302      	movs	r3, #2
 80006d8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006e0:	2319      	movs	r3, #25
 80006e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 80006e4:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 80006e8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ea:	2302      	movs	r3, #2
 80006ec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 7;
 80006f2:	2307      	movs	r3, #7
 80006f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	4618      	mov	r0, r3
 80006fc:	f004 febe 	bl	800547c <HAL_RCC_OscConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000706:	f001 f921 	bl	800194c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800070a:	f004 f9a9 	bl	8004a60 <HAL_PWREx_EnableOverDrive>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000714:	f001 f91a 	bl	800194c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000718:	230f      	movs	r3, #15
 800071a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071c:	2302      	movs	r3, #2
 800071e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000724:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000728:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800072a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800072e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000730:	f107 0308 	add.w	r3, r7, #8
 8000734:	2107      	movs	r1, #7
 8000736:	4618      	mov	r0, r3
 8000738:	f005 f94e 	bl	80059d8 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000742:	f001 f903 	bl	800194c <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3750      	adds	r7, #80	@ 0x50
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800075c:	4b0d      	ldr	r3, [pc, #52]	@ (8000794 <MX_CRC_Init+0x3c>)
 800075e:	4a0e      	ldr	r2, [pc, #56]	@ (8000798 <MX_CRC_Init+0x40>)
 8000760:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000762:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <MX_CRC_Init+0x3c>)
 8000764:	2200      	movs	r2, #0
 8000766:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000768:	4b0a      	ldr	r3, [pc, #40]	@ (8000794 <MX_CRC_Init+0x3c>)
 800076a:	2200      	movs	r2, #0
 800076c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800076e:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <MX_CRC_Init+0x3c>)
 8000770:	2200      	movs	r2, #0
 8000772:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000774:	4b07      	ldr	r3, [pc, #28]	@ (8000794 <MX_CRC_Init+0x3c>)
 8000776:	2200      	movs	r2, #0
 8000778:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800077a:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <MX_CRC_Init+0x3c>)
 800077c:	2201      	movs	r2, #1
 800077e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000780:	4804      	ldr	r0, [pc, #16]	@ (8000794 <MX_CRC_Init+0x3c>)
 8000782:	f002 f8df 	bl	8002944 <HAL_CRC_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800078c:	f001 f8de 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000028 	.word	0x20000028
 8000798:	40023000 	.word	0x40023000

0800079c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80007a0:	4b18      	ldr	r3, [pc, #96]	@ (8000804 <MX_DMA2D_Init+0x68>)
 80007a2:	4a19      	ldr	r2, [pc, #100]	@ (8000808 <MX_DMA2D_Init+0x6c>)
 80007a4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80007a6:	4b17      	ldr	r3, [pc, #92]	@ (8000804 <MX_DMA2D_Init+0x68>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80007ac:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <MX_DMA2D_Init+0x68>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80007b2:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <MX_DMA2D_Init+0x68>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80007b8:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <MX_DMA2D_Init+0x68>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80007be:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <MX_DMA2D_Init+0x68>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <MX_DMA2D_Init+0x68>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <MX_DMA2D_Init+0x68>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <MX_DMA2D_Init+0x68>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <MX_DMA2D_Init+0x68>)
 80007d8:	2200      	movs	r2, #0
 80007da:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80007dc:	4809      	ldr	r0, [pc, #36]	@ (8000804 <MX_DMA2D_Init+0x68>)
 80007de:	f002 f9a3 	bl	8002b28 <HAL_DMA2D_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 80007e8:	f001 f8b0 	bl	800194c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80007ec:	2101      	movs	r1, #1
 80007ee:	4805      	ldr	r0, [pc, #20]	@ (8000804 <MX_DMA2D_Init+0x68>)
 80007f0:	f002 fb04 	bl	8002dfc <HAL_DMA2D_ConfigLayer>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 80007fa:	f001 f8a7 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	2000004c 	.word	0x2000004c
 8000808:	4002b000 	.word	0x4002b000

0800080c <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b0aa      	sub	sp, #168	@ 0xa8
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */
  /* Activate LCD reset pin (active low) */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000818:	4884      	ldr	r0, [pc, #528]	@ (8000a2c <MX_DSIHOST_DSI_Init+0x220>)
 800081a:	f003 fc83 	bl	8004124 <HAL_GPIO_WritePin>

  HAL_Delay(20); /* wait 20 ms */
 800081e:	2014      	movs	r0, #20
 8000820:	f001 ff12 	bl	8002648 <HAL_Delay>

  /* Deactivate LCD reset pin */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8000824:	2201      	movs	r2, #1
 8000826:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800082a:	4880      	ldr	r0, [pc, #512]	@ (8000a2c <MX_DSIHOST_DSI_Init+0x220>)
 800082c:	f003 fc7a 	bl	8004124 <HAL_GPIO_WritePin>

  /* Wait for 10ms after releasing XRES before sending commands */
  HAL_Delay(10);
 8000830:	200a      	movs	r0, #10
 8000832:	f001 ff09 	bl	8002648 <HAL_Delay>
  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000836:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000842:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000846:	2224      	movs	r2, #36	@ 0x24
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f006 fb57 	bl	8006efe <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000850:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
 8000860:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000862:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000866:	2234      	movs	r2, #52	@ 0x34
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f006 fb47 	bl	8006efe <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000870:	463b      	mov	r3, r7
 8000872:	222c      	movs	r2, #44	@ 0x2c
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f006 fb41 	bl	8006efe <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 800087c:	4b6c      	ldr	r3, [pc, #432]	@ (8000a30 <MX_DSIHOST_DSI_Init+0x224>)
 800087e:	4a6d      	ldr	r2, [pc, #436]	@ (8000a34 <MX_DSIHOST_DSI_Init+0x228>)
 8000880:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000882:	4b6b      	ldr	r3, [pc, #428]	@ (8000a30 <MX_DSIHOST_DSI_Init+0x224>)
 8000884:	2200      	movs	r2, #0
 8000886:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000888:	4b69      	ldr	r3, [pc, #420]	@ (8000a30 <MX_DSIHOST_DSI_Init+0x224>)
 800088a:	2204      	movs	r2, #4
 800088c:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800088e:	4b68      	ldr	r3, [pc, #416]	@ (8000a30 <MX_DSIHOST_DSI_Init+0x224>)
 8000890:	2201      	movs	r2, #1
 8000892:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 100;
 8000894:	2364      	movs	r3, #100	@ 0x64
 8000896:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 800089a:	2305      	movs	r3, #5
 800089c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80008a6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008aa:	4619      	mov	r1, r3
 80008ac:	4860      	ldr	r0, [pc, #384]	@ (8000a30 <MX_DSIHOST_DSI_Init+0x224>)
 80008ae:	f002 fb8b 	bl	8002fc8 <HAL_DSI_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_DSIHOST_DSI_Init+0xb0>
  {
    Error_Handler();
 80008b8:	f001 f848 	bl	800194c <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 80008bc:	2301      	movs	r3, #1
 80008be:	67bb      	str	r3, [r7, #120]	@ 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 80008dc:	2300      	movs	r3, #0
 80008de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  HostTimeouts.BTATimeout = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80008ee:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80008f2:	4619      	mov	r1, r3
 80008f4:	484e      	ldr	r0, [pc, #312]	@ (8000a30 <MX_DSIHOST_DSI_Init+0x224>)
 80008f6:	f003 f87d 	bl	80039f4 <HAL_DSI_ConfigHostTimeouts>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_DSIHOST_DSI_Init+0xf8>
  {
    Error_Handler();
 8000900:	f001 f824 	bl	800194c <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8000904:	231c      	movs	r3, #28
 8000906:	663b      	str	r3, [r7, #96]	@ 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000908:	2321      	movs	r3, #33	@ 0x21
 800090a:	667b      	str	r3, [r7, #100]	@ 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 800090c:	230f      	movs	r3, #15
 800090e:	66bb      	str	r3, [r7, #104]	@ 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8000910:	2319      	movs	r3, #25
 8000912:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	673b      	str	r3, [r7, #112]	@ 0x70
  PhyTimings.StopWaitTime = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 800091c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000920:	4619      	mov	r1, r3
 8000922:	4843      	ldr	r0, [pc, #268]	@ (8000a30 <MX_DSIHOST_DSI_Init+0x224>)
 8000924:	f002 fffc 	bl	8003920 <HAL_DSI_ConfigPhyTimer>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_DSIHOST_DSI_Init+0x126>
  {
    Error_Handler();
 800092e:	f001 f80d 	bl	800194c <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000932:	2104      	movs	r1, #4
 8000934:	483e      	ldr	r0, [pc, #248]	@ (8000a30 <MX_DSIHOST_DSI_Init+0x224>)
 8000936:	f002 ffcb 	bl	80038d0 <HAL_DSI_ConfigFlowControl>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_DSIHOST_DSI_Init+0x138>
  {
    Error_Handler();
 8000940:	f001 f804 	bl	800194c <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000944:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000948:	4839      	ldr	r0, [pc, #228]	@ (8000a30 <MX_DSIHOST_DSI_Init+0x224>)
 800094a:	f003 fa11 	bl	8003d70 <HAL_DSI_SetLowPowerRXFilter>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_DSIHOST_DSI_Init+0x14c>
  {
    Error_Handler();
 8000954:	f000 fffa 	bl	800194c <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_OVF) != HAL_OK)
 8000958:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800095c:	4834      	ldr	r0, [pc, #208]	@ (8000a30 <MX_DSIHOST_DSI_Init+0x224>)
 800095e:	f002 fcb3 	bl	80032c8 <HAL_DSI_ConfigErrorMonitor>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_DSIHOST_DSI_Init+0x160>
  {
    Error_Handler();
 8000968:	f000 fff0 	bl	800194c <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 800096c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000970:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000972:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000976:	633b      	str	r3, [r7, #48]	@ 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8000978:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800097c:	637b      	str	r3, [r7, #52]	@ 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 800097e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000982:	63bb      	str	r3, [r7, #56]	@ 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8000984:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000988:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 800098a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800098e:	643b      	str	r3, [r7, #64]	@ 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 8000990:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000994:	647b      	str	r3, [r7, #68]	@ 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000996:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800099a:	64bb      	str	r3, [r7, #72]	@ 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 800099c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80009a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 80009a2:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80009a6:	653b      	str	r3, [r7, #80]	@ 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 80009a8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80009ac:	657b      	str	r3, [r7, #84]	@ 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 80009ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80009b2:	65bb      	str	r3, [r7, #88]	@ 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 80009b4:	2302      	movs	r3, #2
 80009b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 80009b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009bc:	4619      	mov	r1, r3
 80009be:	481c      	ldr	r0, [pc, #112]	@ (8000a30 <MX_DSIHOST_DSI_Init+0x224>)
 80009c0:	f002 ff28 	bl	8003814 <HAL_DSI_ConfigCommand>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_DSIHOST_DSI_Init+0x1c2>
  {
    Error_Handler();
 80009ca:	f000 ffbf 	bl	800194c <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB565;
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 480;
 80009d6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80009da:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 80009dc:	2310      	movs	r3, #16
 80009de:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 80009e4:	2304      	movs	r3, #4
 80009e6:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 80009e8:	2302      	movs	r3, #2
 80009ea:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 80009f0:	2300      	movs	r3, #0
 80009f2:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	@ 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 80009f8:	2301      	movs	r3, #1
 80009fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 80009fc:	463b      	mov	r3, r7
 80009fe:	4619      	mov	r1, r3
 8000a00:	480b      	ldr	r0, [pc, #44]	@ (8000a30 <MX_DSIHOST_DSI_Init+0x224>)
 8000a02:	f002 fe2d 	bl	8003660 <HAL_DSI_ConfigAdaptedCommandMode>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_DSIHOST_DSI_Init+0x204>
  {
    Error_Handler();
 8000a0c:	f000 ff9e 	bl	800194c <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000a10:	2100      	movs	r1, #0
 8000a12:	4807      	ldr	r0, [pc, #28]	@ (8000a30 <MX_DSIHOST_DSI_Init+0x224>)
 8000a14:	f002 fdfb 	bl	800360e <HAL_DSI_SetGenericVCID>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_DSIHOST_DSI_Init+0x216>
  {
    Error_Handler();
 8000a1e:	f000 ff95 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	37a8      	adds	r7, #168	@ 0xa8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40022400 	.word	0x40022400
 8000a30:	200000a4 	.word	0x200000a4
 8000a34:	40016c00 	.word	0x40016c00

08000a38 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C4_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000aac <MX_I2C4_Init+0x74>)
 8000a3e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ab0 <MX_I2C4_Init+0x78>)
 8000a40:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 8000a42:	4b1a      	ldr	r3, [pc, #104]	@ (8000aac <MX_I2C4_Init+0x74>)
 8000a44:	4a1b      	ldr	r2, [pc, #108]	@ (8000ab4 <MX_I2C4_Init+0x7c>)
 8000a46:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000a48:	4b18      	ldr	r3, [pc, #96]	@ (8000aac <MX_I2C4_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a4e:	4b17      	ldr	r3, [pc, #92]	@ (8000aac <MX_I2C4_Init+0x74>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a54:	4b15      	ldr	r3, [pc, #84]	@ (8000aac <MX_I2C4_Init+0x74>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000a5a:	4b14      	ldr	r3, [pc, #80]	@ (8000aac <MX_I2C4_Init+0x74>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a60:	4b12      	ldr	r3, [pc, #72]	@ (8000aac <MX_I2C4_Init+0x74>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a66:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <MX_I2C4_Init+0x74>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000aac <MX_I2C4_Init+0x74>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000a72:	480e      	ldr	r0, [pc, #56]	@ (8000aac <MX_I2C4_Init+0x74>)
 8000a74:	f003 fb94 	bl	80041a0 <HAL_I2C_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000a7e:	f000 ff65 	bl	800194c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a82:	2100      	movs	r1, #0
 8000a84:	4809      	ldr	r0, [pc, #36]	@ (8000aac <MX_I2C4_Init+0x74>)
 8000a86:	f003 fc41 	bl	800430c <HAL_I2CEx_ConfigAnalogFilter>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000a90:	f000 ff5c 	bl	800194c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a94:	2100      	movs	r1, #0
 8000a96:	4805      	ldr	r0, [pc, #20]	@ (8000aac <MX_I2C4_Init+0x74>)
 8000a98:	f003 fc83 	bl	80043a2 <HAL_I2CEx_ConfigDigitalFilter>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000aa2:	f000 ff53 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200000c0 	.word	0x200000c0
 8000ab0:	40006000 	.word	0x40006000
 8000ab4:	20404768 	.word	0x20404768

08000ab8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b09c      	sub	sp, #112	@ 0x70
 8000abc:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000abe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000ac2:	2234      	movs	r2, #52	@ 0x34
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f006 fa19 	bl	8006efe <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000acc:	4b57      	ldr	r3, [pc, #348]	@ (8000c2c <MX_LTDC_Init+0x174>)
 8000ace:	4a58      	ldr	r2, [pc, #352]	@ (8000c30 <MX_LTDC_Init+0x178>)
 8000ad0:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ad2:	4b56      	ldr	r3, [pc, #344]	@ (8000c2c <MX_LTDC_Init+0x174>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ad8:	4b54      	ldr	r3, [pc, #336]	@ (8000c2c <MX_LTDC_Init+0x174>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ade:	4b53      	ldr	r3, [pc, #332]	@ (8000c2c <MX_LTDC_Init+0x174>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ae4:	4b51      	ldr	r3, [pc, #324]	@ (8000c2c <MX_LTDC_Init+0x174>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 1;
 8000aea:	4b50      	ldr	r3, [pc, #320]	@ (8000c2c <MX_LTDC_Init+0x174>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000af0:	4b4e      	ldr	r3, [pc, #312]	@ (8000c2c <MX_LTDC_Init+0x174>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 2;
 8000af6:	4b4d      	ldr	r3, [pc, #308]	@ (8000c2c <MX_LTDC_Init+0x174>)
 8000af8:	2202      	movs	r2, #2
 8000afa:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 2;
 8000afc:	4b4b      	ldr	r3, [pc, #300]	@ (8000c2c <MX_LTDC_Init+0x174>)
 8000afe:	2202      	movs	r2, #2
 8000b00:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 482;
 8000b02:	4b4a      	ldr	r3, [pc, #296]	@ (8000c2c <MX_LTDC_Init+0x174>)
 8000b04:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8000b08:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 802;
 8000b0a:	4b48      	ldr	r3, [pc, #288]	@ (8000c2c <MX_LTDC_Init+0x174>)
 8000b0c:	f240 3222 	movw	r2, #802	@ 0x322
 8000b10:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 483;
 8000b12:	4b46      	ldr	r3, [pc, #280]	@ (8000c2c <MX_LTDC_Init+0x174>)
 8000b14:	f240 12e3 	movw	r2, #483	@ 0x1e3
 8000b18:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 803;
 8000b1a:	4b44      	ldr	r3, [pc, #272]	@ (8000c2c <MX_LTDC_Init+0x174>)
 8000b1c:	f240 3223 	movw	r2, #803	@ 0x323
 8000b20:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000b22:	4b42      	ldr	r3, [pc, #264]	@ (8000c2c <MX_LTDC_Init+0x174>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000b2a:	4b40      	ldr	r3, [pc, #256]	@ (8000c2c <MX_LTDC_Init+0x174>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000b32:	4b3e      	ldr	r3, [pc, #248]	@ (8000c2c <MX_LTDC_Init+0x174>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b3a:	483c      	ldr	r0, [pc, #240]	@ (8000c2c <MX_LTDC_Init+0x174>)
 8000b3c:	f003 fc7d 	bl	800443a <HAL_LTDC_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_LTDC_Init+0x92>
  {
    Error_Handler();
 8000b46:	f000 ff01 	bl	800194c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 480;
 8000b4e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000b52:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 800;
 8000b58:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000b5c:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 255;
 8000b62:	23ff      	movs	r3, #255	@ 0xff
 8000b64:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000b6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b6e:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000b70:	2305      	movs	r3, #5
 8000b72:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 480;
 8000b78:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000b7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 800;
 8000b7e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000b82:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b96:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4823      	ldr	r0, [pc, #140]	@ (8000c2c <MX_LTDC_Init+0x174>)
 8000ba0:	f003 fdaa 	bl	80046f8 <HAL_LTDC_ConfigLayer>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_LTDC_Init+0xf6>
  {
    Error_Handler();
 8000baa:	f000 fecf 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */
  __HAL_LTDC_DISABLE(&hltdc);
 8000bae:	4b1f      	ldr	r3, [pc, #124]	@ (8000c2c <MX_LTDC_Init+0x174>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	699a      	ldr	r2, [r3, #24]
 8000bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c2c <MX_LTDC_Init+0x174>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f022 0201 	bic.w	r2, r2, #1
 8000bbc:	619a      	str	r2, [r3, #24]
  DSI_LPCmdTypeDef LPCmd;

  HAL_DSI_Start(&hdsi);
 8000bbe:	481d      	ldr	r0, [pc, #116]	@ (8000c34 <MX_LTDC_Init+0x17c>)
 8000bc0:	f002 ffe0 	bl	8003b84 <HAL_DSI_Start>
  OTM8009A_Init(OTM8009A_FORMAT_RBG565, OTM8009A_ORIENTATION_PORTRAIT);
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2002      	movs	r0, #2
 8000bc8:	f001 faba 	bl	8002140 <OTM8009A_Init>

  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000bcc:	2300      	movs	r3, #0
 8000bce:	9300      	str	r3, [sp, #0]
 8000bd0:	2328      	movs	r3, #40	@ 0x28
 8000bd2:	2215      	movs	r2, #21
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4817      	ldr	r0, [pc, #92]	@ (8000c34 <MX_LTDC_Init+0x17c>)
 8000bd8:	f003 f810 	bl	8003bfc <HAL_DSI_ShortWrite>

  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	603b      	str	r3, [r7, #0]
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	607b      	str	r3, [r7, #4]
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60bb      	str	r3, [r7, #8]
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	613b      	str	r3, [r7, #16]
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61bb      	str	r3, [r7, #24]
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	623b      	str	r3, [r7, #32]
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	627b      	str	r3, [r7, #36]	@ 0x24
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000c08:	463b      	mov	r3, r7
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4809      	ldr	r0, [pc, #36]	@ (8000c34 <MX_LTDC_Init+0x17c>)
 8000c0e:	f002 fe01 	bl	8003814 <HAL_DSI_ConfigCommand>

  __HAL_LTDC_ENABLE(&hltdc);
 8000c12:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <MX_LTDC_Init+0x174>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	699a      	ldr	r2, [r3, #24]
 8000c18:	4b04      	ldr	r3, [pc, #16]	@ (8000c2c <MX_LTDC_Init+0x174>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f042 0201 	orr.w	r2, r2, #1
 8000c20:	619a      	str	r2, [r3, #24]
  
  /* USER CODE END LTDC_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	3768      	adds	r7, #104	@ 0x68
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000114 	.word	0x20000114
 8000c30:	40016800 	.word	0x40016800
 8000c34:	200000a4 	.word	0x200000a4

08000c38 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000c3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce8 <MX_QUADSPI_Init+0xb0>)
 8000c3e:	4a2b      	ldr	r2, [pc, #172]	@ (8000cec <MX_QUADSPI_Init+0xb4>)
 8000c40:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000c42:	4b29      	ldr	r3, [pc, #164]	@ (8000ce8 <MX_QUADSPI_Init+0xb0>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 16;
 8000c48:	4b27      	ldr	r3, [pc, #156]	@ (8000ce8 <MX_QUADSPI_Init+0xb0>)
 8000c4a:	2210      	movs	r2, #16
 8000c4c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000c4e:	4b26      	ldr	r3, [pc, #152]	@ (8000ce8 <MX_QUADSPI_Init+0xb0>)
 8000c50:	2210      	movs	r2, #16
 8000c52:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 25;
 8000c54:	4b24      	ldr	r3, [pc, #144]	@ (8000ce8 <MX_QUADSPI_Init+0xb0>)
 8000c56:	2219      	movs	r2, #25
 8000c58:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 8000c5a:	4b23      	ldr	r3, [pc, #140]	@ (8000ce8 <MX_QUADSPI_Init+0xb0>)
 8000c5c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000c60:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c62:	4b21      	ldr	r3, [pc, #132]	@ (8000ce8 <MX_QUADSPI_Init+0xb0>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000c68:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce8 <MX_QUADSPI_Init+0xb0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce8 <MX_QUADSPI_Init+0xb0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c74:	481c      	ldr	r0, [pc, #112]	@ (8000ce8 <MX_QUADSPI_Init+0xb0>)
 8000c76:	f003 ff43 	bl	8004b00 <HAL_QSPI_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000c80:	f000 fe64 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */
  /* QSPI memory reset */
  if (QSPI_ResetMemory(&hqspi) != QSPI_OK)
 8000c84:	4818      	ldr	r0, [pc, #96]	@ (8000ce8 <MX_QUADSPI_Init+0xb0>)
 8000c86:	f000 fa0d 	bl	80010a4 <QSPI_ResetMemory>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_QUADSPI_Init+0x5c>
  {
    Error_Handler();
 8000c90:	f000 fe5c 	bl	800194c <Error_Handler>
  }

  /* Put QSPI memory in QPI mode */
  if( QSPI_EnterMemory_QPI( &hqspi )!=QSPI_OK )
 8000c94:	4814      	ldr	r0, [pc, #80]	@ (8000ce8 <MX_QUADSPI_Init+0xb0>)
 8000c96:	f000 fb2d 	bl	80012f4 <QSPI_EnterMemory_QPI>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_QUADSPI_Init+0x6c>
  {
    Error_Handler();
 8000ca0:	f000 fe54 	bl	800194c <Error_Handler>
  }

  /* Set the QSPI memory in 4-bytes address mode */
  if (QSPI_EnterFourBytesAddress(&hqspi) != QSPI_OK)
 8000ca4:	4810      	ldr	r0, [pc, #64]	@ (8000ce8 <MX_QUADSPI_Init+0xb0>)
 8000ca6:	f000 fb71 	bl	800138c <QSPI_EnterFourBytesAddress>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_QUADSPI_Init+0x7c>
  {
    Error_Handler();
 8000cb0:	f000 fe4c 	bl	800194c <Error_Handler>
  }

  /* Configuration of the dummy cycles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&hqspi) != QSPI_OK)
 8000cb4:	480c      	ldr	r0, [pc, #48]	@ (8000ce8 <MX_QUADSPI_Init+0xb0>)
 8000cb6:	f000 fba4 	bl	8001402 <QSPI_DummyCyclesCfg>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_QUADSPI_Init+0x8c>
  {
    Error_Handler();
 8000cc0:	f000 fe44 	bl	800194c <Error_Handler>
  }

  /* Configuration of the Output driver strength on memory side */
  if( QSPI_OutDrvStrengthCfg( &hqspi ) != QSPI_OK )
 8000cc4:	4808      	ldr	r0, [pc, #32]	@ (8000ce8 <MX_QUADSPI_Init+0xb0>)
 8000cc6:	f000 fc58 	bl	800157a <QSPI_OutDrvStrengthCfg>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_QUADSPI_Init+0x9c>
  {
    Error_Handler();
 8000cd0:	f000 fe3c 	bl	800194c <Error_Handler>
  }

  if( BSP_QSPI_EnableMemoryMappedMode(&hqspi) != QSPI_OK )
 8000cd4:	4804      	ldr	r0, [pc, #16]	@ (8000ce8 <MX_QUADSPI_Init+0xb0>)
 8000cd6:	f000 fd8a 	bl	80017ee <BSP_QSPI_EnableMemoryMappedMode>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_QUADSPI_Init+0xac>
  {
    Error_Handler();
 8000ce0:	f000 fe34 	bl	800194c <Error_Handler>
  }

  /* USER CODE END QUADSPI_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	200001bc 	.word	0x200001bc
 8000cec:	a0001000 	.word	0xa0001000

08000cf0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08c      	sub	sp, #48	@ 0x30
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
 8000d04:	611a      	str	r2, [r3, #16]
 8000d06:	615a      	str	r2, [r3, #20]
 8000d08:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000d0a:	4b25      	ldr	r3, [pc, #148]	@ (8000da0 <MX_FMC_Init+0xb0>)
 8000d0c:	4a25      	ldr	r2, [pc, #148]	@ (8000da4 <MX_FMC_Init+0xb4>)
 8000d0e:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000d10:	4b23      	ldr	r3, [pc, #140]	@ (8000da0 <MX_FMC_Init+0xb0>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000d16:	4b22      	ldr	r3, [pc, #136]	@ (8000da0 <MX_FMC_Init+0xb0>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000d1c:	4b20      	ldr	r3, [pc, #128]	@ (8000da0 <MX_FMC_Init+0xb0>)
 8000d1e:	2204      	movs	r2, #4
 8000d20:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000d22:	4b1f      	ldr	r3, [pc, #124]	@ (8000da0 <MX_FMC_Init+0xb0>)
 8000d24:	2220      	movs	r2, #32
 8000d26:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000d28:	4b1d      	ldr	r3, [pc, #116]	@ (8000da0 <MX_FMC_Init+0xb0>)
 8000d2a:	2240      	movs	r2, #64	@ 0x40
 8000d2c:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000da0 <MX_FMC_Init+0xb0>)
 8000d30:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000d34:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000d36:	4b1a      	ldr	r3, [pc, #104]	@ (8000da0 <MX_FMC_Init+0xb0>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000d3c:	4b18      	ldr	r3, [pc, #96]	@ (8000da0 <MX_FMC_Init+0xb0>)
 8000d3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d42:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000d44:	4b16      	ldr	r3, [pc, #88]	@ (8000da0 <MX_FMC_Init+0xb0>)
 8000d46:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d4a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000d4c:	4b14      	ldr	r3, [pc, #80]	@ (8000da0 <MX_FMC_Init+0xb0>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000d52:	2302      	movs	r3, #2
 8000d54:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000d56:	2307      	movs	r3, #7
 8000d58:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 4;
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 7;
 8000d5e:	2307      	movs	r3, #7
 8000d60:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 2;
 8000d62:	2302      	movs	r3, #2
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
  SdramTiming.RPDelay = 2;
 8000d66:	2302      	movs	r3, #2
 8000d68:	62bb      	str	r3, [r7, #40]	@ 0x28
  SdramTiming.RCDDelay = 3;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	480a      	ldr	r0, [pc, #40]	@ (8000da0 <MX_FMC_Init+0xb0>)
 8000d76:	f005 fc5b 	bl	8006630 <HAL_SDRAM_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_FMC_Init+0x94>
  {
    Error_Handler( );
 8000d80:	f000 fde4 	bl	800194c <Error_Handler>
  /* USER CODE BEGIN FMC_Init 2 */

  FMC_SDRAM_CommandTypeDef command;

  /* Program the SDRAM external device */
  BSP_SDRAM_Initialization_Sequence(&hsdram1, &command);
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	@ (8000da0 <MX_FMC_Init+0xb0>)
 8000d8a:	f000 f92d 	bl	8000fe8 <BSP_SDRAM_Initialization_Sequence>

  //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
  FMC_Bank1->BTCR[0] = 0x000030D2;
 8000d8e:	f04f 4320 	mov.w	r3, #2684354560	@ 0xa0000000
 8000d92:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000d96:	601a      	str	r2, [r3, #0]
  /* USER CODE END FMC_Init 2 */
}
 8000d98:	bf00      	nop
 8000d9a:	3730      	adds	r7, #48	@ 0x30
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000208 	.word	0x20000208
 8000da4:	a0000140 	.word	0xa0000140

08000da8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08e      	sub	sp, #56	@ 0x38
 8000dac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
 8000dbc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dbe:	4b6a      	ldr	r3, [pc, #424]	@ (8000f68 <MX_GPIO_Init+0x1c0>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	4a69      	ldr	r2, [pc, #420]	@ (8000f68 <MX_GPIO_Init+0x1c0>)
 8000dc4:	f043 0310 	orr.w	r3, r3, #16
 8000dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dca:	4b67      	ldr	r3, [pc, #412]	@ (8000f68 <MX_GPIO_Init+0x1c0>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	f003 0310 	and.w	r3, r3, #16
 8000dd2:	623b      	str	r3, [r7, #32]
 8000dd4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	4b64      	ldr	r3, [pc, #400]	@ (8000f68 <MX_GPIO_Init+0x1c0>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	4a63      	ldr	r2, [pc, #396]	@ (8000f68 <MX_GPIO_Init+0x1c0>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de2:	4b61      	ldr	r3, [pc, #388]	@ (8000f68 <MX_GPIO_Init+0x1c0>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	61fb      	str	r3, [r7, #28]
 8000dec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dee:	4b5e      	ldr	r3, [pc, #376]	@ (8000f68 <MX_GPIO_Init+0x1c0>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	4a5d      	ldr	r2, [pc, #372]	@ (8000f68 <MX_GPIO_Init+0x1c0>)
 8000df4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfa:	4b5b      	ldr	r3, [pc, #364]	@ (8000f68 <MX_GPIO_Init+0x1c0>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e02:	61bb      	str	r3, [r7, #24]
 8000e04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e06:	4b58      	ldr	r3, [pc, #352]	@ (8000f68 <MX_GPIO_Init+0x1c0>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0a:	4a57      	ldr	r2, [pc, #348]	@ (8000f68 <MX_GPIO_Init+0x1c0>)
 8000e0c:	f043 0308 	orr.w	r3, r3, #8
 8000e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e12:	4b55      	ldr	r3, [pc, #340]	@ (8000f68 <MX_GPIO_Init+0x1c0>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	f003 0308 	and.w	r3, r3, #8
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1e:	4b52      	ldr	r3, [pc, #328]	@ (8000f68 <MX_GPIO_Init+0x1c0>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	4a51      	ldr	r2, [pc, #324]	@ (8000f68 <MX_GPIO_Init+0x1c0>)
 8000e24:	f043 0304 	orr.w	r3, r3, #4
 8000e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2a:	4b4f      	ldr	r3, [pc, #316]	@ (8000f68 <MX_GPIO_Init+0x1c0>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	f003 0304 	and.w	r3, r3, #4
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e36:	4b4c      	ldr	r3, [pc, #304]	@ (8000f68 <MX_GPIO_Init+0x1c0>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	4a4b      	ldr	r2, [pc, #300]	@ (8000f68 <MX_GPIO_Init+0x1c0>)
 8000e3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e42:	4b49      	ldr	r3, [pc, #292]	@ (8000f68 <MX_GPIO_Init+0x1c0>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e4e:	4b46      	ldr	r3, [pc, #280]	@ (8000f68 <MX_GPIO_Init+0x1c0>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	4a45      	ldr	r2, [pc, #276]	@ (8000f68 <MX_GPIO_Init+0x1c0>)
 8000e54:	f043 0320 	orr.w	r3, r3, #32
 8000e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5a:	4b43      	ldr	r3, [pc, #268]	@ (8000f68 <MX_GPIO_Init+0x1c0>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	f003 0320 	and.w	r3, r3, #32
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000e66:	4b40      	ldr	r3, [pc, #256]	@ (8000f68 <MX_GPIO_Init+0x1c0>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	4a3f      	ldr	r2, [pc, #252]	@ (8000f68 <MX_GPIO_Init+0x1c0>)
 8000e6c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e72:	4b3d      	ldr	r3, [pc, #244]	@ (8000f68 <MX_GPIO_Init+0x1c0>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e7e:	4b3a      	ldr	r3, [pc, #232]	@ (8000f68 <MX_GPIO_Init+0x1c0>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	4a39      	ldr	r2, [pc, #228]	@ (8000f68 <MX_GPIO_Init+0x1c0>)
 8000e84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8a:	4b37      	ldr	r3, [pc, #220]	@ (8000f68 <MX_GPIO_Init+0x1c0>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8000e96:	2201      	movs	r2, #1
 8000e98:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e9c:	4833      	ldr	r0, [pc, #204]	@ (8000f6c <MX_GPIO_Init+0x1c4>)
 8000e9e:	f003 f941 	bl	8004124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	21c0      	movs	r1, #192	@ 0xc0
 8000ea6:	4832      	ldr	r0, [pc, #200]	@ (8000f70 <MX_GPIO_Init+0x1c8>)
 8000ea8:	f003 f93c 	bl	8004124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2140      	movs	r1, #64	@ 0x40
 8000eb0:	4830      	ldr	r0, [pc, #192]	@ (8000f74 <MX_GPIO_Init+0x1cc>)
 8000eb2:	f003 f937 	bl	8004124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2102      	movs	r1, #2
 8000eba:	482c      	ldr	r0, [pc, #176]	@ (8000f6c <MX_GPIO_Init+0x1c4>)
 8000ebc:	f003 f932 	bl	8004124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000ec0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ec4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000ed2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4824      	ldr	r0, [pc, #144]	@ (8000f6c <MX_GPIO_Init+0x1c4>)
 8000eda:	f002 ff77 	bl	8003dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 8000ede:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ee2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ee4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000eee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4820      	ldr	r0, [pc, #128]	@ (8000f78 <MX_GPIO_Init+0x1d0>)
 8000ef6:	f002 ff69 	bl	8003dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : RENDER_TIME_Pin VSYNC_FREQ_Pin */
  GPIO_InitStruct.Pin = RENDER_TIME_Pin|VSYNC_FREQ_Pin;
 8000efa:	23c0      	movs	r3, #192	@ 0xc0
 8000efc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efe:	2301      	movs	r3, #1
 8000f00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f06:	2303      	movs	r3, #3
 8000f08:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4817      	ldr	r0, [pc, #92]	@ (8000f70 <MX_GPIO_Init+0x1c8>)
 8000f12:	f002 ff5b 	bl	8003dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_ACTIVE_Pin */
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 8000f16:	2340      	movs	r3, #64	@ 0x40
 8000f18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000f26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4811      	ldr	r0, [pc, #68]	@ (8000f74 <MX_GPIO_Init+0x1cc>)
 8000f2e:	f002 ff4d 	bl	8003dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : FRAME_RATE_Pin */
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 8000f32:	2302      	movs	r3, #2
 8000f34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f36:	2301      	movs	r3, #1
 8000f38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 8000f42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f46:	4619      	mov	r1, r3
 8000f48:	4808      	ldr	r0, [pc, #32]	@ (8000f6c <MX_GPIO_Init+0x1c4>)
 8000f4a:	f002 ff3f 	bl	8003dcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2100      	movs	r1, #0
 8000f52:	2028      	movs	r0, #40	@ 0x28
 8000f54:	f001 fc54 	bl	8002800 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f58:	2028      	movs	r0, #40	@ 0x28
 8000f5a:	f001 fc6d 	bl	8002838 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f5e:	bf00      	nop
 8000f60:	3738      	adds	r7, #56	@ 0x38
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40022400 	.word	0x40022400
 8000f70:	40020800 	.word	0x40020800
 8000f74:	40021400 	.word	0x40021400
 8000f78:	40022000 	.word	0x40022000

08000f7c <OTM8009A_IO_Delay>:
    /**
     * @brief  OTM8009A delay
     * @param  Delay: Delay in ms
     */
    __weak void OTM8009A_IO_Delay(uint32_t Delay)
    {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
        HAL_Delay(Delay);
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f001 fb5f 	bl	8002648 <HAL_Delay>
    }
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <DSI_IO_WriteCmd>:
     *                 If inferior to 2, a long write command is performed else short.
     * @param  pParams: Pointer to parameter values table.
     * @retval HAL status
     */
    void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
    {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af02      	add	r7, sp, #8
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
        if (NbrParams <= 1)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d80d      	bhi.n	8000fc0 <DSI_IO_WriteCmd+0x2c>
        {
            HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	2215      	movs	r2, #21
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	480a      	ldr	r0, [pc, #40]	@ (8000fe4 <DSI_IO_WriteCmd+0x50>)
 8000fba:	f002 fe1f 	bl	8003bfc <HAL_DSI_ShortWrite>
        }
        else
        {
            HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams);
        }
    }
 8000fbe:	e00d      	b.n	8000fdc <DSI_IO_WriteCmd+0x48>
            HAL_DSI_LongWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams);
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	9301      	str	r3, [sp, #4]
 8000fce:	9200      	str	r2, [sp, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2239      	movs	r2, #57	@ 0x39
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4803      	ldr	r0, [pc, #12]	@ (8000fe4 <DSI_IO_WriteCmd+0x50>)
 8000fd8:	f002 fe32 	bl	8003c40 <HAL_DSI_LongWrite>
    }
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200000a4 	.word	0x200000a4

08000fe8 <BSP_SDRAM_Initialization_Sequence>:
  * @param  hsdram: SDRAM handle
  * @param  Command: Pointer to SDRAM command structure
  * @retval None
  */
static void BSP_SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
 __IO uint32_t tmpmrd = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]

    /* Step 1: Configure a clock configuration enable command */
    Command->CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	601a      	str	r2, [r3, #0]
    Command->CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	2210      	movs	r2, #16
 8001000:	605a      	str	r2, [r3, #4]
    Command->AutoRefreshNumber      = 1;
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	2201      	movs	r2, #1
 8001006:	609a      	str	r2, [r3, #8]
    Command->ModeRegisterDefinition = 0;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	2200      	movs	r2, #0
 800100c:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800100e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001012:	6839      	ldr	r1, [r7, #0]
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f005 fb3f 	bl	8006698 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 800101a:	2001      	movs	r0, #1
 800101c:	f001 fb14 	bl	8002648 <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command->CommandMode            = FMC_SDRAM_CMD_PALL;
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	2202      	movs	r2, #2
 8001024:	601a      	str	r2, [r3, #0]
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	2210      	movs	r2, #16
 800102a:	605a      	str	r2, [r3, #4]
    Command->AutoRefreshNumber      = 1;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	2201      	movs	r2, #1
 8001030:	609a      	str	r2, [r3, #8]
    Command->ModeRegisterDefinition = 0;
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	2200      	movs	r2, #0
 8001036:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001038:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800103c:	6839      	ldr	r1, [r7, #0]
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f005 fb2a 	bl	8006698 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure an Auto Refresh command */
    Command->CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	2203      	movs	r2, #3
 8001048:	601a      	str	r2, [r3, #0]
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	2210      	movs	r2, #16
 800104e:	605a      	str	r2, [r3, #4]
    Command->AutoRefreshNumber      = 8;
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	2208      	movs	r2, #8
 8001054:	609a      	str	r2, [r3, #8]
    Command->ModeRegisterDefinition = 0;
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800105c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001060:	6839      	ldr	r1, [r7, #0]
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f005 fb18 	bl	8006698 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          | \
 8001068:	f44f 730c 	mov.w	r3, #560	@ 0x230
 800106c:	60fb      	str	r3, [r7, #12]
             SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   | \
             SDRAM_MODEREG_CAS_LATENCY_3           | \
             SDRAM_MODEREG_OPERATING_MODE_STANDARD | \
             SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command->CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	2204      	movs	r2, #4
 8001072:	601a      	str	r2, [r3, #0]
    Command->CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	2210      	movs	r2, #16
 8001078:	605a      	str	r2, [r3, #4]
    Command->AutoRefreshNumber      = 1;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	2201      	movs	r2, #1
 800107e:	609a      	str	r2, [r3, #8]
    Command->ModeRegisterDefinition = tmpmrd;
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001086:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800108a:	6839      	ldr	r1, [r7, #0]
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f005 fb03 	bl	8006698 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 8001092:	f240 712a 	movw	r1, #1834	@ 0x72a
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f005 fb33 	bl	8006702 <HAL_SDRAM_ProgramRefreshRate>

}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b098      	sub	sp, #96	@ 0x60
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  QSPI_AutoPollingTypeDef  s_config;
  uint8_t                  reg;

  /* Send command RESET command in QPI mode (QUAD I/Os) */
  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80010ac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010b0:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.Instruction       = RESET_ENABLE_CMD;
 80010b2:	2366      	movs	r3, #102	@ 0x66
 80010b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80010ba:	2300      	movs	r3, #0
 80010bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataMode          = QSPI_DATA_NONE;
 80010be:	2300      	movs	r3, #0
 80010c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DummyCycles       = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80010ca:	2300      	movs	r3, #0
 80010cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80010ce:	2300      	movs	r3, #0
 80010d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80010d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010da:	4619      	mov	r1, r3
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f003 fd8b 	bl	8004bf8 <HAL_QSPI_Command>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e0ff      	b.n	80012ec <QSPI_ResetMemory+0x248>
  }
  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 80010ec:	2399      	movs	r3, #153	@ 0x99
 80010ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80010f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010f8:	4619      	mov	r1, r3
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f003 fd7c 	bl	8004bf8 <HAL_QSPI_Command>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e0f0      	b.n	80012ec <QSPI_ResetMemory+0x248>
  }

  /* Send command RESET command in SPI mode */
  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800110a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800110e:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.Instruction       = RESET_ENABLE_CMD;
 8001110:	2366      	movs	r3, #102	@ 0x66
 8001112:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001114:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001118:	f241 3288 	movw	r2, #5000	@ 0x1388
 800111c:	4619      	mov	r1, r3
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f003 fd6a 	bl	8004bf8 <HAL_QSPI_Command>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <QSPI_ResetMemory+0x8a>
  {
    return QSPI_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e0de      	b.n	80012ec <QSPI_ResetMemory+0x248>
  }
  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 800112e:	2399      	movs	r3, #153	@ 0x99
 8001130:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001132:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800113a:	4619      	mov	r1, r3
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f003 fd5b 	bl	8004bf8 <HAL_QSPI_Command>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <QSPI_ResetMemory+0xa8>
  {
    return QSPI_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e0cf      	b.n	80012ec <QSPI_ResetMemory+0x248>
  }

  /* After reset CMD, 1000ms requested if QSPI memory SWReset occured during full chip erase operation */
  HAL_Delay( 1000 );
 800114c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001150:	f001 fa7a 	bl	8002648 <HAL_Delay>

  /* Configure automatic polling mode to wait the WIP bit=0 */
  s_config.Match           = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	613b      	str	r3, [r7, #16]
  s_config.Mask            = MX25L512_SR_WIP;
 8001158:	2301      	movs	r3, #1
 800115a:	617b      	str	r3, [r7, #20]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800115c:	2300      	movs	r3, #0
 800115e:	623b      	str	r3, [r7, #32]
  s_config.StatusBytesSize = 1;
 8001160:	2301      	movs	r3, #1
 8001162:	61fb      	str	r3, [r7, #28]
  s_config.Interval        = 0x10;
 8001164:	2310      	movs	r3, #16
 8001166:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001168:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800116c:	627b      	str	r3, [r7, #36]	@ 0x24

  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800116e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001172:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.Instruction     = READ_STATUS_REG_CMD;
 8001174:	2305      	movs	r3, #5
 8001176:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode        = QSPI_DATA_1_LINE;
 8001178:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800117c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800117e:	f107 0210 	add.w	r2, r7, #16
 8001182:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001186:	f241 3388 	movw	r3, #5000	@ 0x1388
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f003 fec1 	bl	8004f12 <HAL_QSPI_AutoPolling>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <QSPI_ResetMemory+0xf6>
  {
    return QSPI_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e0a8      	b.n	80012ec <QSPI_ResetMemory+0x248>
  }

  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800119a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800119e:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80011a0:	2305      	movs	r3, #5
 80011a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80011ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80011b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DummyCycles       = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.NbData            = 1;
 80011b6:	2301      	movs	r3, #1
 80011b8:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80011be:	2300      	movs	r3, #0
 80011c0:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80011c2:	2300      	movs	r3, #0
 80011c4:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80011c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011ce:	4619      	mov	r1, r3
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f003 fd11 	bl	8004bf8 <HAL_QSPI_Command>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <QSPI_ResetMemory+0x13c>
  {
    return QSPI_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e085      	b.n	80012ec <QSPI_ResetMemory+0x248>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80011e0:	f107 030f 	add.w	r3, r7, #15
 80011e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011e8:	4619      	mov	r1, r3
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f003 fdf4 	bl	8004dd8 <HAL_QSPI_Receive>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <QSPI_ResetMemory+0x156>
  {
    return QSPI_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e078      	b.n	80012ec <QSPI_ResetMemory+0x248>
  }

  /* Enable write operations, command in 1 bit */
  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80011fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011fe:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8001200:	2306      	movs	r3, #6
 8001202:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001204:	2300      	movs	r3, #0
 8001206:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001208:	2300      	movs	r3, #0
 800120a:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataMode          = QSPI_DATA_NONE;
 800120c:	2300      	movs	r3, #0
 800120e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DummyCycles       = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001214:	2300      	movs	r3, #0
 8001216:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001218:	2300      	movs	r3, #0
 800121a:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800121c:	2300      	movs	r3, #0
 800121e:	65fb      	str	r3, [r7, #92]	@ 0x5c

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001220:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001224:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001228:	4619      	mov	r1, r3
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f003 fce4 	bl	8004bf8 <HAL_QSPI_Command>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <QSPI_ResetMemory+0x196>
  {
    return QSPI_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e058      	b.n	80012ec <QSPI_ResetMemory+0x248>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MX25L512_SR_WREN;
 800123a:	2302      	movs	r3, #2
 800123c:	613b      	str	r3, [r7, #16]
  s_config.Mask            = MX25L512_SR_WREN;
 800123e:	2302      	movs	r3, #2
 8001240:	617b      	str	r3, [r7, #20]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8001242:	2300      	movs	r3, #0
 8001244:	623b      	str	r3, [r7, #32]
  s_config.StatusBytesSize = 1;
 8001246:	2301      	movs	r3, #1
 8001248:	61fb      	str	r3, [r7, #28]
  s_config.Interval        = 0x10;
 800124a:	2310      	movs	r3, #16
 800124c:	61bb      	str	r3, [r7, #24]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800124e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001252:	627b      	str	r3, [r7, #36]	@ 0x24

  s_command.Instruction    = READ_STATUS_REG_CMD;
 8001254:	2305      	movs	r3, #5
 8001256:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8001258:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800125c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800125e:	f107 0210 	add.w	r2, r7, #16
 8001262:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001266:	f241 3388 	movw	r3, #5000	@ 0x1388
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f003 fe51 	bl	8004f12 <HAL_QSPI_AutoPolling>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <QSPI_ResetMemory+0x1d6>
  {
    return QSPI_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e038      	b.n	80012ec <QSPI_ResetMemory+0x248>
  }

  /* Update the configuration register with new dummy cycles */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800127a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800127e:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 8001280:	2301      	movs	r3, #1
 8001282:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001284:	2300      	movs	r3, #0
 8001286:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001288:	2300      	movs	r3, #0
 800128a:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800128c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001290:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DummyCycles       = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.NbData            = 1;
 8001296:	2301      	movs	r3, #1
 8001298:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800129a:	2300      	movs	r3, #0
 800129c:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800129e:	2300      	movs	r3, #0
 80012a0:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80012a2:	2300      	movs	r3, #0
 80012a4:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Enable the Quad IO on the QSPI memory (Non-volatile bit) */
  reg |= MX25L512_SR_QUADEN;
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	73fb      	strb	r3, [r7, #15]

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80012b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012b8:	4619      	mov	r1, r3
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f003 fc9c 	bl	8004bf8 <HAL_QSPI_Command>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <QSPI_ResetMemory+0x226>
  {
    return QSPI_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e010      	b.n	80012ec <QSPI_ResetMemory+0x248>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80012ca:	f107 030f 	add.w	r3, r7, #15
 80012ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012d2:	4619      	mov	r1, r3
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f003 fced 	bl	8004cb4 <HAL_QSPI_Transmit>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <QSPI_ResetMemory+0x240>
  {
    return QSPI_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e003      	b.n	80012ec <QSPI_ResetMemory+0x248>
  }

  /* 40ms  Write Status/Configuration Register Cycle Time */
  HAL_Delay( 40 );
 80012e4:	2028      	movs	r0, #40	@ 0x28
 80012e6:	f001 f9af 	bl	8002648 <HAL_Delay>

  return QSPI_OK;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3760      	adds	r7, #96	@ 0x60
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <QSPI_EnterMemory_QPI>:
  * @brief  This function put QSPI memory in QPI mode (quad I/O).
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_EnterMemory_QPI( QSPI_HandleTypeDef *hqspi )
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b096      	sub	sp, #88	@ 0x58
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef      s_command;
  QSPI_AutoPollingTypeDef  s_config;

  /* Initialize the QPI enable command */
  /* QSPI memory is supported to be in SPI mode, so CMD on 1 LINE */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80012fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001300:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.Instruction       = ENTER_QUAD_CMD;
 8001302:	2335      	movs	r3, #53	@ 0x35
 8001304:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001306:	2300      	movs	r3, #0
 8001308:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800130a:	2300      	movs	r3, #0
 800130c:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 800130e:	2300      	movs	r3, #0
 8001310:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.DummyCycles       = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001316:	2300      	movs	r3, #0
 8001318:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800131a:	2300      	movs	r3, #0
 800131c:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800131e:	2300      	movs	r3, #0
 8001320:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001322:	f107 0320 	add.w	r3, r7, #32
 8001326:	f241 3288 	movw	r2, #5000	@ 0x1388
 800132a:	4619      	mov	r1, r3
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f003 fc63 	bl	8004bf8 <HAL_QSPI_Command>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <QSPI_EnterMemory_QPI+0x48>
  {
    return QSPI_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e023      	b.n	8001384 <QSPI_EnterMemory_QPI+0x90>
  }

  /* Configure automatic polling mode to wait the QUADEN bit=1 and WIP bit=0 */
  s_config.Match           = MX25L512_SR_QUADEN;
 800133c:	2340      	movs	r3, #64	@ 0x40
 800133e:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_QUADEN|MX25L512_SR_WIP;
 8001340:	2341      	movs	r3, #65	@ 0x41
 8001342:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8001344:	2300      	movs	r3, #0
 8001346:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8001348:	2301      	movs	r3, #1
 800134a:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 800134c:	2310      	movs	r3, #16
 800134e:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001350:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001354:	61fb      	str	r3, [r7, #28]

  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8001356:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800135a:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 800135c:	2305      	movs	r3, #5
 800135e:	623b      	str	r3, [r7, #32]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8001360:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8001364:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001366:	f107 0208 	add.w	r2, r7, #8
 800136a:	f107 0120 	add.w	r1, r7, #32
 800136e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f003 fdcd 	bl	8004f12 <HAL_QSPI_AutoPolling>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <QSPI_EnterMemory_QPI+0x8e>
  {
    return QSPI_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e000      	b.n	8001384 <QSPI_EnterMemory_QPI+0x90>
  }

  return QSPI_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3758      	adds	r7, #88	@ 0x58
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <QSPI_EnterFourBytesAddress>:
  * @brief  This function set the QSPI memory in 4-byte address mode
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_EnterFourBytesAddress(QSPI_HandleTypeDef *hqspi)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b090      	sub	sp, #64	@ 0x40
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8001394:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001398:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = ENTER_4_BYTE_ADDR_MODE_CMD;
 800139a:	23b7      	movs	r3, #183	@ 0xb7
 800139c:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles       = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80013b2:	2300      	movs	r3, #0
 80013b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80013b6:	2300      	movs	r3, #0
 80013b8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 f996 	bl	80016ec <QSPI_WriteEnable>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <QSPI_EnterFourBytesAddress+0x3e>
  {
    return QSPI_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e017      	b.n	80013fa <QSPI_EnterFourBytesAddress+0x6e>
  }

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80013ca:	f107 0308 	add.w	r3, r7, #8
 80013ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013d2:	4619      	mov	r1, r3
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f003 fc0f 	bl	8004bf8 <HAL_QSPI_Command>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <QSPI_EnterFourBytesAddress+0x58>
  {
    return QSPI_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e00a      	b.n	80013fa <QSPI_EnterFourBytesAddress+0x6e>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80013e4:	f241 3188 	movw	r1, #5000	@ 0x1388
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f000 f9c8 	bl	800177e <QSPI_AutoPollingMemReady>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <QSPI_EnterFourBytesAddress+0x6c>
  {
    return QSPI_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e000      	b.n	80013fa <QSPI_EnterFourBytesAddress+0x6e>
  }

  return QSPI_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3740      	adds	r7, #64	@ 0x40
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b094      	sub	sp, #80	@ 0x50
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg[2];

  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800140a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800140e:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8001410:	2305      	movs	r3, #5
 8001412:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001414:	2300      	movs	r3, #0
 8001416:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001418:	2300      	movs	r3, #0
 800141a:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800141c:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8001420:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DummyCycles       = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.NbData            = 1;
 8001426:	2301      	movs	r3, #1
 8001428:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800142a:	2300      	movs	r3, #0
 800142c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800142e:	2300      	movs	r3, #0
 8001430:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001432:	2300      	movs	r3, #0
 8001434:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001436:	f107 0310 	add.w	r3, r7, #16
 800143a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800143e:	4619      	mov	r1, r3
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f003 fbd9 	bl	8004bf8 <HAL_QSPI_Command>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e090      	b.n	8001572 <QSPI_DummyCyclesCfg+0x170>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001450:	f107 030c 	add.w	r3, r7, #12
 8001454:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001458:	4619      	mov	r1, r3
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f003 fcbc 	bl	8004dd8 <HAL_QSPI_Receive>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e083      	b.n	8001572 <QSPI_DummyCyclesCfg+0x170>
  }

  /* Initialize the reading of configuration register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800146a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800146e:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.Instruction       = READ_CFG_REG_CMD;
 8001470:	2315      	movs	r3, #21
 8001472:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001474:	2300      	movs	r3, #0
 8001476:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001478:	2300      	movs	r3, #0
 800147a:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800147c:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8001480:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DummyCycles       = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.NbData            = 1;
 8001486:	2301      	movs	r3, #1
 8001488:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800148a:	2300      	movs	r3, #0
 800148c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800148e:	2300      	movs	r3, #0
 8001490:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001492:	2300      	movs	r3, #0
 8001494:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001496:	f107 0310 	add.w	r3, r7, #16
 800149a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800149e:	4619      	mov	r1, r3
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f003 fba9 	bl	8004bf8 <HAL_QSPI_Command>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <QSPI_DummyCyclesCfg+0xae>
  {
    return QSPI_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e060      	b.n	8001572 <QSPI_DummyCyclesCfg+0x170>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80014b0:	f107 030c 	add.w	r3, r7, #12
 80014b4:	3301      	adds	r3, #1
 80014b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014ba:	4619      	mov	r1, r3
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f003 fc8b 	bl	8004dd8 <HAL_QSPI_Receive>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <QSPI_DummyCyclesCfg+0xca>
  {
    return QSPI_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e052      	b.n	8001572 <QSPI_DummyCyclesCfg+0x170>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f000 f90d 	bl	80016ec <QSPI_WriteEnable>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <QSPI_DummyCyclesCfg+0xda>
  {
    return QSPI_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e04a      	b.n	8001572 <QSPI_DummyCyclesCfg+0x170>
  }

  /* Update the configuration register with new dummy cycles */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80014dc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 80014e2:	2301      	movs	r3, #1
 80014e4:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80014ee:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80014f2:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DummyCycles       = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.NbData            = 2;
 80014f8:	2302      	movs	r3, #2
 80014fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001500:	2300      	movs	r3, #0
 8001502:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001504:	2300      	movs	r3, #0
 8001506:	647b      	str	r3, [r7, #68]	@ 0x44

  /* MX25L512_DUMMY_CYCLES_READ_QUAD = 3 for 10 cycles in QPI mode */
  MODIFY_REG( reg[1], MX25L512_CR_NB_DUMMY, (MX25L512_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L512_CR_NB_DUMMY)));
 8001508:	7b7b      	ldrb	r3, [r7, #13]
 800150a:	b25b      	sxtb	r3, r3
 800150c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001510:	b25a      	sxtb	r2, r3
 8001512:	23c0      	movs	r3, #192	@ 0xc0
 8001514:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001516:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001518:	fa93 f3a3 	rbit	r3, r3
 800151c:	64bb      	str	r3, [r7, #72]	@ 0x48
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800151e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001520:	fab3 f383 	clz	r3, r3
 8001524:	b2db      	uxtb	r3, r3
 8001526:	4619      	mov	r1, r3
 8001528:	2303      	movs	r3, #3
 800152a:	408b      	lsls	r3, r1
 800152c:	b25b      	sxtb	r3, r3
 800152e:	4313      	orrs	r3, r2
 8001530:	b25b      	sxtb	r3, r3
 8001532:	b2db      	uxtb	r3, r3
 8001534:	737b      	strb	r3, [r7, #13]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001536:	f107 0310 	add.w	r3, r7, #16
 800153a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800153e:	4619      	mov	r1, r3
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f003 fb59 	bl	8004bf8 <HAL_QSPI_Command>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <QSPI_DummyCyclesCfg+0x14e>
  {
    return QSPI_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e010      	b.n	8001572 <QSPI_DummyCyclesCfg+0x170>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001558:	4619      	mov	r1, r3
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f003 fbaa 	bl	8004cb4 <HAL_QSPI_Transmit>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <QSPI_DummyCyclesCfg+0x168>
  {
    return QSPI_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e003      	b.n	8001572 <QSPI_DummyCyclesCfg+0x170>
  }

  /* 40ms  Write Status/Configuration Register Cycle Time */
  HAL_Delay( 40 );
 800156a:	2028      	movs	r0, #40	@ 0x28
 800156c:	f001 f86c 	bl	8002648 <HAL_Delay>

  return QSPI_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3750      	adds	r7, #80	@ 0x50
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <QSPI_OutDrvStrengthCfg>:
  * @brief  This function configure the Output driver strength on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_OutDrvStrengthCfg( QSPI_HandleTypeDef *hqspi )
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b094      	sub	sp, #80	@ 0x50
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg[2];

  /* Initialize the reading of status register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8001582:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001586:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8001588:	2305      	movs	r3, #5
 800158a:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800158c:	2300      	movs	r3, #0
 800158e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001590:	2300      	movs	r3, #0
 8001592:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8001594:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8001598:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DummyCycles       = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.NbData            = 1;
 800159e:	2301      	movs	r3, #1
 80015a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80015a6:	2300      	movs	r3, #0
 80015a8:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80015aa:	2300      	movs	r3, #0
 80015ac:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80015ae:	f107 0310 	add.w	r3, r7, #16
 80015b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015b6:	4619      	mov	r1, r3
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f003 fb1d 	bl	8004bf8 <HAL_QSPI_Command>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <QSPI_OutDrvStrengthCfg+0x4e>
  {
    return QSPI_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e08d      	b.n	80016e4 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80015c8:	f107 030c 	add.w	r3, r7, #12
 80015cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015d0:	4619      	mov	r1, r3
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f003 fc00 	bl	8004dd8 <HAL_QSPI_Receive>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <QSPI_OutDrvStrengthCfg+0x68>
  {
    return QSPI_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e080      	b.n	80016e4 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Initialize the reading of configuration register */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80015e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.Instruction       = READ_CFG_REG_CMD;
 80015e8:	2315      	movs	r3, #21
 80015ea:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80015f4:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80015f8:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DummyCycles       = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.NbData            = 1;
 80015fe:	2301      	movs	r3, #1
 8001600:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001602:	2300      	movs	r3, #0
 8001604:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001606:	2300      	movs	r3, #0
 8001608:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800160a:	2300      	movs	r3, #0
 800160c:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800160e:	f107 0310 	add.w	r3, r7, #16
 8001612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001616:	4619      	mov	r1, r3
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f003 faed 	bl	8004bf8 <HAL_QSPI_Command>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <QSPI_OutDrvStrengthCfg+0xae>
  {
    return QSPI_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e05d      	b.n	80016e4 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001628:	f107 030c 	add.w	r3, r7, #12
 800162c:	3301      	adds	r3, #1
 800162e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001632:	4619      	mov	r1, r3
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f003 fbcf 	bl	8004dd8 <HAL_QSPI_Receive>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <QSPI_OutDrvStrengthCfg+0xca>
  {
    return QSPI_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e04f      	b.n	80016e4 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 f851 	bl	80016ec <QSPI_WriteEnable>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <QSPI_OutDrvStrengthCfg+0xda>
  {
    return QSPI_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e047      	b.n	80016e4 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Update the configuration register with new output driver strength */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8001654:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001658:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.Instruction       = WRITE_STATUS_CFG_REG_CMD;
 800165a:	2301      	movs	r3, #1
 800165c:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800165e:	2300      	movs	r3, #0
 8001660:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001662:	2300      	movs	r3, #0
 8001664:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8001666:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800166a:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DummyCycles       = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.NbData            = 2;
 8001670:	2302      	movs	r3, #2
 8001672:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001674:	2300      	movs	r3, #0
 8001676:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001678:	2300      	movs	r3, #0
 800167a:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800167c:	2300      	movs	r3, #0
 800167e:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Set Output Strength of the QSPI memory 15 ohms */
  MODIFY_REG( reg[1], MX25L512_CR_ODS, (MX25L512_CR_ODS_15 << POSITION_VAL(MX25L512_CR_ODS)));
 8001680:	7b7b      	ldrb	r3, [r7, #13]
 8001682:	b25b      	sxtb	r3, r3
 8001684:	f023 0307 	bic.w	r3, r3, #7
 8001688:	b25a      	sxtb	r2, r3
 800168a:	2307      	movs	r3, #7
 800168c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001690:	fa93 f3a3 	rbit	r3, r3
 8001694:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001696:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001698:	fab3 f383 	clz	r3, r3
 800169c:	b2db      	uxtb	r3, r3
 800169e:	4619      	mov	r1, r3
 80016a0:	2306      	movs	r3, #6
 80016a2:	408b      	lsls	r3, r1
 80016a4:	b25b      	sxtb	r3, r3
 80016a6:	4313      	orrs	r3, r2
 80016a8:	b25b      	sxtb	r3, r3
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	737b      	strb	r3, [r7, #13]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80016ae:	f107 0310 	add.w	r3, r7, #16
 80016b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016b6:	4619      	mov	r1, r3
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f003 fa9d 	bl	8004bf8 <HAL_QSPI_Command>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <QSPI_OutDrvStrengthCfg+0x14e>
  {
    return QSPI_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e00d      	b.n	80016e4 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80016c8:	f107 030c 	add.w	r3, r7, #12
 80016cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016d0:	4619      	mov	r1, r3
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f003 faee 	bl	8004cb4 <HAL_QSPI_Transmit>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <QSPI_OutDrvStrengthCfg+0x168>
  {
    return QSPI_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <QSPI_OutDrvStrengthCfg+0x16a>
  }

  return QSPI_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3750      	adds	r7, #80	@ 0x50
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b096      	sub	sp, #88	@ 0x58
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80016f4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 80016fa:	2306      	movs	r3, #6
 80016fc:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80016fe:	2300      	movs	r3, #0
 8001700:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001702:	2300      	movs	r3, #0
 8001704:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8001706:	2300      	movs	r3, #0
 8001708:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.DummyCycles       = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800170e:	2300      	movs	r3, #0
 8001710:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001712:	2300      	movs	r3, #0
 8001714:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001716:	2300      	movs	r3, #0
 8001718:	657b      	str	r3, [r7, #84]	@ 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800171a:	f107 0320 	add.w	r3, r7, #32
 800171e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001722:	4619      	mov	r1, r3
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f003 fa67 	bl	8004bf8 <HAL_QSPI_Command>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e020      	b.n	8001776 <QSPI_WriteEnable+0x8a>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MX25L512_SR_WREN;
 8001734:	2302      	movs	r3, #2
 8001736:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_WREN;
 8001738:	2302      	movs	r3, #2
 800173a:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800173c:	2300      	movs	r3, #0
 800173e:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8001740:	2301      	movs	r3, #1
 8001742:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8001744:	2310      	movs	r3, #16
 8001746:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8001748:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800174c:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = READ_STATUS_REG_CMD;
 800174e:	2305      	movs	r3, #5
 8001750:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_4_LINES;
 8001752:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8001756:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001758:	f107 0208 	add.w	r2, r7, #8
 800175c:	f107 0120 	add.w	r1, r7, #32
 8001760:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f003 fbd4 	bl	8004f12 <HAL_QSPI_AutoPolling>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e000      	b.n	8001776 <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3758      	adds	r7, #88	@ 0x58
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b096      	sub	sp, #88	@ 0x58
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
 8001786:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8001788:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800178c:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 800178e:	2305      	movs	r3, #5
 8001790:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001792:	2300      	movs	r3, #0
 8001794:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001796:	2300      	movs	r3, #0
 8001798:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800179a:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800179e:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.DummyCycles       = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80017a4:	2300      	movs	r3, #0
 80017a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80017a8:	2300      	movs	r3, #0
 80017aa:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80017ac:	2300      	movs	r3, #0
 80017ae:	657b      	str	r3, [r7, #84]	@ 0x54

  s_config.Match           = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MX25L512_SR_WIP;
 80017b4:	2301      	movs	r3, #1
 80017b6:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 80017bc:	2301      	movs	r3, #1
 80017be:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 80017c0:	2310      	movs	r3, #16
 80017c2:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80017c4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017c8:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80017ca:	f107 0208 	add.w	r2, r7, #8
 80017ce:	f107 0120 	add.w	r1, r7, #32
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f003 fb9c 	bl	8004f12 <HAL_QSPI_AutoPolling>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e000      	b.n	80017e6 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3758      	adds	r7, #88	@ 0x58
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <BSP_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
static uint8_t BSP_QSPI_EnableMemoryMappedMode(QSPI_HandleTypeDef *hqspi)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b092      	sub	sp, #72	@ 0x48
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80017f6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.Instruction       = QPI_READ_4_BYTE_ADDR_CMD;
 80017fc:	23ec      	movs	r3, #236	@ 0xec
 80017fe:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001800:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001804:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8001806:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800180a:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800180c:	2300      	movs	r3, #0
 800180e:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8001810:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8001814:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DummyCycles       = MX25L512_DUMMY_CYCLES_READ_QUAD_IO;
 8001816:	230a      	movs	r3, #10
 8001818:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800181a:	2300      	movs	r3, #0
 800181c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800181e:	2300      	movs	r3, #0
 8001820:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001822:	2300      	movs	r3, #0
 8001824:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800182e:	f107 0208 	add.w	r2, r7, #8
 8001832:	f107 0310 	add.w	r3, r7, #16
 8001836:	4619      	mov	r1, r3
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f003 fbe1 	bl	8005000 <HAL_QSPI_MemoryMapped>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <BSP_QSPI_EnableMemoryMappedMode+0x5a>
  {
    return QSPI_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e000      	b.n	800184a <BSP_QSPI_EnableMemoryMappedMode+0x5c>
  }

  return QSPI_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3748      	adds	r7, #72	@ 0x48
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b084      	sub	sp, #16
 8001856:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001858:	463b      	mov	r3, r7
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001864:	f000 fff6 	bl	8002854 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001868:	2301      	movs	r3, #1
 800186a:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800186c:	2300      	movs	r3, #0
 800186e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20000000;
 8001870:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001874:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8001876:	2312      	movs	r3, #18
 8001878:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800187a:	2300      	movs	r3, #0
 800187c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800187e:	2300      	movs	r3, #0
 8001880:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001882:	2303      	movs	r3, #3
 8001884:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001886:	2301      	movs	r3, #1
 8001888:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800188e:	2301      	movs	r3, #1
 8001890:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001892:	2301      	movs	r3, #1
 8001894:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001896:	463b      	mov	r3, r7
 8001898:	4618      	mov	r0, r3
 800189a:	f001 f813 	bl	80028c4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800189e:	2301      	movs	r3, #1
 80018a0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 80018a2:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 80018a6:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 80018a8:	231c      	movs	r3, #28
 80018aa:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80018ac:	2300      	movs	r3, #0
 80018ae:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80018b0:	2300      	movs	r3, #0
 80018b2:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80018b4:	2300      	movs	r3, #0
 80018b6:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80018b8:	463b      	mov	r3, r7
 80018ba:	4618      	mov	r0, r3
 80018bc:	f001 f802 	bl	80028c4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80018c0:	2302      	movs	r3, #2
 80018c2:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 80018c4:	2319      	movs	r3, #25
 80018c6:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80018c8:	2303      	movs	r3, #3
 80018ca:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80018cc:	2301      	movs	r3, #1
 80018ce:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80018d0:	2301      	movs	r3, #1
 80018d2:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80018d4:	463b      	mov	r3, r7
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 fff4 	bl	80028c4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80018dc:	2303      	movs	r3, #3
 80018de:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xC0000000;
 80018e0:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80018e4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 80018e6:	231c      	movs	r3, #28
 80018e8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80018ea:	2300      	movs	r3, #0
 80018ec:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80018f6:	463b      	mov	r3, r7
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 ffe3 	bl	80028c4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80018fe:	2304      	movs	r3, #4
 8001900:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8001902:	2317      	movs	r3, #23
 8001904:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001906:	2303      	movs	r3, #3
 8001908:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800190a:	2301      	movs	r3, #1
 800190c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800190e:	2301      	movs	r3, #1
 8001910:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001912:	463b      	mov	r3, r7
 8001914:	4618      	mov	r0, r3
 8001916:	f000 ffd5 	bl	80028c4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800191a:	2004      	movs	r0, #4
 800191c:	f000 ffb2 	bl	8002884 <HAL_MPU_Enable>

}
 8001920:	bf00      	nop
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a04      	ldr	r2, [pc, #16]	@ (8001948 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d101      	bne.n	800193e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800193a:	f000 fe65 	bl	8002608 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40001000 	.word	0x40001000

0800194c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001950:	b672      	cpsid	i
}
 8001952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001954:	bf00      	nop
 8001956:	e7fd      	b.n	8001954 <Error_Handler+0x8>

08001958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800195e:	4b0f      	ldr	r3, [pc, #60]	@ (800199c <HAL_MspInit+0x44>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001962:	4a0e      	ldr	r2, [pc, #56]	@ (800199c <HAL_MspInit+0x44>)
 8001964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001968:	6413      	str	r3, [r2, #64]	@ 0x40
 800196a:	4b0c      	ldr	r3, [pc, #48]	@ (800199c <HAL_MspInit+0x44>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001976:	4b09      	ldr	r3, [pc, #36]	@ (800199c <HAL_MspInit+0x44>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197a:	4a08      	ldr	r2, [pc, #32]	@ (800199c <HAL_MspInit+0x44>)
 800197c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001980:	6453      	str	r3, [r2, #68]	@ 0x44
 8001982:	4b06      	ldr	r3, [pc, #24]	@ (800199c <HAL_MspInit+0x44>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001986:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800198a:	603b      	str	r3, [r7, #0]
 800198c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800

080019a0 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a0a      	ldr	r2, [pc, #40]	@ (80019d8 <HAL_CRC_MspInit+0x38>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d10b      	bne.n	80019ca <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80019b2:	4b0a      	ldr	r3, [pc, #40]	@ (80019dc <HAL_CRC_MspInit+0x3c>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b6:	4a09      	ldr	r2, [pc, #36]	@ (80019dc <HAL_CRC_MspInit+0x3c>)
 80019b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019be:	4b07      	ldr	r3, [pc, #28]	@ (80019dc <HAL_CRC_MspInit+0x3c>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80019ca:	bf00      	nop
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40023000 	.word	0x40023000
 80019dc:	40023800 	.word	0x40023800

080019e0 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001a24 <HAL_DMA2D_MspInit+0x44>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d113      	bne.n	8001a1a <HAL_DMA2D_MspInit+0x3a>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80019f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001a28 <HAL_DMA2D_MspInit+0x48>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001a28 <HAL_DMA2D_MspInit+0x48>)
 80019f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80019fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001a28 <HAL_DMA2D_MspInit+0x48>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	205a      	movs	r0, #90	@ 0x5a
 8001a10:	f000 fef6 	bl	8002800 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001a14:	205a      	movs	r0, #90	@ 0x5a
 8001a16:	f000 ff0f 	bl	8002838 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001a1a:	bf00      	nop
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	4002b000 	.word	0x4002b000
 8001a28:	40023800 	.word	0x40023800

08001a2c <HAL_DSI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdsi: DSI handle pointer
  * @retval None
  */
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	@ 0x28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a1b      	ldr	r2, [pc, #108]	@ (8001ab8 <HAL_DSI_MspInit+0x8c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d12f      	bne.n	8001aae <HAL_DSI_MspInit+0x82>
  {
    /* USER CODE BEGIN DSI_MspInit 0 */

    /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001abc <HAL_DSI_MspInit+0x90>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a52:	4a1a      	ldr	r2, [pc, #104]	@ (8001abc <HAL_DSI_MspInit+0x90>)
 8001a54:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001a58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a5a:	4b18      	ldr	r3, [pc, #96]	@ (8001abc <HAL_DSI_MspInit+0x90>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001a66:	4b15      	ldr	r3, [pc, #84]	@ (8001abc <HAL_DSI_MspInit+0x90>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	4a14      	ldr	r2, [pc, #80]	@ (8001abc <HAL_DSI_MspInit+0x90>)
 8001a6c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a72:	4b12      	ldr	r3, [pc, #72]	@ (8001abc <HAL_DSI_MspInit+0x90>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a7e:	2304      	movs	r3, #4
 8001a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001a8e:	230d      	movs	r3, #13
 8001a90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	4619      	mov	r1, r3
 8001a98:	4809      	ldr	r0, [pc, #36]	@ (8001ac0 <HAL_DSI_MspInit+0x94>)
 8001a9a:	f002 f997 	bl	8003dcc <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	2062      	movs	r0, #98	@ 0x62
 8001aa4:	f000 feac 	bl	8002800 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001aa8:	2062      	movs	r0, #98	@ 0x62
 8001aaa:	f000 fec5 	bl	8002838 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DSI_MspInit 1 */

  }

}
 8001aae:	bf00      	nop
 8001ab0:	3728      	adds	r7, #40	@ 0x28
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40016c00 	.word	0x40016c00
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40022400 	.word	0x40022400

08001ac4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b0ae      	sub	sp, #184	@ 0xb8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	2290      	movs	r2, #144	@ 0x90
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f005 fa0a 	bl	8006efe <memset>
  if(hi2c->Instance==I2C4)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a37      	ldr	r2, [pc, #220]	@ (8001bcc <HAL_I2C_MspInit+0x108>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d166      	bne.n	8001bc2 <HAL_I2C_MspInit+0xfe>

    /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001af4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001af8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001afa:	2300      	movs	r3, #0
 8001afc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	4618      	mov	r0, r3
 8001b06:	f004 f96b 	bl	8005de0 <HAL_RCCEx_PeriphCLKConfig>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001b10:	f7ff ff1c 	bl	800194c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b14:	4b2e      	ldr	r3, [pc, #184]	@ (8001bd0 <HAL_I2C_MspInit+0x10c>)
 8001b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b18:	4a2d      	ldr	r2, [pc, #180]	@ (8001bd0 <HAL_I2C_MspInit+0x10c>)
 8001b1a:	f043 0302 	orr.w	r3, r3, #2
 8001b1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b20:	4b2b      	ldr	r3, [pc, #172]	@ (8001bd0 <HAL_I2C_MspInit+0x10c>)
 8001b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b2c:	4b28      	ldr	r3, [pc, #160]	@ (8001bd0 <HAL_I2C_MspInit+0x10c>)
 8001b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b30:	4a27      	ldr	r2, [pc, #156]	@ (8001bd0 <HAL_I2C_MspInit+0x10c>)
 8001b32:	f043 0308 	orr.w	r3, r3, #8
 8001b36:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b38:	4b25      	ldr	r3, [pc, #148]	@ (8001bd0 <HAL_I2C_MspInit+0x10c>)
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3c:	f003 0308 	and.w	r3, r3, #8
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB7     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b44:	2380      	movs	r3, #128	@ 0x80
 8001b46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b4a:	2312      	movs	r3, #18
 8001b4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b50:	2301      	movs	r3, #1
 8001b52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b56:	2303      	movs	r3, #3
 8001b58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8001b5c:	230b      	movs	r3, #11
 8001b5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b62:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b66:	4619      	mov	r1, r3
 8001b68:	481a      	ldr	r0, [pc, #104]	@ (8001bd4 <HAL_I2C_MspInit+0x110>)
 8001b6a:	f002 f92f 	bl	8003dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b76:	2312      	movs	r3, #18
 8001b78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b82:	2303      	movs	r3, #3
 8001b84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001b88:	2304      	movs	r3, #4
 8001b8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b8e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b92:	4619      	mov	r1, r3
 8001b94:	4810      	ldr	r0, [pc, #64]	@ (8001bd8 <HAL_I2C_MspInit+0x114>)
 8001b96:	f002 f919 	bl	8003dcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd0 <HAL_I2C_MspInit+0x10c>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9e:	4a0c      	ldr	r2, [pc, #48]	@ (8001bd0 <HAL_I2C_MspInit+0x10c>)
 8001ba0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd0 <HAL_I2C_MspInit+0x10c>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001baa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	205f      	movs	r0, #95	@ 0x5f
 8001bb8:	f000 fe22 	bl	8002800 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8001bbc:	205f      	movs	r0, #95	@ 0x5f
 8001bbe:	f000 fe3b 	bl	8002838 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C4_MspInit 1 */

  }

}
 8001bc2:	bf00      	nop
 8001bc4:	37b8      	adds	r7, #184	@ 0xb8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40006000 	.word	0x40006000
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40020400 	.word	0x40020400
 8001bd8:	40020c00 	.word	0x40020c00

08001bdc <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b0a8      	sub	sp, #160	@ 0xa0
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001be4:	f107 0310 	add.w	r3, r7, #16
 8001be8:	2290      	movs	r2, #144	@ 0x90
 8001bea:	2100      	movs	r1, #0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f005 f986 	bl	8006efe <memset>
  if(hltdc->Instance==LTDC)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a1a      	ldr	r2, [pc, #104]	@ (8001c60 <HAL_LTDC_MspInit+0x84>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d12c      	bne.n	8001c56 <HAL_LTDC_MspInit+0x7a>

    /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001bfc:	2308      	movs	r3, #8
 8001bfe:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001c00:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001c04:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001c06:	2304      	movs	r3, #4
 8001c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001c12:	2301      	movs	r3, #1
 8001c14:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001c16:	2300      	movs	r3, #0
 8001c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c1a:	f107 0310 	add.w	r3, r7, #16
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f004 f8de 	bl	8005de0 <HAL_RCCEx_PeriphCLKConfig>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_LTDC_MspInit+0x52>
    {
      Error_Handler();
 8001c2a:	f7ff fe8f 	bl	800194c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c64 <HAL_LTDC_MspInit+0x88>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c32:	4a0c      	ldr	r2, [pc, #48]	@ (8001c64 <HAL_LTDC_MspInit+0x88>)
 8001c34:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001c38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c64 <HAL_LTDC_MspInit+0x88>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8001c46:	2200      	movs	r2, #0
 8001c48:	2103      	movs	r1, #3
 8001c4a:	2058      	movs	r0, #88	@ 0x58
 8001c4c:	f000 fdd8 	bl	8002800 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001c50:	2058      	movs	r0, #88	@ 0x58
 8001c52:	f000 fdf1 	bl	8002838 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001c56:	bf00      	nop
 8001c58:	37a0      	adds	r7, #160	@ 0xa0
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40016800 	.word	0x40016800
 8001c64:	40023800 	.word	0x40023800

08001c68 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08c      	sub	sp, #48	@ 0x30
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 031c 	add.w	r3, r7, #28
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a4a      	ldr	r2, [pc, #296]	@ (8001db0 <HAL_QSPI_MspInit+0x148>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	f040 808e 	bne.w	8001da8 <HAL_QSPI_MspInit+0x140>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001c8c:	4b49      	ldr	r3, [pc, #292]	@ (8001db4 <HAL_QSPI_MspInit+0x14c>)
 8001c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c90:	4a48      	ldr	r2, [pc, #288]	@ (8001db4 <HAL_QSPI_MspInit+0x14c>)
 8001c92:	f043 0302 	orr.w	r3, r3, #2
 8001c96:	6393      	str	r3, [r2, #56]	@ 0x38
 8001c98:	4b46      	ldr	r3, [pc, #280]	@ (8001db4 <HAL_QSPI_MspInit+0x14c>)
 8001c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	61bb      	str	r3, [r7, #24]
 8001ca2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ca4:	4b43      	ldr	r3, [pc, #268]	@ (8001db4 <HAL_QSPI_MspInit+0x14c>)
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca8:	4a42      	ldr	r2, [pc, #264]	@ (8001db4 <HAL_QSPI_MspInit+0x14c>)
 8001caa:	f043 0310 	orr.w	r3, r3, #16
 8001cae:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb0:	4b40      	ldr	r3, [pc, #256]	@ (8001db4 <HAL_QSPI_MspInit+0x14c>)
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb4:	f003 0310 	and.w	r3, r3, #16
 8001cb8:	617b      	str	r3, [r7, #20]
 8001cba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cbc:	4b3d      	ldr	r3, [pc, #244]	@ (8001db4 <HAL_QSPI_MspInit+0x14c>)
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc0:	4a3c      	ldr	r2, [pc, #240]	@ (8001db4 <HAL_QSPI_MspInit+0x14c>)
 8001cc2:	f043 0302 	orr.w	r3, r3, #2
 8001cc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc8:	4b3a      	ldr	r3, [pc, #232]	@ (8001db4 <HAL_QSPI_MspInit+0x14c>)
 8001cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cd4:	4b37      	ldr	r3, [pc, #220]	@ (8001db4 <HAL_QSPI_MspInit+0x14c>)
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd8:	4a36      	ldr	r2, [pc, #216]	@ (8001db4 <HAL_QSPI_MspInit+0x14c>)
 8001cda:	f043 0304 	orr.w	r3, r3, #4
 8001cde:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ce0:	4b34      	ldr	r3, [pc, #208]	@ (8001db4 <HAL_QSPI_MspInit+0x14c>)
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cec:	4b31      	ldr	r3, [pc, #196]	@ (8001db4 <HAL_QSPI_MspInit+0x14c>)
 8001cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf0:	4a30      	ldr	r2, [pc, #192]	@ (8001db4 <HAL_QSPI_MspInit+0x14c>)
 8001cf2:	f043 0308 	orr.w	r3, r3, #8
 8001cf6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf8:	4b2e      	ldr	r3, [pc, #184]	@ (8001db4 <HAL_QSPI_MspInit+0x14c>)
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	60bb      	str	r3, [r7, #8]
 8001d02:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> QUADSPI_BK1_IO1
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d04:	2304      	movs	r3, #4
 8001d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d10:	2303      	movs	r3, #3
 8001d12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001d14:	2309      	movs	r3, #9
 8001d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d18:	f107 031c 	add.w	r3, r7, #28
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4826      	ldr	r0, [pc, #152]	@ (8001db8 <HAL_QSPI_MspInit+0x150>)
 8001d20:	f002 f854 	bl	8003dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d24:	2340      	movs	r3, #64	@ 0x40
 8001d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d30:	2303      	movs	r3, #3
 8001d32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001d34:	230a      	movs	r3, #10
 8001d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d38:	f107 031c 	add.w	r3, r7, #28
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	481f      	ldr	r0, [pc, #124]	@ (8001dbc <HAL_QSPI_MspInit+0x154>)
 8001d40:	f002 f844 	bl	8003dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001d44:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d52:	2303      	movs	r3, #3
 8001d54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001d56:	2309      	movs	r3, #9
 8001d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d5a:	f107 031c 	add.w	r3, r7, #28
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4817      	ldr	r0, [pc, #92]	@ (8001dc0 <HAL_QSPI_MspInit+0x158>)
 8001d62:	f002 f833 	bl	8003dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d66:	2304      	movs	r3, #4
 8001d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d72:	2303      	movs	r3, #3
 8001d74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001d76:	2309      	movs	r3, #9
 8001d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7a:	f107 031c 	add.w	r3, r7, #28
 8001d7e:	4619      	mov	r1, r3
 8001d80:	480e      	ldr	r0, [pc, #56]	@ (8001dbc <HAL_QSPI_MspInit+0x154>)
 8001d82:	f002 f823 	bl	8003dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d94:	2303      	movs	r3, #3
 8001d96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001d98:	2309      	movs	r3, #9
 8001d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d9c:	f107 031c 	add.w	r3, r7, #28
 8001da0:	4619      	mov	r1, r3
 8001da2:	4808      	ldr	r0, [pc, #32]	@ (8001dc4 <HAL_QSPI_MspInit+0x15c>)
 8001da4:	f002 f812 	bl	8003dcc <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001da8:	bf00      	nop
 8001daa:	3730      	adds	r7, #48	@ 0x30
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	a0001000 	.word	0xa0001000
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40020400 	.word	0x40020400
 8001dc0:	40020800 	.word	0x40020800
 8001dc4:	40020c00 	.word	0x40020c00

08001dc8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001ddc:	4b3b      	ldr	r3, [pc, #236]	@ (8001ecc <HAL_FMC_MspInit+0x104>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d16f      	bne.n	8001ec4 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001de4:	4b39      	ldr	r3, [pc, #228]	@ (8001ecc <HAL_FMC_MspInit+0x104>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001dea:	4b39      	ldr	r3, [pc, #228]	@ (8001ed0 <HAL_FMC_MspInit+0x108>)
 8001dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dee:	4a38      	ldr	r2, [pc, #224]	@ (8001ed0 <HAL_FMC_MspInit+0x108>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	6393      	str	r3, [r2, #56]	@ 0x38
 8001df6:	4b36      	ldr	r3, [pc, #216]	@ (8001ed0 <HAL_FMC_MspInit+0x108>)
 8001df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	603b      	str	r3, [r7, #0]
 8001e00:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8001e02:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001e06:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e10:	2303      	movs	r3, #3
 8001e12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e14:	230c      	movs	r3, #12
 8001e16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e18:	1d3b      	adds	r3, r7, #4
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	482d      	ldr	r0, [pc, #180]	@ (8001ed4 <HAL_FMC_MspInit+0x10c>)
 8001e1e:	f001 ffd5 	bl	8003dcc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8001e22:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001e26:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e30:	2303      	movs	r3, #3
 8001e32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e34:	230c      	movs	r3, #12
 8001e36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e38:	1d3b      	adds	r3, r7, #4
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4826      	ldr	r0, [pc, #152]	@ (8001ed8 <HAL_FMC_MspInit+0x110>)
 8001e3e:	f001 ffc5 	bl	8003dcc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8001e42:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001e46:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e50:	2303      	movs	r3, #3
 8001e52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e54:	230c      	movs	r3, #12
 8001e56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e58:	1d3b      	adds	r3, r7, #4
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	481f      	ldr	r0, [pc, #124]	@ (8001edc <HAL_FMC_MspInit+0x114>)
 8001e5e:	f001 ffb5 	bl	8003dcc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 8001e62:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8001e66:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e70:	2303      	movs	r3, #3
 8001e72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e74:	230c      	movs	r3, #12
 8001e76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e78:	1d3b      	adds	r3, r7, #4
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4818      	ldr	r0, [pc, #96]	@ (8001ee0 <HAL_FMC_MspInit+0x118>)
 8001e7e:	f001 ffa5 	bl	8003dcc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e82:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001e86:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e90:	2303      	movs	r3, #3
 8001e92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e94:	230c      	movs	r3, #12
 8001e96:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e98:	1d3b      	adds	r3, r7, #4
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4811      	ldr	r0, [pc, #68]	@ (8001ee4 <HAL_FMC_MspInit+0x11c>)
 8001e9e:	f001 ff95 	bl	8003dcc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5
 8001ea2:	f64f 732c 	movw	r3, #65324	@ 0xff2c
 8001ea6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_9
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001eb4:	230c      	movs	r3, #12
 8001eb6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001eb8:	1d3b      	adds	r3, r7, #4
 8001eba:	4619      	mov	r1, r3
 8001ebc:	480a      	ldr	r0, [pc, #40]	@ (8001ee8 <HAL_FMC_MspInit+0x120>)
 8001ebe:	f001 ff85 	bl	8003dcc <HAL_GPIO_Init>
 8001ec2:	e000      	b.n	8001ec6 <HAL_FMC_MspInit+0xfe>
    return;
 8001ec4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	2000023c 	.word	0x2000023c
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	40021800 	.word	0x40021800
 8001edc:	40020c00 	.word	0x40020c00
 8001ee0:	40022000 	.word	0x40022000
 8001ee4:	40021400 	.word	0x40021400
 8001ee8:	40021c00 	.word	0x40021c00

08001eec <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001ef4:	f7ff ff68 	bl	8001dc8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001ef8:	bf00      	nop
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08e      	sub	sp, #56	@ 0x38
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f10:	4b33      	ldr	r3, [pc, #204]	@ (8001fe0 <HAL_InitTick+0xe0>)
 8001f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f14:	4a32      	ldr	r2, [pc, #200]	@ (8001fe0 <HAL_InitTick+0xe0>)
 8001f16:	f043 0310 	orr.w	r3, r3, #16
 8001f1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f1c:	4b30      	ldr	r3, [pc, #192]	@ (8001fe0 <HAL_InitTick+0xe0>)
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f20:	f003 0310 	and.w	r3, r3, #16
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f28:	f107 0210 	add.w	r2, r7, #16
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	4611      	mov	r1, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f003 ff22 	bl	8005d7c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d103      	bne.n	8001f4a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001f42:	f003 ff07 	bl	8005d54 <HAL_RCC_GetPCLK1Freq>
 8001f46:	6378      	str	r0, [r7, #52]	@ 0x34
 8001f48:	e004      	b.n	8001f54 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001f4a:	f003 ff03 	bl	8005d54 <HAL_RCC_GetPCLK1Freq>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f56:	4a23      	ldr	r2, [pc, #140]	@ (8001fe4 <HAL_InitTick+0xe4>)
 8001f58:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5c:	0c9b      	lsrs	r3, r3, #18
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001f62:	4b21      	ldr	r3, [pc, #132]	@ (8001fe8 <HAL_InitTick+0xe8>)
 8001f64:	4a21      	ldr	r2, [pc, #132]	@ (8001fec <HAL_InitTick+0xec>)
 8001f66:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001f68:	4b1f      	ldr	r3, [pc, #124]	@ (8001fe8 <HAL_InitTick+0xe8>)
 8001f6a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f6e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001f70:	4a1d      	ldr	r2, [pc, #116]	@ (8001fe8 <HAL_InitTick+0xe8>)
 8001f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f74:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001f76:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe8 <HAL_InitTick+0xe8>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe8 <HAL_InitTick+0xe8>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f82:	4b19      	ldr	r3, [pc, #100]	@ (8001fe8 <HAL_InitTick+0xe8>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001f88:	4817      	ldr	r0, [pc, #92]	@ (8001fe8 <HAL_InitTick+0xe8>)
 8001f8a:	f004 fbe2 	bl	8006752 <HAL_TIM_Base_Init>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001f94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d11b      	bne.n	8001fd4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001f9c:	4812      	ldr	r0, [pc, #72]	@ (8001fe8 <HAL_InitTick+0xe8>)
 8001f9e:	f004 fc39 	bl	8006814 <HAL_TIM_Base_Start_IT>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001fa8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d111      	bne.n	8001fd4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fb0:	2036      	movs	r0, #54	@ 0x36
 8001fb2:	f000 fc41 	bl	8002838 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b0f      	cmp	r3, #15
 8001fba:	d808      	bhi.n	8001fce <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	2036      	movs	r0, #54	@ 0x36
 8001fc2:	f000 fc1d 	bl	8002800 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff0 <HAL_InitTick+0xf0>)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6013      	str	r3, [r2, #0]
 8001fcc:	e002      	b.n	8001fd4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001fd4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3738      	adds	r7, #56	@ 0x38
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	431bde83 	.word	0x431bde83
 8001fe8:	20000240 	.word	0x20000240
 8001fec:	40001000 	.word	0x40001000
 8001ff0:	20000004 	.word	0x20000004

08001ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <NMI_Handler+0x4>

08001ffc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <HardFault_Handler+0x4>

08002004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002008:	bf00      	nop
 800200a:	e7fd      	b.n	8002008 <MemManage_Handler+0x4>

0800200c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002010:	bf00      	nop
 8002012:	e7fd      	b.n	8002010 <BusFault_Handler+0x4>

08002014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002018:	bf00      	nop
 800201a:	e7fd      	b.n	8002018 <UsageFault_Handler+0x4>

0800201c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800202a:	b480      	push	{r7}
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 8002058:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800205c:	f002 f87c 	bl	8004158 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002060:	bf00      	nop
 8002062:	bd80      	pop	{r7, pc}

08002064 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002068:	4802      	ldr	r0, [pc, #8]	@ (8002074 <TIM6_DAC_IRQHandler+0x10>)
 800206a:	f004 fc4b 	bl	8006904 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000240 	.word	0x20000240

08002078 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800207c:	4802      	ldr	r0, [pc, #8]	@ (8002088 <LTDC_IRQHandler+0x10>)
 800207e:	f002 fa79 	bl	8004574 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000114 	.word	0x20000114

0800208c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002090:	4802      	ldr	r0, [pc, #8]	@ (800209c <DMA2D_IRQHandler+0x10>)
 8002092:	f000 fda3 	bl	8002bdc <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	2000004c 	.word	0x2000004c

080020a0 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 80020a4:	4802      	ldr	r0, [pc, #8]	@ (80020b0 <I2C4_EV_IRQHandler+0x10>)
 80020a6:	f002 f917 	bl	80042d8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	200000c0 	.word	0x200000c0

080020b4 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 80020b8:	4802      	ldr	r0, [pc, #8]	@ (80020c4 <DSI_IRQHandler+0x10>)
 80020ba:	f001 f9c1 	bl	8003440 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200000a4 	.word	0x200000a4

080020c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020cc:	4b06      	ldr	r3, [pc, #24]	@ (80020e8 <SystemInit+0x20>)
 80020ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d2:	4a05      	ldr	r2, [pc, #20]	@ (80020e8 <SystemInit+0x20>)
 80020d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002124 <LoopFillZerobss+0xe>
 
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020f0:	f7ff ffea 	bl	80020c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020f4:	480c      	ldr	r0, [pc, #48]	@ (8002128 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020f6:	490d      	ldr	r1, [pc, #52]	@ (800212c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002130 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020fc:	e002      	b.n	8002104 <LoopCopyDataInit>

080020fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002102:	3304      	adds	r3, #4

08002104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002108:	d3f9      	bcc.n	80020fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800210a:	4a0a      	ldr	r2, [pc, #40]	@ (8002134 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800210c:	4c0a      	ldr	r4, [pc, #40]	@ (8002138 <LoopFillZerobss+0x22>)
  movs r3, #0
 800210e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002110:	e001      	b.n	8002116 <LoopFillZerobss>

08002112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002114:	3204      	adds	r2, #4

08002116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002118:	d3fb      	bcc.n	8002112 <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 800211a:	f004 fef9 	bl	8006f10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800211e:	f7fe fa8b 	bl	8000638 <main>
  bx  lr    
 8002122:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002124:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800212c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002130:	080071a8 	.word	0x080071a8
  ldr r2, =_sbss
 8002134:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002138:	20000290 	.word	0x20000290

0800213c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800213c:	e7fe      	b.n	800213c <ADC_IRQHandler>
	...

08002140 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800214a:	49bd      	ldr	r1, [pc, #756]	@ (8002440 <OTM8009A_Init+0x300>)
 800214c:	2000      	movs	r0, #0
 800214e:	f7fe ff21 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8002152:	49bc      	ldr	r1, [pc, #752]	@ (8002444 <OTM8009A_Init+0x304>)
 8002154:	2003      	movs	r0, #3
 8002156:	f7fe ff1d 	bl	8000f94 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 800215a:	49bb      	ldr	r1, [pc, #748]	@ (8002448 <OTM8009A_Init+0x308>)
 800215c:	2000      	movs	r0, #0
 800215e:	f7fe ff19 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8002162:	49ba      	ldr	r1, [pc, #744]	@ (800244c <OTM8009A_Init+0x30c>)
 8002164:	2002      	movs	r0, #2
 8002166:	f7fe ff15 	bl	8000f94 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800216a:	49b7      	ldr	r1, [pc, #732]	@ (8002448 <OTM8009A_Init+0x308>)
 800216c:	2000      	movs	r0, #0
 800216e:	f7fe ff11 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8002172:	49b7      	ldr	r1, [pc, #732]	@ (8002450 <OTM8009A_Init+0x310>)
 8002174:	2000      	movs	r0, #0
 8002176:	f7fe ff0d 	bl	8000f94 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 800217a:	200a      	movs	r0, #10
 800217c:	f7fe fefe 	bl	8000f7c <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8002180:	49b4      	ldr	r1, [pc, #720]	@ (8002454 <OTM8009A_Init+0x314>)
 8002182:	2000      	movs	r0, #0
 8002184:	f7fe ff06 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8002188:	49b3      	ldr	r1, [pc, #716]	@ (8002458 <OTM8009A_Init+0x318>)
 800218a:	2000      	movs	r0, #0
 800218c:	f7fe ff02 	bl	8000f94 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8002190:	200a      	movs	r0, #10
 8002192:	f7fe fef3 	bl	8000f7c <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8002196:	49b1      	ldr	r1, [pc, #708]	@ (800245c <OTM8009A_Init+0x31c>)
 8002198:	2000      	movs	r0, #0
 800219a:	f7fe fefb 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 800219e:	49b0      	ldr	r1, [pc, #704]	@ (8002460 <OTM8009A_Init+0x320>)
 80021a0:	2000      	movs	r0, #0
 80021a2:	f7fe fef7 	bl	8000f94 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 80021a6:	49af      	ldr	r1, [pc, #700]	@ (8002464 <OTM8009A_Init+0x324>)
 80021a8:	2000      	movs	r0, #0
 80021aa:	f7fe fef3 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80021ae:	49ae      	ldr	r1, [pc, #696]	@ (8002468 <OTM8009A_Init+0x328>)
 80021b0:	2000      	movs	r0, #0
 80021b2:	f7fe feef 	bl	8000f94 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 80021b6:	49ad      	ldr	r1, [pc, #692]	@ (800246c <OTM8009A_Init+0x32c>)
 80021b8:	2000      	movs	r0, #0
 80021ba:	f7fe feeb 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 80021be:	49ac      	ldr	r1, [pc, #688]	@ (8002470 <OTM8009A_Init+0x330>)
 80021c0:	2000      	movs	r0, #0
 80021c2:	f7fe fee7 	bl	8000f94 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80021c6:	499e      	ldr	r1, [pc, #632]	@ (8002440 <OTM8009A_Init+0x300>)
 80021c8:	2000      	movs	r0, #0
 80021ca:	f7fe fee3 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 80021ce:	49a9      	ldr	r1, [pc, #676]	@ (8002474 <OTM8009A_Init+0x334>)
 80021d0:	2000      	movs	r0, #0
 80021d2:	f7fe fedf 	bl	8000f94 <DSI_IO_WriteCmd>
  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  //DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
  //DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80021d6:	49a8      	ldr	r1, [pc, #672]	@ (8002478 <OTM8009A_Init+0x338>)
 80021d8:	2000      	movs	r0, #0
 80021da:	f7fe fedb 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 80021de:	49a7      	ldr	r1, [pc, #668]	@ (800247c <OTM8009A_Init+0x33c>)
 80021e0:	2000      	movs	r0, #0
 80021e2:	f7fe fed7 	bl	8000f94 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 80021e6:	49a6      	ldr	r1, [pc, #664]	@ (8002480 <OTM8009A_Init+0x340>)
 80021e8:	2000      	movs	r0, #0
 80021ea:	f7fe fed3 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 80021ee:	49a5      	ldr	r1, [pc, #660]	@ (8002484 <OTM8009A_Init+0x344>)
 80021f0:	2000      	movs	r0, #0
 80021f2:	f7fe fecf 	bl	8000f94 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 80021f6:	49a4      	ldr	r1, [pc, #656]	@ (8002488 <OTM8009A_Init+0x348>)
 80021f8:	2000      	movs	r0, #0
 80021fa:	f7fe fecb 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80021fe:	499a      	ldr	r1, [pc, #616]	@ (8002468 <OTM8009A_Init+0x328>)
 8002200:	2000      	movs	r0, #0
 8002202:	f7fe fec7 	bl	8000f94 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002206:	498e      	ldr	r1, [pc, #568]	@ (8002440 <OTM8009A_Init+0x300>)
 8002208:	2000      	movs	r0, #0
 800220a:	f7fe fec3 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 800220e:	499f      	ldr	r1, [pc, #636]	@ (800248c <OTM8009A_Init+0x34c>)
 8002210:	2002      	movs	r0, #2
 8002212:	f7fe febf 	bl	8000f94 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8002216:	499e      	ldr	r1, [pc, #632]	@ (8002490 <OTM8009A_Init+0x350>)
 8002218:	2000      	movs	r0, #0
 800221a:	f7fe febb 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 800221e:	499d      	ldr	r1, [pc, #628]	@ (8002494 <OTM8009A_Init+0x354>)
 8002220:	2000      	movs	r0, #0
 8002222:	f7fe feb7 	bl	8000f94 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8002226:	499c      	ldr	r1, [pc, #624]	@ (8002498 <OTM8009A_Init+0x358>)
 8002228:	2000      	movs	r0, #0
 800222a:	f7fe feb3 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 800222e:	499b      	ldr	r1, [pc, #620]	@ (800249c <OTM8009A_Init+0x35c>)
 8002230:	2000      	movs	r0, #0
 8002232:	f7fe feaf 	bl	8000f94 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8002236:	499a      	ldr	r1, [pc, #616]	@ (80024a0 <OTM8009A_Init+0x360>)
 8002238:	2000      	movs	r0, #0
 800223a:	f7fe feab 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 800223e:	4999      	ldr	r1, [pc, #612]	@ (80024a4 <OTM8009A_Init+0x364>)
 8002240:	2000      	movs	r0, #0
 8002242:	f7fe fea7 	bl	8000f94 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8002246:	4998      	ldr	r1, [pc, #608]	@ (80024a8 <OTM8009A_Init+0x368>)
 8002248:	2000      	movs	r0, #0
 800224a:	f7fe fea3 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 800224e:	4997      	ldr	r1, [pc, #604]	@ (80024ac <OTM8009A_Init+0x36c>)
 8002250:	2000      	movs	r0, #0
 8002252:	f7fe fe9f 	bl	8000f94 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8002256:	4988      	ldr	r1, [pc, #544]	@ (8002478 <OTM8009A_Init+0x338>)
 8002258:	2000      	movs	r0, #0
 800225a:	f7fe fe9b 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 800225e:	4994      	ldr	r1, [pc, #592]	@ (80024b0 <OTM8009A_Init+0x370>)
 8002260:	2000      	movs	r0, #0
 8002262:	f7fe fe97 	bl	8000f94 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8002266:	4993      	ldr	r1, [pc, #588]	@ (80024b4 <OTM8009A_Init+0x374>)
 8002268:	2000      	movs	r0, #0
 800226a:	f7fe fe93 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 800226e:	4992      	ldr	r1, [pc, #584]	@ (80024b8 <OTM8009A_Init+0x378>)
 8002270:	2002      	movs	r0, #2
 8002272:	f7fe fe8f 	bl	8000f94 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8002276:	4974      	ldr	r1, [pc, #464]	@ (8002448 <OTM8009A_Init+0x308>)
 8002278:	2000      	movs	r0, #0
 800227a:	f7fe fe8b 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 800227e:	498f      	ldr	r1, [pc, #572]	@ (80024bc <OTM8009A_Init+0x37c>)
 8002280:	2006      	movs	r0, #6
 8002282:	f7fe fe87 	bl	8000f94 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8002286:	498e      	ldr	r1, [pc, #568]	@ (80024c0 <OTM8009A_Init+0x380>)
 8002288:	2000      	movs	r0, #0
 800228a:	f7fe fe83 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 800228e:	498d      	ldr	r1, [pc, #564]	@ (80024c4 <OTM8009A_Init+0x384>)
 8002290:	200e      	movs	r0, #14
 8002292:	f7fe fe7f 	bl	8000f94 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8002296:	498c      	ldr	r1, [pc, #560]	@ (80024c8 <OTM8009A_Init+0x388>)
 8002298:	2000      	movs	r0, #0
 800229a:	f7fe fe7b 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 800229e:	498b      	ldr	r1, [pc, #556]	@ (80024cc <OTM8009A_Init+0x38c>)
 80022a0:	200e      	movs	r0, #14
 80022a2:	f7fe fe77 	bl	8000f94 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80022a6:	498a      	ldr	r1, [pc, #552]	@ (80024d0 <OTM8009A_Init+0x390>)
 80022a8:	2000      	movs	r0, #0
 80022aa:	f7fe fe73 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 80022ae:	4989      	ldr	r1, [pc, #548]	@ (80024d4 <OTM8009A_Init+0x394>)
 80022b0:	200a      	movs	r0, #10
 80022b2:	f7fe fe6f 	bl	8000f94 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80022b6:	4988      	ldr	r1, [pc, #544]	@ (80024d8 <OTM8009A_Init+0x398>)
 80022b8:	2000      	movs	r0, #0
 80022ba:	f7fe fe6b 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 80022be:	4987      	ldr	r1, [pc, #540]	@ (80024dc <OTM8009A_Init+0x39c>)
 80022c0:	2000      	movs	r0, #0
 80022c2:	f7fe fe67 	bl	8000f94 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80022c6:	4960      	ldr	r1, [pc, #384]	@ (8002448 <OTM8009A_Init+0x308>)
 80022c8:	2000      	movs	r0, #0
 80022ca:	f7fe fe63 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 80022ce:	4984      	ldr	r1, [pc, #528]	@ (80024e0 <OTM8009A_Init+0x3a0>)
 80022d0:	200a      	movs	r0, #10
 80022d2:	f7fe fe5f 	bl	8000f94 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80022d6:	4983      	ldr	r1, [pc, #524]	@ (80024e4 <OTM8009A_Init+0x3a4>)
 80022d8:	2000      	movs	r0, #0
 80022da:	f7fe fe5b 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 80022de:	4982      	ldr	r1, [pc, #520]	@ (80024e8 <OTM8009A_Init+0x3a8>)
 80022e0:	200f      	movs	r0, #15
 80022e2:	f7fe fe57 	bl	8000f94 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80022e6:	4976      	ldr	r1, [pc, #472]	@ (80024c0 <OTM8009A_Init+0x380>)
 80022e8:	2000      	movs	r0, #0
 80022ea:	f7fe fe53 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 80022ee:	497f      	ldr	r1, [pc, #508]	@ (80024ec <OTM8009A_Init+0x3ac>)
 80022f0:	200f      	movs	r0, #15
 80022f2:	f7fe fe4f 	bl	8000f94 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80022f6:	4974      	ldr	r1, [pc, #464]	@ (80024c8 <OTM8009A_Init+0x388>)
 80022f8:	2000      	movs	r0, #0
 80022fa:	f7fe fe4b 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 80022fe:	497c      	ldr	r1, [pc, #496]	@ (80024f0 <OTM8009A_Init+0x3b0>)
 8002300:	200a      	movs	r0, #10
 8002302:	f7fe fe47 	bl	8000f94 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8002306:	4972      	ldr	r1, [pc, #456]	@ (80024d0 <OTM8009A_Init+0x390>)
 8002308:	2000      	movs	r0, #0
 800230a:	f7fe fe43 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 800230e:	4979      	ldr	r1, [pc, #484]	@ (80024f4 <OTM8009A_Init+0x3b4>)
 8002310:	200f      	movs	r0, #15
 8002312:	f7fe fe3f 	bl	8000f94 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8002316:	4970      	ldr	r1, [pc, #448]	@ (80024d8 <OTM8009A_Init+0x398>)
 8002318:	2000      	movs	r0, #0
 800231a:	f7fe fe3b 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 800231e:	4976      	ldr	r1, [pc, #472]	@ (80024f8 <OTM8009A_Init+0x3b8>)
 8002320:	200f      	movs	r0, #15
 8002322:	f7fe fe37 	bl	8000f94 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8002326:	4975      	ldr	r1, [pc, #468]	@ (80024fc <OTM8009A_Init+0x3bc>)
 8002328:	2000      	movs	r0, #0
 800232a:	f7fe fe33 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 800232e:	4974      	ldr	r1, [pc, #464]	@ (8002500 <OTM8009A_Init+0x3c0>)
 8002330:	200a      	movs	r0, #10
 8002332:	f7fe fe2f 	bl	8000f94 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8002336:	4973      	ldr	r1, [pc, #460]	@ (8002504 <OTM8009A_Init+0x3c4>)
 8002338:	2000      	movs	r0, #0
 800233a:	f7fe fe2b 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 800233e:	4972      	ldr	r1, [pc, #456]	@ (8002508 <OTM8009A_Init+0x3c8>)
 8002340:	200a      	movs	r0, #10
 8002342:	f7fe fe27 	bl	8000f94 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8002346:	4940      	ldr	r1, [pc, #256]	@ (8002448 <OTM8009A_Init+0x308>)
 8002348:	2000      	movs	r0, #0
 800234a:	f7fe fe23 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 800234e:	496f      	ldr	r1, [pc, #444]	@ (800250c <OTM8009A_Init+0x3cc>)
 8002350:	200a      	movs	r0, #10
 8002352:	f7fe fe1f 	bl	8000f94 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8002356:	4963      	ldr	r1, [pc, #396]	@ (80024e4 <OTM8009A_Init+0x3a4>)
 8002358:	2000      	movs	r0, #0
 800235a:	f7fe fe1b 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 800235e:	496c      	ldr	r1, [pc, #432]	@ (8002510 <OTM8009A_Init+0x3d0>)
 8002360:	200f      	movs	r0, #15
 8002362:	f7fe fe17 	bl	8000f94 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8002366:	4956      	ldr	r1, [pc, #344]	@ (80024c0 <OTM8009A_Init+0x380>)
 8002368:	2000      	movs	r0, #0
 800236a:	f7fe fe13 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 800236e:	4969      	ldr	r1, [pc, #420]	@ (8002514 <OTM8009A_Init+0x3d4>)
 8002370:	200f      	movs	r0, #15
 8002372:	f7fe fe0f 	bl	8000f94 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8002376:	4954      	ldr	r1, [pc, #336]	@ (80024c8 <OTM8009A_Init+0x388>)
 8002378:	2000      	movs	r0, #0
 800237a:	f7fe fe0b 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 800237e:	4966      	ldr	r1, [pc, #408]	@ (8002518 <OTM8009A_Init+0x3d8>)
 8002380:	200a      	movs	r0, #10
 8002382:	f7fe fe07 	bl	8000f94 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8002386:	4952      	ldr	r1, [pc, #328]	@ (80024d0 <OTM8009A_Init+0x390>)
 8002388:	2000      	movs	r0, #0
 800238a:	f7fe fe03 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 800238e:	4963      	ldr	r1, [pc, #396]	@ (800251c <OTM8009A_Init+0x3dc>)
 8002390:	200f      	movs	r0, #15
 8002392:	f7fe fdff 	bl	8000f94 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8002396:	4950      	ldr	r1, [pc, #320]	@ (80024d8 <OTM8009A_Init+0x398>)
 8002398:	2000      	movs	r0, #0
 800239a:	f7fe fdfb 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 800239e:	4960      	ldr	r1, [pc, #384]	@ (8002520 <OTM8009A_Init+0x3e0>)
 80023a0:	200f      	movs	r0, #15
 80023a2:	f7fe fdf7 	bl	8000f94 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80023a6:	4940      	ldr	r1, [pc, #256]	@ (80024a8 <OTM8009A_Init+0x368>)
 80023a8:	2000      	movs	r0, #0
 80023aa:	f7fe fdf3 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 80023ae:	495d      	ldr	r1, [pc, #372]	@ (8002524 <OTM8009A_Init+0x3e4>)
 80023b0:	2000      	movs	r0, #0
 80023b2:	f7fe fdef 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 80023b6:	495c      	ldr	r1, [pc, #368]	@ (8002528 <OTM8009A_Init+0x3e8>)
 80023b8:	2000      	movs	r0, #0
 80023ba:	f7fe fdeb 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 80023be:	495b      	ldr	r1, [pc, #364]	@ (800252c <OTM8009A_Init+0x3ec>)
 80023c0:	2000      	movs	r0, #0
 80023c2:	f7fe fde7 	bl	8000f94 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 22,7kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 80023c6:	495a      	ldr	r1, [pc, #360]	@ (8002530 <OTM8009A_Init+0x3f0>)
 80023c8:	2000      	movs	r0, #0
 80023ca:	f7fe fde3 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 80023ce:	4959      	ldr	r1, [pc, #356]	@ (8002534 <OTM8009A_Init+0x3f4>)
 80023d0:	2000      	movs	r0, #0
 80023d2:	f7fe fddf 	bl	8000f94 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80023d6:	491a      	ldr	r1, [pc, #104]	@ (8002440 <OTM8009A_Init+0x300>)
 80023d8:	2000      	movs	r0, #0
 80023da:	f7fe fddb 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 80023de:	4956      	ldr	r1, [pc, #344]	@ (8002538 <OTM8009A_Init+0x3f8>)
 80023e0:	2003      	movs	r0, #3
 80023e2:	f7fe fdd7 	bl	8000f94 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80023e6:	4916      	ldr	r1, [pc, #88]	@ (8002440 <OTM8009A_Init+0x300>)
 80023e8:	2000      	movs	r0, #0
 80023ea:	f7fe fdd3 	bl	8000f94 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80023ee:	4914      	ldr	r1, [pc, #80]	@ (8002440 <OTM8009A_Init+0x300>)
 80023f0:	2000      	movs	r0, #0
 80023f2:	f7fe fdcf 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 80023f6:	4951      	ldr	r1, [pc, #324]	@ (800253c <OTM8009A_Init+0x3fc>)
 80023f8:	2010      	movs	r0, #16
 80023fa:	f7fe fdcb 	bl	8000f94 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80023fe:	4910      	ldr	r1, [pc, #64]	@ (8002440 <OTM8009A_Init+0x300>)
 8002400:	2000      	movs	r0, #0
 8002402:	f7fe fdc7 	bl	8000f94 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8002406:	494e      	ldr	r1, [pc, #312]	@ (8002540 <OTM8009A_Init+0x400>)
 8002408:	2010      	movs	r0, #16
 800240a:	f7fe fdc3 	bl	8000f94 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 800240e:	494d      	ldr	r1, [pc, #308]	@ (8002544 <OTM8009A_Init+0x404>)
 8002410:	2000      	movs	r0, #0
 8002412:	f7fe fdbf 	bl	8000f94 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8002416:	2078      	movs	r0, #120	@ 0x78
 8002418:	f7fe fdb0 	bl	8000f7c <OTM8009A_IO_Delay>

  switch(ColorCoding)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d008      	beq.n	8002434 <OTM8009A_Init+0x2f4>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b02      	cmp	r3, #2
 8002426:	f040 8093 	bne.w	8002550 <OTM8009A_Init+0x410>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 800242a:	4947      	ldr	r1, [pc, #284]	@ (8002548 <OTM8009A_Init+0x408>)
 800242c:	2000      	movs	r0, #0
 800242e:	f7fe fdb1 	bl	8000f94 <DSI_IO_WriteCmd>
    break;
 8002432:	e08e      	b.n	8002552 <OTM8009A_Init+0x412>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8002434:	4945      	ldr	r1, [pc, #276]	@ (800254c <OTM8009A_Init+0x40c>)
 8002436:	2000      	movs	r0, #0
 8002438:	f7fe fdac 	bl	8000f94 <DSI_IO_WriteCmd>
    break;
 800243c:	e089      	b.n	8002552 <OTM8009A_Init+0x412>
 800243e:	bf00      	nop
 8002440:	080070d0 	.word	0x080070d0
 8002444:	08006f88 	.word	0x08006f88
 8002448:	080070d4 	.word	0x080070d4
 800244c:	08006f8c 	.word	0x08006f8c
 8002450:	080070d8 	.word	0x080070d8
 8002454:	080070dc 	.word	0x080070dc
 8002458:	080070e0 	.word	0x080070e0
 800245c:	080070e4 	.word	0x080070e4
 8002460:	080070e8 	.word	0x080070e8
 8002464:	080070ec 	.word	0x080070ec
 8002468:	080070f0 	.word	0x080070f0
 800246c:	080070f4 	.word	0x080070f4
 8002470:	080070f8 	.word	0x080070f8
 8002474:	080070fc 	.word	0x080070fc
 8002478:	08007104 	.word	0x08007104
 800247c:	08007108 	.word	0x08007108
 8002480:	0800710c 	.word	0x0800710c
 8002484:	08007110 	.word	0x08007110
 8002488:	08007114 	.word	0x08007114
 800248c:	08006fb8 	.word	0x08006fb8
 8002490:	08007118 	.word	0x08007118
 8002494:	0800711c 	.word	0x0800711c
 8002498:	08007120 	.word	0x08007120
 800249c:	08007124 	.word	0x08007124
 80024a0:	08007128 	.word	0x08007128
 80024a4:	0800712c 	.word	0x0800712c
 80024a8:	08007100 	.word	0x08007100
 80024ac:	08007130 	.word	0x08007130
 80024b0:	08007134 	.word	0x08007134
 80024b4:	08007138 	.word	0x08007138
 80024b8:	08006fbc 	.word	0x08006fbc
 80024bc:	08006fc0 	.word	0x08006fc0
 80024c0:	0800713c 	.word	0x0800713c
 80024c4:	08006fc8 	.word	0x08006fc8
 80024c8:	08007140 	.word	0x08007140
 80024cc:	08006fd8 	.word	0x08006fd8
 80024d0:	08007144 	.word	0x08007144
 80024d4:	08006fe8 	.word	0x08006fe8
 80024d8:	08007148 	.word	0x08007148
 80024dc:	08007180 	.word	0x08007180
 80024e0:	08006ff4 	.word	0x08006ff4
 80024e4:	0800714c 	.word	0x0800714c
 80024e8:	08007000 	.word	0x08007000
 80024ec:	08007010 	.word	0x08007010
 80024f0:	08007020 	.word	0x08007020
 80024f4:	0800702c 	.word	0x0800702c
 80024f8:	0800703c 	.word	0x0800703c
 80024fc:	08007150 	.word	0x08007150
 8002500:	0800704c 	.word	0x0800704c
 8002504:	08007154 	.word	0x08007154
 8002508:	08007058 	.word	0x08007058
 800250c:	08007064 	.word	0x08007064
 8002510:	08007070 	.word	0x08007070
 8002514:	08007080 	.word	0x08007080
 8002518:	08007090 	.word	0x08007090
 800251c:	0800709c 	.word	0x0800709c
 8002520:	080070ac 	.word	0x080070ac
 8002524:	08007184 	.word	0x08007184
 8002528:	08007188 	.word	0x08007188
 800252c:	0800718c 	.word	0x0800718c
 8002530:	08007190 	.word	0x08007190
 8002534:	08007194 	.word	0x08007194
 8002538:	080070bc 	.word	0x080070bc
 800253c:	08006f90 	.word	0x08006f90
 8002540:	08006fa4 	.word	0x08006fa4
 8002544:	08007158 	.word	0x08007158
 8002548:	0800715c 	.word	0x0800715c
 800254c:	08007160 	.word	0x08007160
  default :
    break;
 8002550:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d10b      	bne.n	8002570 <OTM8009A_Init+0x430>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8002558:	4916      	ldr	r1, [pc, #88]	@ (80025b4 <OTM8009A_Init+0x474>)
 800255a:	2000      	movs	r0, #0
 800255c:	f7fe fd1a 	bl	8000f94 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8002560:	4915      	ldr	r1, [pc, #84]	@ (80025b8 <OTM8009A_Init+0x478>)
 8002562:	2004      	movs	r0, #4
 8002564:	f7fe fd16 	bl	8000f94 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8002568:	4914      	ldr	r1, [pc, #80]	@ (80025bc <OTM8009A_Init+0x47c>)
 800256a:	2004      	movs	r0, #4
 800256c:	f7fe fd12 	bl	8000f94 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8002570:	4913      	ldr	r1, [pc, #76]	@ (80025c0 <OTM8009A_Init+0x480>)
 8002572:	2000      	movs	r0, #0
 8002574:	f7fe fd0e 	bl	8000f94 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8002578:	4912      	ldr	r1, [pc, #72]	@ (80025c4 <OTM8009A_Init+0x484>)
 800257a:	2000      	movs	r0, #0
 800257c:	f7fe fd0a 	bl	8000f94 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8002580:	4911      	ldr	r1, [pc, #68]	@ (80025c8 <OTM8009A_Init+0x488>)
 8002582:	2000      	movs	r0, #0
 8002584:	f7fe fd06 	bl	8000f94 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8002588:	4910      	ldr	r1, [pc, #64]	@ (80025cc <OTM8009A_Init+0x48c>)
 800258a:	2000      	movs	r0, #0
 800258c:	f7fe fd02 	bl	8000f94 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8002590:	490f      	ldr	r1, [pc, #60]	@ (80025d0 <OTM8009A_Init+0x490>)
 8002592:	2000      	movs	r0, #0
 8002594:	f7fe fcfe 	bl	8000f94 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002598:	490e      	ldr	r1, [pc, #56]	@ (80025d4 <OTM8009A_Init+0x494>)
 800259a:	2000      	movs	r0, #0
 800259c:	f7fe fcfa 	bl	8000f94 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 80025a0:	490d      	ldr	r1, [pc, #52]	@ (80025d8 <OTM8009A_Init+0x498>)
 80025a2:	2000      	movs	r0, #0
 80025a4:	f7fe fcf6 	bl	8000f94 <DSI_IO_WriteCmd>

  return 0;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	08007164 	.word	0x08007164
 80025b8:	080070c0 	.word	0x080070c0
 80025bc:	080070c8 	.word	0x080070c8
 80025c0:	08007168 	.word	0x08007168
 80025c4:	0800716c 	.word	0x0800716c
 80025c8:	08007170 	.word	0x08007170
 80025cc:	08007174 	.word	0x08007174
 80025d0:	08007178 	.word	0x08007178
 80025d4:	080070d0 	.word	0x080070d0
 80025d8:	0800717c 	.word	0x0800717c

080025dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025e0:	4b08      	ldr	r3, [pc, #32]	@ (8002604 <HAL_Init+0x28>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a07      	ldr	r2, [pc, #28]	@ (8002604 <HAL_Init+0x28>)
 80025e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025ec:	2003      	movs	r0, #3
 80025ee:	f000 f8fc 	bl	80027ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025f2:	200f      	movs	r0, #15
 80025f4:	f7ff fc84 	bl	8001f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025f8:	f7ff f9ae 	bl	8001958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40023c00 	.word	0x40023c00

08002608 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800260c:	4b06      	ldr	r3, [pc, #24]	@ (8002628 <HAL_IncTick+0x20>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	461a      	mov	r2, r3
 8002612:	4b06      	ldr	r3, [pc, #24]	@ (800262c <HAL_IncTick+0x24>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4413      	add	r3, r2
 8002618:	4a04      	ldr	r2, [pc, #16]	@ (800262c <HAL_IncTick+0x24>)
 800261a:	6013      	str	r3, [r2, #0]
}
 800261c:	bf00      	nop
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	20000008 	.word	0x20000008
 800262c:	2000028c 	.word	0x2000028c

08002630 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  return uwTick;
 8002634:	4b03      	ldr	r3, [pc, #12]	@ (8002644 <HAL_GetTick+0x14>)
 8002636:	681b      	ldr	r3, [r3, #0]
}
 8002638:	4618      	mov	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	2000028c 	.word	0x2000028c

08002648 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002650:	f7ff ffee 	bl	8002630 <HAL_GetTick>
 8002654:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002660:	d005      	beq.n	800266e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002662:	4b0a      	ldr	r3, [pc, #40]	@ (800268c <HAL_Delay+0x44>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	461a      	mov	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4413      	add	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800266e:	bf00      	nop
 8002670:	f7ff ffde 	bl	8002630 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	429a      	cmp	r2, r3
 800267e:	d8f7      	bhi.n	8002670 <HAL_Delay+0x28>
  {
  }
}
 8002680:	bf00      	nop
 8002682:	bf00      	nop
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20000008 	.word	0x20000008

08002690 <__NVIC_SetPriorityGrouping>:
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026a0:	4b0b      	ldr	r3, [pc, #44]	@ (80026d0 <__NVIC_SetPriorityGrouping+0x40>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026ac:	4013      	ands	r3, r2
 80026ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80026b8:	4b06      	ldr	r3, [pc, #24]	@ (80026d4 <__NVIC_SetPriorityGrouping+0x44>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026be:	4a04      	ldr	r2, [pc, #16]	@ (80026d0 <__NVIC_SetPriorityGrouping+0x40>)
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	60d3      	str	r3, [r2, #12]
}
 80026c4:	bf00      	nop
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	e000ed00 	.word	0xe000ed00
 80026d4:	05fa0000 	.word	0x05fa0000

080026d8 <__NVIC_GetPriorityGrouping>:
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026dc:	4b04      	ldr	r3, [pc, #16]	@ (80026f0 <__NVIC_GetPriorityGrouping+0x18>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	0a1b      	lsrs	r3, r3, #8
 80026e2:	f003 0307 	and.w	r3, r3, #7
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <__NVIC_EnableIRQ>:
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	2b00      	cmp	r3, #0
 8002704:	db0b      	blt.n	800271e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	f003 021f 	and.w	r2, r3, #31
 800270c:	4907      	ldr	r1, [pc, #28]	@ (800272c <__NVIC_EnableIRQ+0x38>)
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	2001      	movs	r0, #1
 8002716:	fa00 f202 	lsl.w	r2, r0, r2
 800271a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	e000e100 	.word	0xe000e100

08002730 <__NVIC_SetPriority>:
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	6039      	str	r1, [r7, #0]
 800273a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800273c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002740:	2b00      	cmp	r3, #0
 8002742:	db0a      	blt.n	800275a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	b2da      	uxtb	r2, r3
 8002748:	490c      	ldr	r1, [pc, #48]	@ (800277c <__NVIC_SetPriority+0x4c>)
 800274a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274e:	0112      	lsls	r2, r2, #4
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	440b      	add	r3, r1
 8002754:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002758:	e00a      	b.n	8002770 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	b2da      	uxtb	r2, r3
 800275e:	4908      	ldr	r1, [pc, #32]	@ (8002780 <__NVIC_SetPriority+0x50>)
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	3b04      	subs	r3, #4
 8002768:	0112      	lsls	r2, r2, #4
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	440b      	add	r3, r1
 800276e:	761a      	strb	r2, [r3, #24]
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	e000e100 	.word	0xe000e100
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <NVIC_EncodePriority>:
{
 8002784:	b480      	push	{r7}
 8002786:	b089      	sub	sp, #36	@ 0x24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f1c3 0307 	rsb	r3, r3, #7
 800279e:	2b04      	cmp	r3, #4
 80027a0:	bf28      	it	cs
 80027a2:	2304      	movcs	r3, #4
 80027a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3304      	adds	r3, #4
 80027aa:	2b06      	cmp	r3, #6
 80027ac:	d902      	bls.n	80027b4 <NVIC_EncodePriority+0x30>
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	3b03      	subs	r3, #3
 80027b2:	e000      	b.n	80027b6 <NVIC_EncodePriority+0x32>
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b8:	f04f 32ff 	mov.w	r2, #4294967295
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43da      	mvns	r2, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	401a      	ands	r2, r3
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027cc:	f04f 31ff 	mov.w	r1, #4294967295
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	fa01 f303 	lsl.w	r3, r1, r3
 80027d6:	43d9      	mvns	r1, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027dc:	4313      	orrs	r3, r2
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3724      	adds	r7, #36	@ 0x24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7ff ff4c 	bl	8002690 <__NVIC_SetPriorityGrouping>
}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
 800280c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002812:	f7ff ff61 	bl	80026d8 <__NVIC_GetPriorityGrouping>
 8002816:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	68b9      	ldr	r1, [r7, #8]
 800281c:	6978      	ldr	r0, [r7, #20]
 800281e:	f7ff ffb1 	bl	8002784 <NVIC_EncodePriority>
 8002822:	4602      	mov	r2, r0
 8002824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002828:	4611      	mov	r1, r2
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff ff80 	bl	8002730 <__NVIC_SetPriority>
}
 8002830:	bf00      	nop
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff ff54 	bl	80026f4 <__NVIC_EnableIRQ>
}
 800284c:	bf00      	nop
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8002858:	f3bf 8f5f 	dmb	sy
}
 800285c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800285e:	4b07      	ldr	r3, [pc, #28]	@ (800287c <HAL_MPU_Disable+0x28>)
 8002860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002862:	4a06      	ldr	r2, [pc, #24]	@ (800287c <HAL_MPU_Disable+0x28>)
 8002864:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002868:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800286a:	4b05      	ldr	r3, [pc, #20]	@ (8002880 <HAL_MPU_Disable+0x2c>)
 800286c:	2200      	movs	r2, #0
 800286e:	605a      	str	r2, [r3, #4]
}
 8002870:	bf00      	nop
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	e000ed00 	.word	0xe000ed00
 8002880:	e000ed90 	.word	0xe000ed90

08002884 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800288c:	4a0b      	ldr	r2, [pc, #44]	@ (80028bc <HAL_MPU_Enable+0x38>)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002896:	4b0a      	ldr	r3, [pc, #40]	@ (80028c0 <HAL_MPU_Enable+0x3c>)
 8002898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289a:	4a09      	ldr	r2, [pc, #36]	@ (80028c0 <HAL_MPU_Enable+0x3c>)
 800289c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028a0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80028a2:	f3bf 8f4f 	dsb	sy
}
 80028a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80028a8:	f3bf 8f6f 	isb	sy
}
 80028ac:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	e000ed90 	.word	0xe000ed90
 80028c0:	e000ed00 	.word	0xe000ed00

080028c4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	785a      	ldrb	r2, [r3, #1]
 80028d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002940 <HAL_MPU_ConfigRegion+0x7c>)
 80028d2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80028d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002940 <HAL_MPU_ConfigRegion+0x7c>)
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	4a19      	ldr	r2, [pc, #100]	@ (8002940 <HAL_MPU_ConfigRegion+0x7c>)
 80028da:	f023 0301 	bic.w	r3, r3, #1
 80028de:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80028e0:	4a17      	ldr	r2, [pc, #92]	@ (8002940 <HAL_MPU_ConfigRegion+0x7c>)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	7b1b      	ldrb	r3, [r3, #12]
 80028ec:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	7adb      	ldrb	r3, [r3, #11]
 80028f2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80028f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	7a9b      	ldrb	r3, [r3, #10]
 80028fa:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80028fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	7b5b      	ldrb	r3, [r3, #13]
 8002902:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002904:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	7b9b      	ldrb	r3, [r3, #14]
 800290a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800290c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	7bdb      	ldrb	r3, [r3, #15]
 8002912:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002914:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	7a5b      	ldrb	r3, [r3, #9]
 800291a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800291c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	7a1b      	ldrb	r3, [r3, #8]
 8002922:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002924:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	7812      	ldrb	r2, [r2, #0]
 800292a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800292c:	4a04      	ldr	r2, [pc, #16]	@ (8002940 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800292e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002930:	6113      	str	r3, [r2, #16]
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	e000ed90 	.word	0xe000ed90

08002944 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e054      	b.n	8002a00 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	7f5b      	ldrb	r3, [r3, #29]
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7ff f81a 	bl	80019a0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	791b      	ldrb	r3, [r3, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10c      	bne.n	8002994 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a22      	ldr	r2, [pc, #136]	@ (8002a08 <HAL_CRC_Init+0xc4>)
 8002980:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0218 	bic.w	r2, r2, #24
 8002990:	609a      	str	r2, [r3, #8]
 8002992:	e00c      	b.n	80029ae <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6899      	ldr	r1, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	461a      	mov	r2, r3
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f834 	bl	8002a0c <HAL_CRCEx_Polynomial_Set>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e028      	b.n	8002a00 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	795b      	ldrb	r3, [r3, #5]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d105      	bne.n	80029c2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f04f 32ff 	mov.w	r2, #4294967295
 80029be:	611a      	str	r2, [r3, #16]
 80029c0:	e004      	b.n	80029cc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6912      	ldr	r2, [r2, #16]
 80029ca:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695a      	ldr	r2, [r3, #20]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	699a      	ldr	r2, [r3, #24]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	04c11db7 	.word	0x04c11db7

08002a0c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b087      	sub	sp, #28
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002a1c:	231f      	movs	r3, #31
 8002a1e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d102      	bne.n	8002a30 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	75fb      	strb	r3, [r7, #23]
 8002a2e:	e063      	b.n	8002af8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002a30:	bf00      	nop
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1e5a      	subs	r2, r3, #1
 8002a36:	613a      	str	r2, [r7, #16]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d009      	beq.n	8002a50 <HAL_CRCEx_Polynomial_Set+0x44>
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	f003 031f 	and.w	r3, r3, #31
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	fa22 f303 	lsr.w	r3, r2, r3
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0f0      	beq.n	8002a32 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b18      	cmp	r3, #24
 8002a54:	d846      	bhi.n	8002ae4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8002a56:	a201      	add	r2, pc, #4	@ (adr r2, 8002a5c <HAL_CRCEx_Polynomial_Set+0x50>)
 8002a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5c:	08002aeb 	.word	0x08002aeb
 8002a60:	08002ae5 	.word	0x08002ae5
 8002a64:	08002ae5 	.word	0x08002ae5
 8002a68:	08002ae5 	.word	0x08002ae5
 8002a6c:	08002ae5 	.word	0x08002ae5
 8002a70:	08002ae5 	.word	0x08002ae5
 8002a74:	08002ae5 	.word	0x08002ae5
 8002a78:	08002ae5 	.word	0x08002ae5
 8002a7c:	08002ad9 	.word	0x08002ad9
 8002a80:	08002ae5 	.word	0x08002ae5
 8002a84:	08002ae5 	.word	0x08002ae5
 8002a88:	08002ae5 	.word	0x08002ae5
 8002a8c:	08002ae5 	.word	0x08002ae5
 8002a90:	08002ae5 	.word	0x08002ae5
 8002a94:	08002ae5 	.word	0x08002ae5
 8002a98:	08002ae5 	.word	0x08002ae5
 8002a9c:	08002acd 	.word	0x08002acd
 8002aa0:	08002ae5 	.word	0x08002ae5
 8002aa4:	08002ae5 	.word	0x08002ae5
 8002aa8:	08002ae5 	.word	0x08002ae5
 8002aac:	08002ae5 	.word	0x08002ae5
 8002ab0:	08002ae5 	.word	0x08002ae5
 8002ab4:	08002ae5 	.word	0x08002ae5
 8002ab8:	08002ae5 	.word	0x08002ae5
 8002abc:	08002ac1 	.word	0x08002ac1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	2b06      	cmp	r3, #6
 8002ac4:	d913      	bls.n	8002aee <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002aca:	e010      	b.n	8002aee <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	2b07      	cmp	r3, #7
 8002ad0:	d90f      	bls.n	8002af2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002ad6:	e00c      	b.n	8002af2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	2b0f      	cmp	r3, #15
 8002adc:	d90b      	bls.n	8002af6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002ae2:	e008      	b.n	8002af6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	75fb      	strb	r3, [r7, #23]
        break;
 8002ae8:	e006      	b.n	8002af8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002aea:	bf00      	nop
 8002aec:	e004      	b.n	8002af8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002aee:	bf00      	nop
 8002af0:	e002      	b.n	8002af8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002af2:	bf00      	nop
 8002af4:	e000      	b.n	8002af8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002af6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002af8:	7dfb      	ldrb	r3, [r7, #23]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10d      	bne.n	8002b1a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f023 0118 	bic.w	r1, r3, #24
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	371c      	adds	r7, #28
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e049      	b.n	8002bce <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d106      	bne.n	8002b54 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7fe ff46 	bl	80019e0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b78:	f023 0107 	bic.w	r1, r3, #7
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b8e:	4b12      	ldr	r3, [pc, #72]	@ (8002bd8 <HAL_DMA2D_Init+0xb0>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	68d1      	ldr	r1, [r2, #12]
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6812      	ldr	r2, [r2, #0]
 8002b9a:	430b      	orrs	r3, r1
 8002b9c:	6413      	str	r3, [r2, #64]	@ 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ba4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	051a      	lsls	r2, r3, #20
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	055b      	lsls	r3, r3, #21
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	635a      	str	r2, [r3, #52]	@ 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	ffffc000 	.word	0xffffc000

08002bdc <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d026      	beq.n	8002c4c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d021      	beq.n	8002c4c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c16:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c1c:	f043 0201 	orr.w	r2, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2204      	movs	r2, #4
 8002c30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d003      	beq.n	8002c4c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f003 0320 	and.w	r3, r3, #32
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d026      	beq.n	8002ca4 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d021      	beq.n	8002ca4 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c6e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2220      	movs	r2, #32
 8002c76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c7c:	f043 0202 	orr.w	r2, r3, #2
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2204      	movs	r2, #4
 8002c88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d026      	beq.n	8002cfc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d021      	beq.n	8002cfc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cc6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2208      	movs	r2, #8
 8002cce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd4:	f043 0204 	orr.w	r2, r3, #4
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2204      	movs	r2, #4
 8002ce0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d013      	beq.n	8002d2e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00e      	beq.n	8002d2e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d1e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2204      	movs	r2, #4
 8002d26:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f853 	bl	8002dd4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d024      	beq.n	8002d82 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d01f      	beq.n	8002d82 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002d50:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2202      	movs	r2, #2
 8002d58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      if (hdma2d->XferCpltCallback != NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f003 0310 	and.w	r3, r3, #16
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d01f      	beq.n	8002dcc <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d01a      	beq.n	8002dcc <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002da4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2210      	movs	r2, #16
 8002dac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f80e 	bl	8002de8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002dcc:	bf00      	nop
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b087      	sub	sp, #28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d101      	bne.n	8002e1c <HAL_DMA2D_ConfigLayer+0x20>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	e084      	b.n	8002f26 <HAL_DMA2D_ConfigLayer+0x12a>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2202      	movs	r2, #2
 8002e28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	4413      	add	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	3320      	adds	r3, #32
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	041b      	lsls	r3, r3, #16
 8002e48:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002e50:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8002e5c:	4b35      	ldr	r3, [pc, #212]	@ (8002f34 <HAL_DMA2D_ConfigLayer+0x138>)
 8002e5e:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b0a      	cmp	r3, #10
 8002e66:	d003      	beq.n	8002e70 <HAL_DMA2D_ConfigLayer+0x74>
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b09      	cmp	r3, #9
 8002e6e:	d107      	bne.n	8002e80 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	e005      	b.n	8002e8c <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	061b      	lsls	r3, r3, #24
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d120      	bne.n	8002ed4 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	ea02 0103 	and.w	r1, r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	6812      	ldr	r2, [r2, #0]
 8002eb2:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2b0a      	cmp	r3, #10
 8002eba:	d003      	beq.n	8002ec4 <HAL_DMA2D_ConfigLayer+0xc8>
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b09      	cmp	r3, #9
 8002ec2:	d127      	bne.n	8002f14 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002ed0:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ed2:	e01f      	b.n	8002f14 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	69da      	ldr	r2, [r3, #28]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	43db      	mvns	r3, r3
 8002ede:	ea02 0103 	and.w	r1, r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	6812      	ldr	r2, [r2, #0]
 8002ef4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b0a      	cmp	r3, #10
 8002efc:	d003      	beq.n	8002f06 <HAL_DMA2D_ConfigLayer+0x10a>
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b09      	cmp	r3, #9
 8002f04:	d106      	bne.n	8002f14 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002f12:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	371c      	adds	r7, #28
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	ff33000f 	.word	0xff33000f

08002f38 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
 8002f44:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	019a      	lsls	r2, r3, #6
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	021b      	lsls	r3, r3, #8
 8002f52:	431a      	orrs	r2, r3
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	041b      	lsls	r3, r3, #16
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8002f5e:	bf00      	nop
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b086      	sub	sp, #24
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	60f8      	str	r0, [r7, #12]
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	607a      	str	r2, [r7, #4]
 8002f76:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f78:	f7ff fb5a 	bl	8002630 <HAL_GetTick>
 8002f7c:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002f7e:	e009      	b.n	8002f94 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002f80:	f7ff fb56 	bl	8002630 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f8e:	d901      	bls.n	8002f94 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e015      	b.n	8002fc0 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0ee      	beq.n	8002f80 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	019a      	lsls	r2, r3, #6
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	021b      	lsls	r3, r3, #8
 8002fae:	ea42 0103 	orr.w	r1, r2, r3
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
 8002fb4:	041a      	lsls	r2, r3, #16
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08a      	sub	sp, #40	@ 0x28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e16c      	b.n	80032b6 <HAL_DSI_Init+0x2ee>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	7c5b      	ldrb	r3, [r3, #17]
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d102      	bne.n	8002fec <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7fe fd20 	bl	8001a2c <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2203      	movs	r2, #3
 8002ff0:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61bb      	str	r3, [r7, #24]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003006:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8003012:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003016:	61bb      	str	r3, [r7, #24]
 8003018:	69bb      	ldr	r3, [r7, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800301a:	f7ff fb09 	bl	8002630 <HAL_GetTick>
 800301e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003020:	e009      	b.n	8003036 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003022:	f7ff fb05 	bl	8002630 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003030:	d901      	bls.n	8003036 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e13f      	b.n	80032b6 <HAL_DSI_Init+0x2ee>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800303e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0ed      	beq.n	8003022 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	4b9b      	ldr	r3, [pc, #620]	@ (80032c0 <HAL_DSI_Init+0x2f8>)
 8003054:	400b      	ands	r3, r1
 8003056:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800306e:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003076:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003082:	2300      	movs	r3, #0
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0201 	orr.w	r2, r2, #1
 8003096:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	617b      	str	r3, [r7, #20]
 80030a8:	697b      	ldr	r3, [r7, #20]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 80030aa:	2001      	movs	r0, #1
 80030ac:	f7ff facc 	bl	8002648 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 80030b0:	f7ff fabe 	bl	8002630 <HAL_GetTick>
 80030b4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80030b6:	e009      	b.n	80030cc <HAL_DSI_Init+0x104>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80030b8:	f7ff faba 	bl	8002630 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80030c6:	d901      	bls.n	80030cc <HAL_DSI_Init+0x104>
    {
      return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e0f4      	b.n	80032b6 <HAL_DSI_Init+0x2ee>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80030d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0ed      	beq.n	80030b8 <HAL_DSI_Init+0xf0>
    }
  }

  __HAL_DSI_ENABLE(hdsi);
 80030dc:	2300      	movs	r3, #0
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0201 	orr.w	r2, r2, #1
 80030ee:	605a      	str	r2, [r3, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	613b      	str	r3, [r7, #16]
 80030fc:	693b      	ldr	r3, [r7, #16]

  /************************ Set the DSI clock parameters ************************/
  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800310c:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6899      	ldr	r1, [r3, #8]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	609a      	str	r2, [r3, #8]

  /*************************** Set the PHY parameters ***************************/
  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f042 0202 	orr.w	r2, r2, #2
 8003130:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f042 0204 	orr.w	r2, r2, #4
 8003144:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0


  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0203 	bic.w	r2, r2, #3
 8003158:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Get tick */
  tickstart = HAL_GetTick();
 8003172:	f7ff fa5d 	bl	8002630 <HAL_GetTick>
 8003176:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003180:	f003 0303 	and.w	r3, r3, #3
 8003184:	2b00      	cmp	r3, #0
 8003186:	d123      	bne.n	80031d0 <HAL_DSI_Init+0x208>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8003188:	e00c      	b.n	80031a4 <HAL_DSI_Init+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800318a:	f7ff fa51 	bl	8002630 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003198:	d904      	bls.n	80031a4 <HAL_DSI_Init+0x1dc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e088      	b.n	80032b6 <HAL_DSI_Init+0x2ee>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80031ac:	f003 0314 	and.w	r3, r3, #20
 80031b0:	2b14      	cmp	r3, #20
 80031b2:	d1ea      	bne.n	800318a <HAL_DSI_Init+0x1c2>
 80031b4:	e014      	b.n	80031e0 <HAL_DSI_Init+0x218>
  else
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
                                                                                    DSI_PSR_PSS1 | DSI_PSR_PSSC))
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80031b6:	f7ff fa3b 	bl	8002630 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80031c4:	d904      	bls.n	80031d0 <HAL_DSI_Init+0x208>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e072      	b.n	80032b6 <HAL_DSI_Init+0x2ee>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80031d8:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 80031dc:	2b94      	cmp	r3, #148	@ 0x94
 80031de:	d1ea      	bne.n	80031b6 <HAL_DSI_Init+0x1ee>
  }

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d002      	beq.n	80031ee <HAL_DSI_Init+0x226>
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	e000      	b.n	80031f0 <HAL_DSI_Init+0x228>
 80031ee:	2301      	movs	r3, #1
 80031f0:	623b      	str	r3, [r7, #32]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	4a33      	ldr	r2, [pc, #204]	@ (80032c4 <HAL_DSI_Init+0x2fc>)
 80031f6:	fb03 f202 	mul.w	r2, r3, r2
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	409a      	lsls	r2, r3
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	fbb2 f3f3 	udiv	r3, r2, r3
 8003214:	61fb      	str	r3, [r7, #28]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8003226:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	69fa      	ldr	r2, [r7, #28]
 8003238:	430a      	orrs	r2, r1
 800323a:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2200      	movs	r2, #0
 8003244:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2200      	movs	r2, #0
 800324e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	619a      	str	r2, [r3, #24]

  __HAL_DSI_DISABLE(hdsi);
 8003258:	2300      	movs	r3, #0
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0201 	bic.w	r2, r2, #1
 800326a:	605a      	str	r2, [r3, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	68fb      	ldr	r3, [r7, #12]

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0203 	bic.w	r2, r2, #3
 800328a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0201 	orr.w	r2, r2, #1
 80032a4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3728      	adds	r7, #40	@ 0x28
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	fffc8603 	.word	0xfffc8603
 80032c4:	003d0900 	.word	0x003d0900

080032c8 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	7c1b      	ldrb	r3, [r3, #16]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d101      	bne.n	80032de <HAL_DSI_ConfigErrorMonitor+0x16>
 80032da:	2302      	movs	r3, #2
 80032dc:	e0aa      	b.n	8003434 <HAL_DSI_ConfigErrorMonitor+0x16c>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00a      	beq.n	800331e <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003318:	430b      	orrs	r3, r1
 800331a:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d009      	beq.n	800333c <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f442 12f8 	orr.w	r2, r2, #2031616	@ 0x1f0000
 8003338:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	f003 0304 	and.w	r3, r3, #4
 8003342:	2b00      	cmp	r3, #0
 8003344:	d009      	beq.n	800335a <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0201 	orr.w	r2, r2, #1
 8003356:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	f003 0308 	and.w	r3, r3, #8
 8003360:	2b00      	cmp	r3, #0
 8003362:	d009      	beq.n	8003378 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f042 0202 	orr.w	r2, r2, #2
 8003374:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	f003 0310 	and.w	r3, r3, #16
 800337e:	2b00      	cmp	r3, #0
 8003380:	d009      	beq.n	8003396 <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 020c 	orr.w	r2, r2, #12
 8003392:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	f003 0320 	and.w	r3, r3, #32
 800339c:	2b00      	cmp	r3, #0
 800339e:	d009      	beq.n	80033b4 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 0210 	orr.w	r2, r2, #16
 80033b0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d009      	beq.n	80033d2 <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0220 	orr.w	r2, r2, #32
 80033ce:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d009      	beq.n	80033f0 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033ec:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d009      	beq.n	800340e <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800340a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003414:	2b00      	cmp	r3, #0
 8003416:	d009      	beq.n	800342c <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
 8003428:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00f      	beq.n	8003478 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b00      	cmp	r3, #0
 8003466:	d007      	beq.n	8003478 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2201      	movs	r2, #1
 800346e:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f8ad 	bl	80035d2 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00f      	beq.n	80034a8 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d007      	beq.n	80034a8 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2202      	movs	r2, #2
 800349e:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f89f 	bl	80035e6 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 808c 	beq.w	80035ca <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80034ba:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	4013      	ands	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80034d2:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	4013      	ands	r3, r2
 80034e0:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d005      	beq.n	80034f6 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	f043 0201 	orr.w	r2, r3, #1
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d005      	beq.n	800350c <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	f043 0202 	orr.w	r2, r3, #2
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d005      	beq.n	8003522 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	f043 0204 	orr.w	r2, r3, #4
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d005      	beq.n	8003538 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	f043 0208 	orr.w	r2, r3, #8
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f003 030c 	and.w	r3, r3, #12
 800353e:	2b00      	cmp	r3, #0
 8003540:	d005      	beq.n	800354e <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	f043 0210 	orr.w	r2, r3, #16
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	f003 0310 	and.w	r3, r3, #16
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	f043 0220 	orr.w	r2, r3, #32
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f003 0320 	and.w	r3, r3, #32
 800356a:	2b00      	cmp	r3, #0
 800356c:	d005      	beq.n	800357a <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003580:	2b00      	cmp	r3, #0
 8003582:	d005      	beq.n	8003590 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003596:	2b00      	cmp	r3, #0
 8003598:	d005      	beq.n	80035a6 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d005      	beq.n	80035bc <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d002      	beq.n	80035ca <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f818 	bl	80035fa <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 80035ca:	bf00      	nop
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
 8003616:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	7c1b      	ldrb	r3, [r3, #16]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d101      	bne.n	8003624 <HAL_DSI_SetGenericVCID+0x16>
 8003620:	2302      	movs	r3, #2
 8003622:	e016      	b.n	8003652 <HAL_DSI_SetGenericVCID+0x44>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0203 	bic.w	r2, r2, #3
 8003638:	631a      	str	r2, [r3, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
	...

08003660 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	7c1b      	ldrb	r3, [r3, #16]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d101      	bne.n	8003676 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8003672:	2302      	movs	r3, #2
 8003674:	e0c5      	b.n	8003802 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0201 	orr.w	r2, r2, #1
 800368a:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 0201 	bic.w	r2, r2, #1
 800369c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f042 0201 	orr.w	r2, r2, #1
 80036b0:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0203 	bic.w	r2, r2, #3
 80036c2:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68d9      	ldr	r1, [r3, #12]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695a      	ldr	r2, [r3, #20]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0207 	bic.w	r2, r2, #7
 80036e4:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6959      	ldr	r1, [r3, #20]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	69da      	ldr	r2, [r3, #28]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	431a      	orrs	r2, r3
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	691a      	ldr	r2, [r3, #16]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 020f 	bic.w	r2, r2, #15
 8003712:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6919      	ldr	r1, [r3, #16]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 020e 	bic.w	r2, r2, #14
 8003736:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	005a      	lsls	r2, r3, #1
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	4b2c      	ldr	r3, [pc, #176]	@ (8003810 <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 800375e:	400b      	ands	r3, r1
 8003760:	6653      	str	r3, [r2, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8003784:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	68da      	ldr	r2, [r3, #12]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	431a      	orrs	r2, r3
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379e:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80037a4:	431a      	orrs	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 0201 	bic.w	r2, r2, #1
 80037be:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 0201 	orr.w	r2, r2, #1
 80037e2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0202 	orr.w	r2, r2, #2
 80037f6:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	ffff0000 	.word	0xffff0000

08003814 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	7c1b      	ldrb	r3, [r3, #16]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d101      	bne.n	800382a <HAL_DSI_ConfigCommand+0x16>
 8003826:	2302      	movs	r3, #2
 8003828:	e049      	b.n	80038be <HAL_DSI_ConfigCommand+0xaa>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	4b24      	ldr	r3, [pc, #144]	@ (80038cc <HAL_DSI_ConfigCommand+0xb8>)
 800383c:	400b      	ands	r3, r1
 800383e:	6693      	str	r3, [r2, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800384e:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8003854:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 800385a:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8003860:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8003866:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 800386c:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8003872:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8003878:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 800387e:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8003884:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           LPCmd->LPDcsLongWrite      | \
 800388a:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0202 	bic.w	r2, r2, #2
 80038a2:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	fef080ff 	.word	0xfef080ff

080038d0 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	7c1b      	ldrb	r3, [r3, #16]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d101      	bne.n	80038e6 <HAL_DSI_ConfigFlowControl+0x16>
 80038e2:	2302      	movs	r3, #2
 80038e4:	e016      	b.n	8003914 <HAL_DSI_ConfigFlowControl+0x44>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f022 021f 	bic.w	r2, r2, #31
 80038fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	7c1b      	ldrb	r3, [r3, #16]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d101      	bne.n	8003936 <HAL_DSI_ConfigPhyTimer+0x16>
 8003932:	2302      	movs	r3, #2
 8003934:	e058      	b.n	80039e8 <HAL_DSI_ConfigPhyTimer+0xc8>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	4293      	cmp	r3, r2
 8003946:	bf38      	it	cc
 8003948:	4613      	movcc	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 800395c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	041a      	lsls	r2, r3, #16
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 800398a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	691a      	ldr	r2, [r3, #16]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	041b      	lsls	r3, r3, #16
 80039a0:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80039a8:	431a      	orrs	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80039c4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	021a      	lsls	r2, r3, #8
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	7c1b      	ldrb	r3, [r3, #16]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d101      	bne.n	8003a0a <HAL_DSI_ConfigHostTimeouts+0x16>
 8003a06:	2302      	movs	r3, #2
 8003a08:	e0b4      	b.n	8003b74 <HAL_DSI_ConfigHostTimeouts+0x180>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8003a1e:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6899      	ldr	r1, [r3, #8]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	021a      	lsls	r2, r3, #8
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	b292      	uxth	r2, r2
 8003a40:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	041a      	lsls	r2, r3, #16
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	4b47      	ldr	r3, [pc, #284]	@ (8003b80 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003a62:	400b      	ands	r3, r1
 8003a64:	6793      	str	r3, [r2, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	679a      	str	r2, [r3, #120]	@ 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	4b3f      	ldr	r3, [pc, #252]	@ (8003b80 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003a84:	400b      	ands	r3, r1
 8003a86:	67d3      	str	r3, [r2, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	4b36      	ldr	r3, [pc, #216]	@ (8003b80 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003aa8:	400b      	ands	r3, r1
 8003aaa:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	691a      	ldr	r2, [r3, #16]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	4b2b      	ldr	r3, [pc, #172]	@ (8003b80 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003ad2:	400b      	ands	r3, r1
 8003ad4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	695a      	ldr	r2, [r3, #20]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8003afe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	699a      	ldr	r2, [r3, #24]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	4b16      	ldr	r3, [pc, #88]	@ (8003b80 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003b26:	400b      	ands	r3, r1
 8003b28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	69da      	ldr	r2, [r3, #28]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8003b80 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003b50:	400b      	ands	r3, r1
 8003b52:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	6a1a      	ldr	r2, [r3, #32]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	ffff0000 	.word	0xffff0000

08003b84 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	7c1b      	ldrb	r3, [r3, #16]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d101      	bne.n	8003b98 <HAL_DSI_Start+0x14>
 8003b94:	2302      	movs	r3, #2
 8003b96:	e02b      	b.n	8003bf0 <HAL_DSI_Start+0x6c>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60fb      	str	r3, [r7, #12]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f042 0201 	orr.w	r2, r2, #1
 8003bb0:	605a      	str	r2, [r3, #4]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	60bb      	str	r3, [r7, #8]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f042 0208 	orr.w	r2, r2, #8
 8003bd4:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8003be0:	f003 0308 	and.w	r3, r3, #8
 8003be4:	60bb      	str	r3, [r7, #8]
 8003be6:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b088      	sub	sp, #32
 8003c00:	af02      	add	r7, sp, #8
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
 8003c08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	7c1b      	ldrb	r3, [r3, #16]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d101      	bne.n	8003c16 <HAL_DSI_ShortWrite+0x1a>
 8003c12:	2302      	movs	r3, #2
 8003c14:	e010      	b.n	8003c38 <HAL_DSI_ShortWrite+0x3c>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	68b9      	ldr	r1, [r7, #8]
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f7ff f99f 	bl	8002f6a <DSI_ShortWrite>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	741a      	strb	r2, [r3, #16]

  return status;
 8003c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    const uint8_t *ParametersTable)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b08c      	sub	sp, #48	@ 0x30
 8003c44:	af02      	add	r7, sp, #8
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
 8003c4c:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  const uint8_t *pparams = ParametersTable;
 8003c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c50:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	7c1b      	ldrb	r3, [r3, #16]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d101      	bne.n	8003c5e <HAL_DSI_LongWrite+0x1e>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e084      	b.n	8003d68 <HAL_DSI_LongWrite+0x128>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2201      	movs	r2, #1
 8003c62:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c64:	f7fe fce4 	bl	8002630 <HAL_GetTick>
 8003c68:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003c6a:	e00c      	b.n	8003c86 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003c6c:	f7fe fce0 	bl	8002630 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c7a:	d904      	bls.n	8003c86 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e070      	b.n	8003d68 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0eb      	beq.n	8003c6c <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8003c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c96:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	2b03      	cmp	r3, #3
 8003c9c:	bf28      	it	cs
 8003c9e:	2303      	movcs	r3, #3
 8003ca0:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	623b      	str	r3, [r7, #32]
 8003ca6:	e00f      	b.n	8003cc8 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	4413      	add	r3, r2
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	69fa      	ldr	r2, [r7, #28]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	623b      	str	r3, [r7, #32]
 8003cc8:	6a3a      	ldr	r2, [r7, #32]
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d3eb      	bcc.n	8003ca8 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	69fa      	ldr	r2, [r7, #28]
 8003cd6:	671a      	str	r2, [r3, #112]	@ 0x70

  uicounter = NbParams - nbBytes;
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	627b      	str	r3, [r7, #36]	@ 0x24
  pparams += nbBytes;
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8003ce8:	e028      	b.n	8003d3c <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8003cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cec:	2b04      	cmp	r3, #4
 8003cee:	bf28      	it	cs
 8003cf0:	2304      	movcs	r3, #4
 8003cf2:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	623b      	str	r3, [r7, #32]
 8003cfc:	e00e      	b.n	8003d1c <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	4413      	add	r3, r2
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	461a      	mov	r2, r3
 8003d08:	6a3b      	ldr	r3, [r7, #32]
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	69fa      	ldr	r2, [r7, #28]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	623b      	str	r3, [r7, #32]
 8003d1c:	6a3a      	ldr	r2, [r7, #32]
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d3ec      	bcc.n	8003cfe <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	69fa      	ldr	r2, [r7, #28]
 8003d2a:	671a      	str	r2, [r3, #112]	@ 0x70

    uicounter -= nbBytes;
 8003d2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	627b      	str	r3, [r7, #36]	@ 0x24
    pparams += nbBytes;
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	4413      	add	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1d3      	bne.n	8003cea <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003d4a:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	4613      	mov	r3, r2
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	68b9      	ldr	r1, [r7, #8]
 8003d5c:	f7ff f8ec 	bl	8002f38 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3728      	adds	r7, #40	@ 0x28
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	7c1b      	ldrb	r3, [r3, #16]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d101      	bne.n	8003d86 <HAL_DSI_SetLowPowerRXFilter+0x16>
 8003d82:	2302      	movs	r3, #2
 8003d84:	e01b      	b.n	8003dbe <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f8d3 241c 	ldr.w	r2, [r3, #1052]	@ 0x41c
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 8003d9c:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f8d3 141c 	ldr.w	r1, [r3, #1052]	@ 0x41c
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	065a      	lsls	r2, r3, #25
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
	...

08003dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b089      	sub	sp, #36	@ 0x24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003dde:	2300      	movs	r3, #0
 8003de0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003de2:	2300      	movs	r3, #0
 8003de4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003de6:	2300      	movs	r3, #0
 8003de8:	61fb      	str	r3, [r7, #28]
 8003dea:	e175      	b.n	80040d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003dec:	2201      	movs	r2, #1
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	f040 8164 	bne.w	80040d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f003 0303 	and.w	r3, r3, #3
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d005      	beq.n	8003e22 <HAL_GPIO_Init+0x56>
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f003 0303 	and.w	r3, r3, #3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d130      	bne.n	8003e84 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	2203      	movs	r2, #3
 8003e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e32:	43db      	mvns	r3, r3
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	4013      	ands	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	fa02 f303 	lsl.w	r3, r2, r3
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e58:	2201      	movs	r2, #1
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	43db      	mvns	r3, r3
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	4013      	ands	r3, r2
 8003e66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	091b      	lsrs	r3, r3, #4
 8003e6e:	f003 0201 	and.w	r2, r3, #1
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f003 0303 	and.w	r3, r3, #3
 8003e8c:	2b03      	cmp	r3, #3
 8003e8e:	d017      	beq.n	8003ec0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	2203      	movs	r2, #3
 8003e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea0:	43db      	mvns	r3, r3
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f003 0303 	and.w	r3, r3, #3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d123      	bne.n	8003f14 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	08da      	lsrs	r2, r3, #3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3208      	adds	r2, #8
 8003ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	220f      	movs	r2, #15
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	43db      	mvns	r3, r3
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	4013      	ands	r3, r2
 8003eee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	691a      	ldr	r2, [r3, #16]
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	f003 0307 	and.w	r3, r3, #7
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	fa02 f303 	lsl.w	r3, r2, r3
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	08da      	lsrs	r2, r3, #3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3208      	adds	r2, #8
 8003f0e:	69b9      	ldr	r1, [r7, #24]
 8003f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	2203      	movs	r2, #3
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	43db      	mvns	r3, r3
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f003 0203 	and.w	r2, r3, #3
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 80be 	beq.w	80040d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f56:	4b66      	ldr	r3, [pc, #408]	@ (80040f0 <HAL_GPIO_Init+0x324>)
 8003f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f5a:	4a65      	ldr	r2, [pc, #404]	@ (80040f0 <HAL_GPIO_Init+0x324>)
 8003f5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f60:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f62:	4b63      	ldr	r3, [pc, #396]	@ (80040f0 <HAL_GPIO_Init+0x324>)
 8003f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003f6e:	4a61      	ldr	r2, [pc, #388]	@ (80040f4 <HAL_GPIO_Init+0x328>)
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	089b      	lsrs	r3, r3, #2
 8003f74:	3302      	adds	r3, #2
 8003f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	220f      	movs	r2, #15
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	43db      	mvns	r3, r3
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	4013      	ands	r3, r2
 8003f90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a58      	ldr	r2, [pc, #352]	@ (80040f8 <HAL_GPIO_Init+0x32c>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d037      	beq.n	800400a <HAL_GPIO_Init+0x23e>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a57      	ldr	r2, [pc, #348]	@ (80040fc <HAL_GPIO_Init+0x330>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d031      	beq.n	8004006 <HAL_GPIO_Init+0x23a>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a56      	ldr	r2, [pc, #344]	@ (8004100 <HAL_GPIO_Init+0x334>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d02b      	beq.n	8004002 <HAL_GPIO_Init+0x236>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a55      	ldr	r2, [pc, #340]	@ (8004104 <HAL_GPIO_Init+0x338>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d025      	beq.n	8003ffe <HAL_GPIO_Init+0x232>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a54      	ldr	r2, [pc, #336]	@ (8004108 <HAL_GPIO_Init+0x33c>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d01f      	beq.n	8003ffa <HAL_GPIO_Init+0x22e>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a53      	ldr	r2, [pc, #332]	@ (800410c <HAL_GPIO_Init+0x340>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d019      	beq.n	8003ff6 <HAL_GPIO_Init+0x22a>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a52      	ldr	r2, [pc, #328]	@ (8004110 <HAL_GPIO_Init+0x344>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d013      	beq.n	8003ff2 <HAL_GPIO_Init+0x226>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a51      	ldr	r2, [pc, #324]	@ (8004114 <HAL_GPIO_Init+0x348>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d00d      	beq.n	8003fee <HAL_GPIO_Init+0x222>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a50      	ldr	r2, [pc, #320]	@ (8004118 <HAL_GPIO_Init+0x34c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d007      	beq.n	8003fea <HAL_GPIO_Init+0x21e>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a4f      	ldr	r2, [pc, #316]	@ (800411c <HAL_GPIO_Init+0x350>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d101      	bne.n	8003fe6 <HAL_GPIO_Init+0x21a>
 8003fe2:	2309      	movs	r3, #9
 8003fe4:	e012      	b.n	800400c <HAL_GPIO_Init+0x240>
 8003fe6:	230a      	movs	r3, #10
 8003fe8:	e010      	b.n	800400c <HAL_GPIO_Init+0x240>
 8003fea:	2308      	movs	r3, #8
 8003fec:	e00e      	b.n	800400c <HAL_GPIO_Init+0x240>
 8003fee:	2307      	movs	r3, #7
 8003ff0:	e00c      	b.n	800400c <HAL_GPIO_Init+0x240>
 8003ff2:	2306      	movs	r3, #6
 8003ff4:	e00a      	b.n	800400c <HAL_GPIO_Init+0x240>
 8003ff6:	2305      	movs	r3, #5
 8003ff8:	e008      	b.n	800400c <HAL_GPIO_Init+0x240>
 8003ffa:	2304      	movs	r3, #4
 8003ffc:	e006      	b.n	800400c <HAL_GPIO_Init+0x240>
 8003ffe:	2303      	movs	r3, #3
 8004000:	e004      	b.n	800400c <HAL_GPIO_Init+0x240>
 8004002:	2302      	movs	r3, #2
 8004004:	e002      	b.n	800400c <HAL_GPIO_Init+0x240>
 8004006:	2301      	movs	r3, #1
 8004008:	e000      	b.n	800400c <HAL_GPIO_Init+0x240>
 800400a:	2300      	movs	r3, #0
 800400c:	69fa      	ldr	r2, [r7, #28]
 800400e:	f002 0203 	and.w	r2, r2, #3
 8004012:	0092      	lsls	r2, r2, #2
 8004014:	4093      	lsls	r3, r2
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	4313      	orrs	r3, r2
 800401a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800401c:	4935      	ldr	r1, [pc, #212]	@ (80040f4 <HAL_GPIO_Init+0x328>)
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	089b      	lsrs	r3, r3, #2
 8004022:	3302      	adds	r3, #2
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800402a:	4b3d      	ldr	r3, [pc, #244]	@ (8004120 <HAL_GPIO_Init+0x354>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	43db      	mvns	r3, r3
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	4013      	ands	r3, r2
 8004038:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	4313      	orrs	r3, r2
 800404c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800404e:	4a34      	ldr	r2, [pc, #208]	@ (8004120 <HAL_GPIO_Init+0x354>)
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004054:	4b32      	ldr	r3, [pc, #200]	@ (8004120 <HAL_GPIO_Init+0x354>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	43db      	mvns	r3, r3
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	4013      	ands	r3, r2
 8004062:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d003      	beq.n	8004078 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	4313      	orrs	r3, r2
 8004076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004078:	4a29      	ldr	r2, [pc, #164]	@ (8004120 <HAL_GPIO_Init+0x354>)
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800407e:	4b28      	ldr	r3, [pc, #160]	@ (8004120 <HAL_GPIO_Init+0x354>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	43db      	mvns	r3, r3
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	4013      	ands	r3, r2
 800408c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	4313      	orrs	r3, r2
 80040a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040a2:	4a1f      	ldr	r2, [pc, #124]	@ (8004120 <HAL_GPIO_Init+0x354>)
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004120 <HAL_GPIO_Init+0x354>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	43db      	mvns	r3, r3
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	4013      	ands	r3, r2
 80040b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d003      	beq.n	80040cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040cc:	4a14      	ldr	r2, [pc, #80]	@ (8004120 <HAL_GPIO_Init+0x354>)
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	3301      	adds	r3, #1
 80040d6:	61fb      	str	r3, [r7, #28]
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	2b0f      	cmp	r3, #15
 80040dc:	f67f ae86 	bls.w	8003dec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80040e0:	bf00      	nop
 80040e2:	bf00      	nop
 80040e4:	3724      	adds	r7, #36	@ 0x24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	40023800 	.word	0x40023800
 80040f4:	40013800 	.word	0x40013800
 80040f8:	40020000 	.word	0x40020000
 80040fc:	40020400 	.word	0x40020400
 8004100:	40020800 	.word	0x40020800
 8004104:	40020c00 	.word	0x40020c00
 8004108:	40021000 	.word	0x40021000
 800410c:	40021400 	.word	0x40021400
 8004110:	40021800 	.word	0x40021800
 8004114:	40021c00 	.word	0x40021c00
 8004118:	40022000 	.word	0x40022000
 800411c:	40022400 	.word	0x40022400
 8004120:	40013c00 	.word	0x40013c00

08004124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	460b      	mov	r3, r1
 800412e:	807b      	strh	r3, [r7, #2]
 8004130:	4613      	mov	r3, r2
 8004132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004134:	787b      	ldrb	r3, [r7, #1]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800413a:	887a      	ldrh	r2, [r7, #2]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004140:	e003      	b.n	800414a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004142:	887b      	ldrh	r3, [r7, #2]
 8004144:	041a      	lsls	r2, r3, #16
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	619a      	str	r2, [r3, #24]
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
	...

08004158 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	4603      	mov	r3, r0
 8004160:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004162:	4b08      	ldr	r3, [pc, #32]	@ (8004184 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004164:	695a      	ldr	r2, [r3, #20]
 8004166:	88fb      	ldrh	r3, [r7, #6]
 8004168:	4013      	ands	r3, r2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d006      	beq.n	800417c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800416e:	4a05      	ldr	r2, [pc, #20]	@ (8004184 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004170:	88fb      	ldrh	r3, [r7, #6]
 8004172:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004174:	88fb      	ldrh	r3, [r7, #6]
 8004176:	4618      	mov	r0, r3
 8004178:	f000 f806 	bl	8004188 <HAL_GPIO_EXTI_Callback>
  }
}
 800417c:	bf00      	nop
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	40013c00 	.word	0x40013c00

08004188 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	4603      	mov	r3, r0
 8004190:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
	...

080041a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e08b      	b.n	80042ca <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d106      	bne.n	80041cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7fd fc7c 	bl	8001ac4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2224      	movs	r2, #36	@ 0x24
 80041d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0201 	bic.w	r2, r2, #1
 80041e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80041f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004200:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d107      	bne.n	800421a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004216:	609a      	str	r2, [r3, #8]
 8004218:	e006      	b.n	8004228 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689a      	ldr	r2, [r3, #8]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004226:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	2b02      	cmp	r3, #2
 800422e:	d108      	bne.n	8004242 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800423e:	605a      	str	r2, [r3, #4]
 8004240:	e007      	b.n	8004252 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004250:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6859      	ldr	r1, [r3, #4]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	4b1d      	ldr	r3, [pc, #116]	@ (80042d4 <HAL_I2C_Init+0x134>)
 800425e:	430b      	orrs	r3, r1
 8004260:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68da      	ldr	r2, [r3, #12]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004270:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691a      	ldr	r2, [r3, #16]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	430a      	orrs	r2, r1
 800428a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	69d9      	ldr	r1, [r3, #28]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a1a      	ldr	r2, [r3, #32]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 0201 	orr.w	r2, r2, #1
 80042aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2220      	movs	r2, #32
 80042b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	02008000 	.word	0x02008000

080042d8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d005      	beq.n	8004304 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	68f9      	ldr	r1, [r7, #12]
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	4798      	blx	r3
  }
}
 8004304:	bf00      	nop
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b20      	cmp	r3, #32
 8004320:	d138      	bne.n	8004394 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004328:	2b01      	cmp	r3, #1
 800432a:	d101      	bne.n	8004330 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800432c:	2302      	movs	r3, #2
 800432e:	e032      	b.n	8004396 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2224      	movs	r2, #36	@ 0x24
 800433c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0201 	bic.w	r2, r2, #1
 800434e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800435e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6819      	ldr	r1, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	430a      	orrs	r2, r1
 800436e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f042 0201 	orr.w	r2, r2, #1
 800437e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2220      	movs	r2, #32
 8004384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004390:	2300      	movs	r3, #0
 8004392:	e000      	b.n	8004396 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004394:	2302      	movs	r3, #2
  }
}
 8004396:	4618      	mov	r0, r3
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b085      	sub	sp, #20
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b20      	cmp	r3, #32
 80043b6:	d139      	bne.n	800442c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d101      	bne.n	80043c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80043c2:	2302      	movs	r3, #2
 80043c4:	e033      	b.n	800442e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2224      	movs	r2, #36	@ 0x24
 80043d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0201 	bic.w	r2, r2, #1
 80043e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80043f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	021b      	lsls	r3, r3, #8
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0201 	orr.w	r2, r2, #1
 8004416:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2220      	movs	r2, #32
 800441c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004428:	2300      	movs	r3, #0
 800442a:	e000      	b.n	800442e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800442c:	2302      	movs	r3, #2
  }
}
 800442e:	4618      	mov	r0, r3
 8004430:	3714      	adds	r7, #20
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b084      	sub	sp, #16
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d101      	bne.n	800444c <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e08f      	b.n	800456c <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b00      	cmp	r3, #0
 8004456:	d106      	bne.n	8004466 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f7fd fbbb 	bl	8001bdc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2202      	movs	r2, #2
 800446a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	699a      	ldr	r2, [r3, #24]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800447c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6999      	ldr	r1, [r3, #24]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004492:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	041b      	lsls	r3, r3, #16
 80044a8:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6999      	ldr	r1, [r3, #24]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	041b      	lsls	r3, r3, #16
 80044be:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a19      	ldr	r1, [r3, #32]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d2:	041b      	lsls	r3, r3, #16
 80044d4:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	430a      	orrs	r2, r1
 80044e2:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e8:	041b      	lsls	r3, r3, #16
 80044ea:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004500:	021b      	lsls	r3, r3, #8
 8004502:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800450a:	041b      	lsls	r3, r3, #16
 800450c:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800451c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	4313      	orrs	r3, r2
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004530:	431a      	orrs	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	430a      	orrs	r2, r1
 8004538:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 0206 	orr.w	r2, r2, #6
 8004548:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	699a      	ldr	r2, [r3, #24]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f042 0201 	orr.w	r2, r2, #1
 8004558:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004582:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800458a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f003 0304 	and.w	r3, r3, #4
 8004592:	2b00      	cmp	r3, #0
 8004594:	d023      	beq.n	80045de <HAL_LTDC_IRQHandler+0x6a>
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b00      	cmp	r3, #0
 800459e:	d01e      	beq.n	80045de <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 0204 	bic.w	r2, r2, #4
 80045ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2204      	movs	r2, #4
 80045b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80045be:	f043 0201 	orr.w	r2, r3, #1
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2204      	movs	r2, #4
 80045cc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 f86f 	bl	80046bc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d023      	beq.n	8004630 <HAL_LTDC_IRQHandler+0xbc>
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d01e      	beq.n	8004630 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 0202 	bic.w	r2, r2, #2
 8004600:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2202      	movs	r2, #2
 8004608:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004610:	f043 0202 	orr.w	r2, r3, #2
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2204      	movs	r2, #4
 800461e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f846 	bl	80046bc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d01b      	beq.n	8004672 <HAL_LTDC_IRQHandler+0xfe>
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b00      	cmp	r3, #0
 8004642:	d016      	beq.n	8004672 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0201 	bic.w	r2, r2, #1
 8004652:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2201      	movs	r2, #1
 800465a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f82f 	bl	80046d0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f003 0308 	and.w	r3, r3, #8
 8004678:	2b00      	cmp	r3, #0
 800467a:	d01b      	beq.n	80046b4 <HAL_LTDC_IRQHandler+0x140>
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f003 0308 	and.w	r3, r3, #8
 8004682:	2b00      	cmp	r3, #0
 8004684:	d016      	beq.n	80046b4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 0208 	bic.w	r2, r2, #8
 8004694:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2208      	movs	r2, #8
 800469c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f818 	bl	80046e4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80046b4:	bf00      	nop
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80046f8:	b5b0      	push	{r4, r5, r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800470a:	2b01      	cmp	r3, #1
 800470c:	d101      	bne.n	8004712 <HAL_LTDC_ConfigLayer+0x1a>
 800470e:	2302      	movs	r3, #2
 8004710:	e02c      	b.n	800476c <HAL_LTDC_ConfigLayer+0x74>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2202      	movs	r2, #2
 800471e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2134      	movs	r1, #52	@ 0x34
 8004728:	fb01 f303 	mul.w	r3, r1, r3
 800472c:	4413      	add	r3, r2
 800472e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	4614      	mov	r4, r2
 8004736:	461d      	mov	r5, r3
 8004738:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800473a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800473c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800473e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004740:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004744:	682b      	ldr	r3, [r5, #0]
 8004746:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	68b9      	ldr	r1, [r7, #8]
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 f811 	bl	8004774 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2201      	movs	r2, #1
 8004758:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bdb0      	pop	{r4, r5, r7, pc}

08004774 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004774:	b480      	push	{r7}
 8004776:	b089      	sub	sp, #36	@ 0x24
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	0c1b      	lsrs	r3, r3, #16
 800478c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004790:	4413      	add	r3, r2
 8004792:	041b      	lsls	r3, r3, #16
 8004794:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	461a      	mov	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	01db      	lsls	r3, r3, #7
 80047a0:	4413      	add	r3, r2
 80047a2:	3384      	adds	r3, #132	@ 0x84
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	6812      	ldr	r2, [r2, #0]
 80047aa:	4611      	mov	r1, r2
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	01d2      	lsls	r2, r2, #7
 80047b0:	440a      	add	r2, r1
 80047b2:	3284      	adds	r2, #132	@ 0x84
 80047b4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80047b8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	0c1b      	lsrs	r3, r3, #16
 80047c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80047ca:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80047cc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4619      	mov	r1, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	01db      	lsls	r3, r3, #7
 80047d8:	440b      	add	r3, r1
 80047da:	3384      	adds	r3, #132	@ 0x84
 80047dc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80047e2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	68da      	ldr	r2, [r3, #12]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047f2:	4413      	add	r3, r2
 80047f4:	041b      	lsls	r3, r3, #16
 80047f6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	461a      	mov	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	01db      	lsls	r3, r3, #7
 8004802:	4413      	add	r3, r2
 8004804:	3384      	adds	r3, #132	@ 0x84
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	6812      	ldr	r2, [r2, #0]
 800480c:	4611      	mov	r1, r2
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	01d2      	lsls	r2, r2, #7
 8004812:	440a      	add	r2, r1
 8004814:	3284      	adds	r2, #132	@ 0x84
 8004816:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800481a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	689a      	ldr	r2, [r3, #8]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800482a:	4413      	add	r3, r2
 800482c:	1c5a      	adds	r2, r3, #1
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4619      	mov	r1, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	01db      	lsls	r3, r3, #7
 8004838:	440b      	add	r3, r1
 800483a:	3384      	adds	r3, #132	@ 0x84
 800483c:	4619      	mov	r1, r3
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	4313      	orrs	r3, r2
 8004842:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	461a      	mov	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	01db      	lsls	r3, r3, #7
 800484e:	4413      	add	r3, r2
 8004850:	3384      	adds	r3, #132	@ 0x84
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	6812      	ldr	r2, [r2, #0]
 8004858:	4611      	mov	r1, r2
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	01d2      	lsls	r2, r2, #7
 800485e:	440a      	add	r2, r1
 8004860:	3284      	adds	r2, #132	@ 0x84
 8004862:	f023 0307 	bic.w	r3, r3, #7
 8004866:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	461a      	mov	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	01db      	lsls	r3, r3, #7
 8004872:	4413      	add	r3, r2
 8004874:	3384      	adds	r3, #132	@ 0x84
 8004876:	461a      	mov	r2, r3
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004884:	021b      	lsls	r3, r3, #8
 8004886:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800488e:	041b      	lsls	r3, r3, #16
 8004890:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	061b      	lsls	r3, r3, #24
 8004898:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80048a0:	461a      	mov	r2, r3
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	431a      	orrs	r2, r3
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	431a      	orrs	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4619      	mov	r1, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	01db      	lsls	r3, r3, #7
 80048b4:	440b      	add	r3, r1
 80048b6:	3384      	adds	r3, #132	@ 0x84
 80048b8:	4619      	mov	r1, r3
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	4313      	orrs	r3, r2
 80048be:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	461a      	mov	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	01db      	lsls	r3, r3, #7
 80048ca:	4413      	add	r3, r2
 80048cc:	3384      	adds	r3, #132	@ 0x84
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	6812      	ldr	r2, [r2, #0]
 80048d4:	4611      	mov	r1, r2
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	01d2      	lsls	r2, r2, #7
 80048da:	440a      	add	r2, r1
 80048dc:	3284      	adds	r2, #132	@ 0x84
 80048de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80048e2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	461a      	mov	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	01db      	lsls	r3, r3, #7
 80048ee:	4413      	add	r3, r2
 80048f0:	3384      	adds	r3, #132	@ 0x84
 80048f2:	461a      	mov	r2, r3
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	461a      	mov	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	01db      	lsls	r3, r3, #7
 8004904:	4413      	add	r3, r2
 8004906:	3384      	adds	r3, #132	@ 0x84
 8004908:	69da      	ldr	r2, [r3, #28]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4619      	mov	r1, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	01db      	lsls	r3, r3, #7
 8004914:	440b      	add	r3, r1
 8004916:	3384      	adds	r3, #132	@ 0x84
 8004918:	4619      	mov	r1, r3
 800491a:	4b4f      	ldr	r3, [pc, #316]	@ (8004a58 <LTDC_SetConfig+0x2e4>)
 800491c:	4013      	ands	r3, r2
 800491e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	69da      	ldr	r2, [r3, #28]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	68f9      	ldr	r1, [r7, #12]
 800492a:	6809      	ldr	r1, [r1, #0]
 800492c:	4608      	mov	r0, r1
 800492e:	6879      	ldr	r1, [r7, #4]
 8004930:	01c9      	lsls	r1, r1, #7
 8004932:	4401      	add	r1, r0
 8004934:	3184      	adds	r1, #132	@ 0x84
 8004936:	4313      	orrs	r3, r2
 8004938:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	461a      	mov	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	01db      	lsls	r3, r3, #7
 8004944:	4413      	add	r3, r2
 8004946:	3384      	adds	r3, #132	@ 0x84
 8004948:	461a      	mov	r2, r3
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494e:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d102      	bne.n	800495e <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 8004958:	2304      	movs	r3, #4
 800495a:	61fb      	str	r3, [r7, #28]
 800495c:	e01b      	b.n	8004996 <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d102      	bne.n	800496c <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 8004966:	2303      	movs	r3, #3
 8004968:	61fb      	str	r3, [r7, #28]
 800496a:	e014      	b.n	8004996 <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	2b04      	cmp	r3, #4
 8004972:	d00b      	beq.n	800498c <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004978:	2b02      	cmp	r3, #2
 800497a:	d007      	beq.n	800498c <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004980:	2b03      	cmp	r3, #3
 8004982:	d003      	beq.n	800498c <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004988:	2b07      	cmp	r3, #7
 800498a:	d102      	bne.n	8004992 <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 800498c:	2302      	movs	r3, #2
 800498e:	61fb      	str	r3, [r7, #28]
 8004990:	e001      	b.n	8004996 <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 8004992:	2301      	movs	r3, #1
 8004994:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	461a      	mov	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	01db      	lsls	r3, r3, #7
 80049a0:	4413      	add	r3, r2
 80049a2:	3384      	adds	r3, #132	@ 0x84
 80049a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	6812      	ldr	r2, [r2, #0]
 80049aa:	4611      	mov	r1, r2
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	01d2      	lsls	r2, r2, #7
 80049b0:	440a      	add	r2, r1
 80049b2:	3284      	adds	r2, #132	@ 0x84
 80049b4:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80049b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049be:	69fa      	ldr	r2, [r7, #28]
 80049c0:	fb02 f303 	mul.w	r3, r2, r3
 80049c4:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	6859      	ldr	r1, [r3, #4]
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	1acb      	subs	r3, r1, r3
 80049d0:	69f9      	ldr	r1, [r7, #28]
 80049d2:	fb01 f303 	mul.w	r3, r1, r3
 80049d6:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80049d8:	68f9      	ldr	r1, [r7, #12]
 80049da:	6809      	ldr	r1, [r1, #0]
 80049dc:	4608      	mov	r0, r1
 80049de:	6879      	ldr	r1, [r7, #4]
 80049e0:	01c9      	lsls	r1, r1, #7
 80049e2:	4401      	add	r1, r0
 80049e4:	3184      	adds	r1, #132	@ 0x84
 80049e6:	4313      	orrs	r3, r2
 80049e8:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	461a      	mov	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	01db      	lsls	r3, r3, #7
 80049f4:	4413      	add	r3, r2
 80049f6:	3384      	adds	r3, #132	@ 0x84
 80049f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4619      	mov	r1, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	01db      	lsls	r3, r3, #7
 8004a04:	440b      	add	r3, r1
 8004a06:	3384      	adds	r3, #132	@ 0x84
 8004a08:	4619      	mov	r1, r3
 8004a0a:	4b14      	ldr	r3, [pc, #80]	@ (8004a5c <LTDC_SetConfig+0x2e8>)
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	461a      	mov	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	01db      	lsls	r3, r3, #7
 8004a1a:	4413      	add	r3, r2
 8004a1c:	3384      	adds	r3, #132	@ 0x84
 8004a1e:	461a      	mov	r2, r3
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a24:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	01db      	lsls	r3, r3, #7
 8004a30:	4413      	add	r3, r2
 8004a32:	3384      	adds	r3, #132	@ 0x84
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	6812      	ldr	r2, [r2, #0]
 8004a3a:	4611      	mov	r1, r2
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	01d2      	lsls	r2, r2, #7
 8004a40:	440a      	add	r2, r1
 8004a42:	3284      	adds	r2, #132	@ 0x84
 8004a44:	f043 0301 	orr.w	r3, r3, #1
 8004a48:	6013      	str	r3, [r2, #0]
}
 8004a4a:	bf00      	nop
 8004a4c:	3724      	adds	r7, #36	@ 0x24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	fffff8f8 	.word	0xfffff8f8
 8004a5c:	fffff800 	.word	0xfffff800

08004a60 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004a66:	2300      	movs	r3, #0
 8004a68:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a6a:	4b23      	ldr	r3, [pc, #140]	@ (8004af8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6e:	4a22      	ldr	r2, [pc, #136]	@ (8004af8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a74:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a76:	4b20      	ldr	r3, [pc, #128]	@ (8004af8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a7e:	603b      	str	r3, [r7, #0]
 8004a80:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004a82:	4b1e      	ldr	r3, [pc, #120]	@ (8004afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a1d      	ldr	r2, [pc, #116]	@ (8004afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a8c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a8e:	f7fd fdcf 	bl	8002630 <HAL_GetTick>
 8004a92:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a94:	e009      	b.n	8004aaa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a96:	f7fd fdcb 	bl	8002630 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004aa4:	d901      	bls.n	8004aaa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e022      	b.n	8004af0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004aaa:	4b14      	ldr	r3, [pc, #80]	@ (8004afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ab2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ab6:	d1ee      	bne.n	8004a96 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004ab8:	4b10      	ldr	r3, [pc, #64]	@ (8004afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a0f      	ldr	r2, [pc, #60]	@ (8004afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004abe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ac2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ac4:	f7fd fdb4 	bl	8002630 <HAL_GetTick>
 8004ac8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004aca:	e009      	b.n	8004ae0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004acc:	f7fd fdb0 	bl	8002630 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ada:	d901      	bls.n	8004ae0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e007      	b.n	8004af0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ae0:	4b06      	ldr	r3, [pc, #24]	@ (8004afc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ae8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004aec:	d1ee      	bne.n	8004acc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	40023800 	.word	0x40023800
 8004afc:	40007000 	.word	0x40007000

08004b00 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af02      	add	r7, sp, #8
 8004b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004b08:	f7fd fd92 	bl	8002630 <HAL_GetTick>
 8004b0c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e067      	b.n	8004be8 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10b      	bne.n	8004b3c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f7fd f89b 	bl	8001c68 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004b32:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 fac4 	bl	80050c4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	021a      	lsls	r2, r3, #8
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	2120      	movs	r1, #32
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 fabc 	bl	80050e0 <QSPI_WaitFlagStateUntilTimeout>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004b6c:	7afb      	ldrb	r3, [r7, #11]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d135      	bne.n	8004bde <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	4b1d      	ldr	r3, [pc, #116]	@ (8004bf0 <HAL_QSPI_Init+0xf0>)
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6852      	ldr	r2, [r2, #4]
 8004b80:	0611      	lsls	r1, r2, #24
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	68d2      	ldr	r2, [r2, #12]
 8004b86:	4311      	orrs	r1, r2
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	69d2      	ldr	r2, [r2, #28]
 8004b8c:	4311      	orrs	r1, r2
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	6a12      	ldr	r2, [r2, #32]
 8004b92:	4311      	orrs	r1, r2
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	6812      	ldr	r2, [r2, #0]
 8004b98:	430b      	orrs	r3, r1
 8004b9a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	4b14      	ldr	r3, [pc, #80]	@ (8004bf4 <HAL_QSPI_Init+0xf4>)
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	6912      	ldr	r2, [r2, #16]
 8004baa:	0411      	lsls	r1, r2, #16
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6952      	ldr	r2, [r2, #20]
 8004bb0:	4311      	orrs	r1, r2
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6992      	ldr	r2, [r2, #24]
 8004bb6:	4311      	orrs	r1, r2
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6812      	ldr	r2, [r2, #0]
 8004bbc:	430b      	orrs	r3, r1
 8004bbe:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f042 0201 	orr.w	r2, r2, #1
 8004bce:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8004be6:	7afb      	ldrb	r3, [r7, #11]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	00ffff2f 	.word	0x00ffff2f
 8004bf4:	ffe0f8fe 	.word	0xffe0f8fe

08004bf8 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b088      	sub	sp, #32
 8004bfc:	af02      	add	r7, sp, #8
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004c04:	f7fd fd14 	bl	8002630 <HAL_GetTick>
 8004c08:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d101      	bne.n	8004c1a <HAL_QSPI_Command+0x22>
 8004c16:	2302      	movs	r3, #2
 8004c18:	e048      	b.n	8004cac <HAL_QSPI_Command+0xb4>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d137      	bne.n	8004c9e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2202      	movs	r2, #2
 8004c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	2200      	movs	r2, #0
 8004c44:	2120      	movs	r1, #32
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 fa4a 	bl	80050e0 <QSPI_WaitFlagStateUntilTimeout>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004c50:	7dfb      	ldrb	r3, [r7, #23]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d125      	bne.n	8004ca2 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004c56:	2200      	movs	r2, #0
 8004c58:	68b9      	ldr	r1, [r7, #8]
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f000 fa77 	bl	800514e <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d115      	bne.n	8004c94 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	2102      	movs	r1, #2
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 fa34 	bl	80050e0 <QSPI_WaitFlagStateUntilTimeout>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8004c7c:	7dfb      	ldrb	r3, [r7, #23]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10f      	bne.n	8004ca2 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2202      	movs	r2, #2
 8004c88:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c92:	e006      	b.n	8004ca2 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c9c:	e001      	b.n	8004ca2 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8004caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3718      	adds	r7, #24
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b08a      	sub	sp, #40	@ 0x28
 8004cb8:	af02      	add	r7, sp, #8
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8004cc4:	f7fd fcb4 	bl	8002630 <HAL_GetTick>
 8004cc8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	3320      	adds	r3, #32
 8004cd0:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d101      	bne.n	8004ce2 <HAL_QSPI_Transmit+0x2e>
 8004cde:	2302      	movs	r3, #2
 8004ce0:	e076      	b.n	8004dd0 <HAL_QSPI_Transmit+0x11c>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d165      	bne.n	8004dc2 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d056      	beq.n	8004db0 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2212      	movs	r2, #18
 8004d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	1c5a      	adds	r2, r3, #1
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	629a      	str	r2, [r3, #40]	@ 0x28
      hqspi->pTxBuffPtr = pData;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	695a      	ldr	r2, [r3, #20]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8004d36:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8004d38:	e01b      	b.n	8004d72 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	2201      	movs	r2, #1
 8004d42:	2104      	movs	r1, #4
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 f9cb 	bl	80050e0 <QSPI_WaitFlagStateUntilTimeout>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8004d4e:	7ffb      	ldrb	r3, [r7, #31]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d113      	bne.n	8004d7c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d58:	781a      	ldrb	r2, [r3, #0]
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d62:	1c5a      	adds	r2, r3, #1
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	625a      	str	r2, [r3, #36]	@ 0x24
        hqspi->TxXferCount--;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6c:	1e5a      	subs	r2, r3, #1
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	62da      	str	r2, [r3, #44]	@ 0x2c
      while(hqspi->TxXferCount > 0U)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1df      	bne.n	8004d3a <HAL_QSPI_Transmit+0x86>
 8004d7a:	e000      	b.n	8004d7e <HAL_QSPI_Transmit+0xca>
          break;
 8004d7c:	bf00      	nop
      }

      if (status == HAL_OK)
 8004d7e:	7ffb      	ldrb	r3, [r7, #31]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d110      	bne.n	8004da6 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	2102      	movs	r1, #2
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f000 f9a6 	bl	80050e0 <QSPI_WaitFlagStateUntilTimeout>
 8004d94:	4603      	mov	r3, r0
 8004d96:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8004d98:	7ffb      	ldrb	r3, [r7, #31]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d103      	bne.n	8004da6 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2202      	movs	r2, #2
 8004da4:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004dae:	e00a      	b.n	8004dc6 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004db4:	f043 0208 	orr.w	r2, r3, #8
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	77fb      	strb	r3, [r7, #31]
 8004dc0:	e001      	b.n	8004dc6 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 8004dce:	7ffb      	ldrb	r3, [r7, #31]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3720      	adds	r7, #32
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08a      	sub	sp, #40	@ 0x28
 8004ddc:	af02      	add	r7, sp, #8
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004de4:	2300      	movs	r3, #0
 8004de6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8004de8:	f7fd fc22 	bl	8002630 <HAL_GetTick>
 8004dec:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	3320      	adds	r3, #32
 8004dfc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d101      	bne.n	8004e0e <HAL_QSPI_Receive+0x36>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	e07d      	b.n	8004f0a <HAL_QSPI_Receive+0x132>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d16c      	bne.n	8004efc <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d05d      	beq.n	8004eea <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2222      	movs	r2, #34	@ 0x22
 8004e32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	639a      	str	r2, [r3, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	635a      	str	r2, [r3, #52]	@ 0x34
      hqspi->pRxBuffPtr = pData;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004e66:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8004e70:	e01c      	b.n	8004eac <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	2106      	movs	r1, #6
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f000 f92f 	bl	80050e0 <QSPI_WaitFlagStateUntilTimeout>
 8004e82:	4603      	mov	r3, r0
 8004e84:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8004e86:	7ffb      	ldrb	r3, [r7, #31]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d114      	bne.n	8004eb6 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	7812      	ldrb	r2, [r2, #0]
 8004e94:	b2d2      	uxtb	r2, r2
 8004e96:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e9c:	1c5a      	adds	r2, r3, #1
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	631a      	str	r2, [r3, #48]	@ 0x30
        hqspi->RxXferCount--;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea6:	1e5a      	subs	r2, r3, #1
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	639a      	str	r2, [r3, #56]	@ 0x38
      while(hqspi->RxXferCount > 0U)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1de      	bne.n	8004e72 <HAL_QSPI_Receive+0x9a>
 8004eb4:	e000      	b.n	8004eb8 <HAL_QSPI_Receive+0xe0>
          break;
 8004eb6:	bf00      	nop
      }

      if (status == HAL_OK)
 8004eb8:	7ffb      	ldrb	r3, [r7, #31]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d110      	bne.n	8004ee0 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	2102      	movs	r1, #2
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f000 f909 	bl	80050e0 <QSPI_WaitFlagStateUntilTimeout>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8004ed2:	7ffb      	ldrb	r3, [r7, #31]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d103      	bne.n	8004ee0 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2202      	movs	r2, #2
 8004ede:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ee8:	e00a      	b.n	8004f00 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eee:	f043 0208 	orr.w	r2, r3, #8
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	77fb      	strb	r3, [r7, #31]
 8004efa:	e001      	b.n	8004f00 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8004efc:	2302      	movs	r3, #2
 8004efe:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 8004f08:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3720      	adds	r7, #32
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b088      	sub	sp, #32
 8004f16:	af02      	add	r7, sp, #8
 8004f18:	60f8      	str	r0, [r7, #12]
 8004f1a:	60b9      	str	r1, [r7, #8]
 8004f1c:	607a      	str	r2, [r7, #4]
 8004f1e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004f20:	f7fd fb86 	bl	8002630 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d101      	bne.n	8004f36 <HAL_QSPI_AutoPolling+0x24>
 8004f32:	2302      	movs	r3, #2
 8004f34:	e060      	b.n	8004ff8 <HAL_QSPI_AutoPolling+0xe6>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d14f      	bne.n	8004fea <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2242      	movs	r2, #66	@ 0x42
 8004f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	2120      	movs	r1, #32
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f000 f8bc 	bl	80050e0 <QSPI_WaitFlagStateUntilTimeout>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004f6c:	7dfb      	ldrb	r3, [r7, #23]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d13d      	bne.n	8004fee <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	6812      	ldr	r2, [r2, #0]
 8004f7a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6852      	ldr	r2, [r2, #4]
 8004f84:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	6892      	ldr	r2, [r2, #8]
 8004f8e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8004fa8:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	629a      	str	r2, [r3, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8004fb2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004fb6:	68b9      	ldr	r1, [r7, #8]
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f000 f8c8 	bl	800514e <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	2108      	movs	r1, #8
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f000 f889 	bl	80050e0 <QSPI_WaitFlagStateUntilTimeout>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8004fd2:	7dfb      	ldrb	r3, [r7, #23]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10a      	bne.n	8004fee <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2208      	movs	r2, #8
 8004fde:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004fe8:	e001      	b.n	8004fee <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8004fea:	2302      	movs	r3, #2
 8004fec:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8004ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3718      	adds	r7, #24
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b088      	sub	sp, #32
 8005004:	af02      	add	r7, sp, #8
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800500c:	f7fd fb10 	bl	8002630 <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b01      	cmp	r3, #1
 800501c:	d101      	bne.n	8005022 <HAL_QSPI_MemoryMapped+0x22>
 800501e:	2302      	movs	r3, #2
 8005020:	e04c      	b.n	80050bc <HAL_QSPI_MemoryMapped+0xbc>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b01      	cmp	r3, #1
 8005034:	d13b      	bne.n	80050ae <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2282      	movs	r2, #130	@ 0x82
 8005040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	2200      	movs	r2, #0
 800504e:	2120      	movs	r1, #32
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f000 f845 	bl	80050e0 <QSPI_WaitFlagStateUntilTimeout>
 8005056:	4603      	mov	r3, r0
 8005058:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800505a:	7dfb      	ldrb	r3, [r7, #23]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d128      	bne.n	80050b2 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
      MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f023 0108 	bic.w	r1, r3, #8
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	601a      	str	r2, [r3, #0]

      if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	2b08      	cmp	r3, #8
 800507c:	d110      	bne.n	80050a0 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	6812      	ldr	r2, [r2, #0]
 8005086:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2210      	movs	r2, #16
 800508e:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800509e:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 80050a0:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80050a4:	68b9      	ldr	r1, [r7, #8]
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f000 f851 	bl	800514e <QSPI_Config>
 80050ac:	e001      	b.n	80050b2 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 80050ae:	2302      	movs	r3, #2
 80050b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 80050ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3718      	adds	r7, #24
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	603b      	str	r3, [r7, #0]
 80050ec:	4613      	mov	r3, r2
 80050ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80050f0:	e01a      	b.n	8005128 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f8:	d016      	beq.n	8005128 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050fa:	f7fd fa99 	bl	8002630 <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	429a      	cmp	r2, r3
 8005108:	d302      	bcc.n	8005110 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10b      	bne.n	8005128 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2204      	movs	r2, #4
 8005114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800511c:	f043 0201 	orr.w	r2, r3, #1
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e00e      	b.n	8005146 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689a      	ldr	r2, [r3, #8]
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	4013      	ands	r3, r2
 8005132:	2b00      	cmp	r3, #0
 8005134:	bf14      	ite	ne
 8005136:	2301      	movne	r3, #1
 8005138:	2300      	moveq	r3, #0
 800513a:	b2db      	uxtb	r3, r3
 800513c:	461a      	mov	r2, r3
 800513e:	79fb      	ldrb	r3, [r7, #7]
 8005140:	429a      	cmp	r2, r3
 8005142:	d1d6      	bne.n	80050f2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800514e:	b480      	push	{r7}
 8005150:	b085      	sub	sp, #20
 8005152:	af00      	add	r7, sp, #0
 8005154:	60f8      	str	r0, [r7, #12]
 8005156:	60b9      	str	r1, [r7, #8]
 8005158:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515e:	2b00      	cmp	r3, #0
 8005160:	d009      	beq.n	8005176 <QSPI_Config+0x28>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005168:	d005      	beq.n	8005176 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	3a01      	subs	r2, #1
 8005174:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	2b00      	cmp	r3, #0
 800517c:	f000 80c1 	beq.w	8005302 <QSPI_Config+0x1b4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d063      	beq.n	8005250 <QSPI_Config+0x102>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	6892      	ldr	r2, [r2, #8]
 8005190:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	69db      	ldr	r3, [r3, #28]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d031      	beq.n	80051fe <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051a2:	431a      	orrs	r2, r3
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051a8:	431a      	orrs	r2, r3
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ae:	431a      	orrs	r2, r3
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	049b      	lsls	r3, r3, #18
 80051b6:	431a      	orrs	r2, r3
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	431a      	orrs	r2, r3
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	431a      	orrs	r2, r3
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	431a      	orrs	r2, r3
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	431a      	orrs	r2, r3
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	431a      	orrs	r2, r3
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	ea42 0103 	orr.w	r1, r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	430a      	orrs	r2, r1
 80051e6:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80051ee:	f000 813f 	beq.w	8005470 <QSPI_Config+0x322>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	6852      	ldr	r2, [r2, #4]
 80051fa:	619a      	str	r2, [r3, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 80051fc:	e138      	b.n	8005470 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005206:	431a      	orrs	r2, r3
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800520c:	431a      	orrs	r2, r3
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005212:	431a      	orrs	r2, r3
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	049b      	lsls	r3, r3, #18
 800521a:	431a      	orrs	r2, r3
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	431a      	orrs	r2, r3
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	431a      	orrs	r2, r3
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	69db      	ldr	r3, [r3, #28]
 800522c:	431a      	orrs	r2, r3
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	431a      	orrs	r2, r3
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	ea42 0103 	orr.w	r1, r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	430a      	orrs	r2, r1
 8005244:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2200      	movs	r2, #0
 800524c:	619a      	str	r2, [r3, #24]
}
 800524e:	e10f      	b.n	8005470 <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d02e      	beq.n	80052b6 <QSPI_Config+0x168>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005260:	431a      	orrs	r2, r3
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005266:	431a      	orrs	r2, r3
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526c:	431a      	orrs	r2, r3
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	049b      	lsls	r3, r3, #18
 8005274:	431a      	orrs	r2, r3
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	431a      	orrs	r2, r3
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	431a      	orrs	r2, r3
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	431a      	orrs	r2, r3
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	431a      	orrs	r2, r3
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	ea42 0103 	orr.w	r1, r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	430a      	orrs	r2, r1
 800529e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80052a6:	f000 80e3 	beq.w	8005470 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	6852      	ldr	r2, [r2, #4]
 80052b2:	619a      	str	r2, [r3, #24]
}
 80052b4:	e0dc      	b.n	8005470 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052be:	431a      	orrs	r2, r3
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052c4:	431a      	orrs	r2, r3
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ca:	431a      	orrs	r2, r3
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	049b      	lsls	r3, r3, #18
 80052d2:	431a      	orrs	r2, r3
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	431a      	orrs	r2, r3
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	431a      	orrs	r2, r3
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	431a      	orrs	r2, r3
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	ea42 0103 	orr.w	r1, r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2200      	movs	r2, #0
 80052fe:	619a      	str	r2, [r3, #24]
}
 8005300:	e0b6      	b.n	8005470 <QSPI_Config+0x322>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d05d      	beq.n	80053c6 <QSPI_Config+0x278>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	6892      	ldr	r2, [r2, #8]
 8005312:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d02e      	beq.n	800537a <QSPI_Config+0x22c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005324:	431a      	orrs	r2, r3
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800532a:	431a      	orrs	r2, r3
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005330:	431a      	orrs	r2, r3
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	049b      	lsls	r3, r3, #18
 8005338:	431a      	orrs	r2, r3
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	431a      	orrs	r2, r3
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	431a      	orrs	r2, r3
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	431a      	orrs	r2, r3
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	69db      	ldr	r3, [r3, #28]
 8005350:	431a      	orrs	r2, r3
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	ea42 0103 	orr.w	r1, r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	430a      	orrs	r2, r1
 8005362:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800536a:	f000 8081 	beq.w	8005470 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	6852      	ldr	r2, [r2, #4]
 8005376:	619a      	str	r2, [r3, #24]
}
 8005378:	e07a      	b.n	8005470 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005382:	431a      	orrs	r2, r3
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005388:	431a      	orrs	r2, r3
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538e:	431a      	orrs	r2, r3
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	049b      	lsls	r3, r3, #18
 8005396:	431a      	orrs	r2, r3
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	431a      	orrs	r2, r3
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	431a      	orrs	r2, r3
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	69db      	ldr	r3, [r3, #28]
 80053a8:	431a      	orrs	r2, r3
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	ea42 0103 	orr.w	r1, r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2200      	movs	r2, #0
 80053c2:	619a      	str	r2, [r3, #24]
}
 80053c4:	e054      	b.n	8005470 <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d02a      	beq.n	8005424 <QSPI_Config+0x2d6>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d6:	431a      	orrs	r2, r3
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053dc:	431a      	orrs	r2, r3
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e2:	431a      	orrs	r2, r3
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	049b      	lsls	r3, r3, #18
 80053ea:	431a      	orrs	r2, r3
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	6a1b      	ldr	r3, [r3, #32]
 80053f0:	431a      	orrs	r2, r3
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	431a      	orrs	r2, r3
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	69db      	ldr	r3, [r3, #28]
 80053fc:	431a      	orrs	r2, r3
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	ea42 0103 	orr.w	r1, r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	430a      	orrs	r2, r1
 800540e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005416:	d02b      	beq.n	8005470 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	6852      	ldr	r2, [r2, #4]
 8005420:	619a      	str	r2, [r3, #24]
}
 8005422:	e025      	b.n	8005470 <QSPI_Config+0x322>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005428:	2b00      	cmp	r3, #0
 800542a:	d021      	beq.n	8005470 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005434:	431a      	orrs	r2, r3
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800543a:	431a      	orrs	r2, r3
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005440:	431a      	orrs	r2, r3
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	049b      	lsls	r3, r3, #18
 8005448:	431a      	orrs	r2, r3
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	431a      	orrs	r2, r3
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	69db      	ldr	r3, [r3, #28]
 8005454:	431a      	orrs	r2, r3
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	ea42 0103 	orr.w	r1, r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	430a      	orrs	r2, r1
 8005466:	615a      	str	r2, [r3, #20]
          CLEAR_REG(hqspi->Instance->AR);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2200      	movs	r2, #0
 800546e:	619a      	str	r2, [r3, #24]
}
 8005470:	bf00      	nop
 8005472:	3714      	adds	r7, #20
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005484:	2300      	movs	r3, #0
 8005486:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e29b      	b.n	80059ca <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	f000 8087 	beq.w	80055ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80054a0:	4b96      	ldr	r3, [pc, #600]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f003 030c 	and.w	r3, r3, #12
 80054a8:	2b04      	cmp	r3, #4
 80054aa:	d00c      	beq.n	80054c6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054ac:	4b93      	ldr	r3, [pc, #588]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f003 030c 	and.w	r3, r3, #12
 80054b4:	2b08      	cmp	r3, #8
 80054b6:	d112      	bne.n	80054de <HAL_RCC_OscConfig+0x62>
 80054b8:	4b90      	ldr	r3, [pc, #576]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054c4:	d10b      	bne.n	80054de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054c6:	4b8d      	ldr	r3, [pc, #564]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d06c      	beq.n	80055ac <HAL_RCC_OscConfig+0x130>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d168      	bne.n	80055ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e275      	b.n	80059ca <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054e6:	d106      	bne.n	80054f6 <HAL_RCC_OscConfig+0x7a>
 80054e8:	4b84      	ldr	r3, [pc, #528]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a83      	ldr	r2, [pc, #524]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 80054ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054f2:	6013      	str	r3, [r2, #0]
 80054f4:	e02e      	b.n	8005554 <HAL_RCC_OscConfig+0xd8>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10c      	bne.n	8005518 <HAL_RCC_OscConfig+0x9c>
 80054fe:	4b7f      	ldr	r3, [pc, #508]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a7e      	ldr	r2, [pc, #504]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 8005504:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005508:	6013      	str	r3, [r2, #0]
 800550a:	4b7c      	ldr	r3, [pc, #496]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a7b      	ldr	r2, [pc, #492]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 8005510:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005514:	6013      	str	r3, [r2, #0]
 8005516:	e01d      	b.n	8005554 <HAL_RCC_OscConfig+0xd8>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005520:	d10c      	bne.n	800553c <HAL_RCC_OscConfig+0xc0>
 8005522:	4b76      	ldr	r3, [pc, #472]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a75      	ldr	r2, [pc, #468]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 8005528:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800552c:	6013      	str	r3, [r2, #0]
 800552e:	4b73      	ldr	r3, [pc, #460]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a72      	ldr	r2, [pc, #456]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 8005534:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005538:	6013      	str	r3, [r2, #0]
 800553a:	e00b      	b.n	8005554 <HAL_RCC_OscConfig+0xd8>
 800553c:	4b6f      	ldr	r3, [pc, #444]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a6e      	ldr	r2, [pc, #440]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 8005542:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005546:	6013      	str	r3, [r2, #0]
 8005548:	4b6c      	ldr	r3, [pc, #432]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a6b      	ldr	r2, [pc, #428]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 800554e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005552:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d013      	beq.n	8005584 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555c:	f7fd f868 	bl	8002630 <HAL_GetTick>
 8005560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005562:	e008      	b.n	8005576 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005564:	f7fd f864 	bl	8002630 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b64      	cmp	r3, #100	@ 0x64
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e229      	b.n	80059ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005576:	4b61      	ldr	r3, [pc, #388]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d0f0      	beq.n	8005564 <HAL_RCC_OscConfig+0xe8>
 8005582:	e014      	b.n	80055ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005584:	f7fd f854 	bl	8002630 <HAL_GetTick>
 8005588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800558a:	e008      	b.n	800559e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800558c:	f7fd f850 	bl	8002630 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b64      	cmp	r3, #100	@ 0x64
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e215      	b.n	80059ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800559e:	4b57      	ldr	r3, [pc, #348]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1f0      	bne.n	800558c <HAL_RCC_OscConfig+0x110>
 80055aa:	e000      	b.n	80055ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d069      	beq.n	800568e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80055ba:	4b50      	ldr	r3, [pc, #320]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f003 030c 	and.w	r3, r3, #12
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00b      	beq.n	80055de <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055c6:	4b4d      	ldr	r3, [pc, #308]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f003 030c 	and.w	r3, r3, #12
 80055ce:	2b08      	cmp	r3, #8
 80055d0:	d11c      	bne.n	800560c <HAL_RCC_OscConfig+0x190>
 80055d2:	4b4a      	ldr	r3, [pc, #296]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d116      	bne.n	800560c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055de:	4b47      	ldr	r3, [pc, #284]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d005      	beq.n	80055f6 <HAL_RCC_OscConfig+0x17a>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d001      	beq.n	80055f6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e1e9      	b.n	80059ca <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055f6:	4b41      	ldr	r3, [pc, #260]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	00db      	lsls	r3, r3, #3
 8005604:	493d      	ldr	r1, [pc, #244]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 8005606:	4313      	orrs	r3, r2
 8005608:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800560a:	e040      	b.n	800568e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d023      	beq.n	800565c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005614:	4b39      	ldr	r3, [pc, #228]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a38      	ldr	r2, [pc, #224]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 800561a:	f043 0301 	orr.w	r3, r3, #1
 800561e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005620:	f7fd f806 	bl	8002630 <HAL_GetTick>
 8005624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005626:	e008      	b.n	800563a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005628:	f7fd f802 	bl	8002630 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b02      	cmp	r3, #2
 8005634:	d901      	bls.n	800563a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e1c7      	b.n	80059ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800563a:	4b30      	ldr	r3, [pc, #192]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d0f0      	beq.n	8005628 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005646:	4b2d      	ldr	r3, [pc, #180]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	00db      	lsls	r3, r3, #3
 8005654:	4929      	ldr	r1, [pc, #164]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 8005656:	4313      	orrs	r3, r2
 8005658:	600b      	str	r3, [r1, #0]
 800565a:	e018      	b.n	800568e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800565c:	4b27      	ldr	r3, [pc, #156]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a26      	ldr	r2, [pc, #152]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 8005662:	f023 0301 	bic.w	r3, r3, #1
 8005666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005668:	f7fc ffe2 	bl	8002630 <HAL_GetTick>
 800566c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800566e:	e008      	b.n	8005682 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005670:	f7fc ffde 	bl	8002630 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b02      	cmp	r3, #2
 800567c:	d901      	bls.n	8005682 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e1a3      	b.n	80059ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005682:	4b1e      	ldr	r3, [pc, #120]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1f0      	bne.n	8005670 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0308 	and.w	r3, r3, #8
 8005696:	2b00      	cmp	r3, #0
 8005698:	d038      	beq.n	800570c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d019      	beq.n	80056d6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056a2:	4b16      	ldr	r3, [pc, #88]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 80056a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056a6:	4a15      	ldr	r2, [pc, #84]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 80056a8:	f043 0301 	orr.w	r3, r3, #1
 80056ac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ae:	f7fc ffbf 	bl	8002630 <HAL_GetTick>
 80056b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056b4:	e008      	b.n	80056c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056b6:	f7fc ffbb 	bl	8002630 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d901      	bls.n	80056c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e180      	b.n	80059ca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056c8:	4b0c      	ldr	r3, [pc, #48]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 80056ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d0f0      	beq.n	80056b6 <HAL_RCC_OscConfig+0x23a>
 80056d4:	e01a      	b.n	800570c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056d6:	4b09      	ldr	r3, [pc, #36]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 80056d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056da:	4a08      	ldr	r2, [pc, #32]	@ (80056fc <HAL_RCC_OscConfig+0x280>)
 80056dc:	f023 0301 	bic.w	r3, r3, #1
 80056e0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e2:	f7fc ffa5 	bl	8002630 <HAL_GetTick>
 80056e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056e8:	e00a      	b.n	8005700 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056ea:	f7fc ffa1 	bl	8002630 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d903      	bls.n	8005700 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e166      	b.n	80059ca <HAL_RCC_OscConfig+0x54e>
 80056fc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005700:	4b92      	ldr	r3, [pc, #584]	@ (800594c <HAL_RCC_OscConfig+0x4d0>)
 8005702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005704:	f003 0302 	and.w	r3, r3, #2
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1ee      	bne.n	80056ea <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0304 	and.w	r3, r3, #4
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 80a4 	beq.w	8005862 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800571a:	4b8c      	ldr	r3, [pc, #560]	@ (800594c <HAL_RCC_OscConfig+0x4d0>)
 800571c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800571e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10d      	bne.n	8005742 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005726:	4b89      	ldr	r3, [pc, #548]	@ (800594c <HAL_RCC_OscConfig+0x4d0>)
 8005728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572a:	4a88      	ldr	r2, [pc, #544]	@ (800594c <HAL_RCC_OscConfig+0x4d0>)
 800572c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005730:	6413      	str	r3, [r2, #64]	@ 0x40
 8005732:	4b86      	ldr	r3, [pc, #536]	@ (800594c <HAL_RCC_OscConfig+0x4d0>)
 8005734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800573a:	60bb      	str	r3, [r7, #8]
 800573c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800573e:	2301      	movs	r3, #1
 8005740:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005742:	4b83      	ldr	r3, [pc, #524]	@ (8005950 <HAL_RCC_OscConfig+0x4d4>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800574a:	2b00      	cmp	r3, #0
 800574c:	d118      	bne.n	8005780 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800574e:	4b80      	ldr	r3, [pc, #512]	@ (8005950 <HAL_RCC_OscConfig+0x4d4>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a7f      	ldr	r2, [pc, #508]	@ (8005950 <HAL_RCC_OscConfig+0x4d4>)
 8005754:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005758:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800575a:	f7fc ff69 	bl	8002630 <HAL_GetTick>
 800575e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005760:	e008      	b.n	8005774 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005762:	f7fc ff65 	bl	8002630 <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	2b64      	cmp	r3, #100	@ 0x64
 800576e:	d901      	bls.n	8005774 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e12a      	b.n	80059ca <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005774:	4b76      	ldr	r3, [pc, #472]	@ (8005950 <HAL_RCC_OscConfig+0x4d4>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800577c:	2b00      	cmp	r3, #0
 800577e:	d0f0      	beq.n	8005762 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d106      	bne.n	8005796 <HAL_RCC_OscConfig+0x31a>
 8005788:	4b70      	ldr	r3, [pc, #448]	@ (800594c <HAL_RCC_OscConfig+0x4d0>)
 800578a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800578c:	4a6f      	ldr	r2, [pc, #444]	@ (800594c <HAL_RCC_OscConfig+0x4d0>)
 800578e:	f043 0301 	orr.w	r3, r3, #1
 8005792:	6713      	str	r3, [r2, #112]	@ 0x70
 8005794:	e02d      	b.n	80057f2 <HAL_RCC_OscConfig+0x376>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10c      	bne.n	80057b8 <HAL_RCC_OscConfig+0x33c>
 800579e:	4b6b      	ldr	r3, [pc, #428]	@ (800594c <HAL_RCC_OscConfig+0x4d0>)
 80057a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057a2:	4a6a      	ldr	r2, [pc, #424]	@ (800594c <HAL_RCC_OscConfig+0x4d0>)
 80057a4:	f023 0301 	bic.w	r3, r3, #1
 80057a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80057aa:	4b68      	ldr	r3, [pc, #416]	@ (800594c <HAL_RCC_OscConfig+0x4d0>)
 80057ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ae:	4a67      	ldr	r2, [pc, #412]	@ (800594c <HAL_RCC_OscConfig+0x4d0>)
 80057b0:	f023 0304 	bic.w	r3, r3, #4
 80057b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80057b6:	e01c      	b.n	80057f2 <HAL_RCC_OscConfig+0x376>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	2b05      	cmp	r3, #5
 80057be:	d10c      	bne.n	80057da <HAL_RCC_OscConfig+0x35e>
 80057c0:	4b62      	ldr	r3, [pc, #392]	@ (800594c <HAL_RCC_OscConfig+0x4d0>)
 80057c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057c4:	4a61      	ldr	r2, [pc, #388]	@ (800594c <HAL_RCC_OscConfig+0x4d0>)
 80057c6:	f043 0304 	orr.w	r3, r3, #4
 80057ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80057cc:	4b5f      	ldr	r3, [pc, #380]	@ (800594c <HAL_RCC_OscConfig+0x4d0>)
 80057ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057d0:	4a5e      	ldr	r2, [pc, #376]	@ (800594c <HAL_RCC_OscConfig+0x4d0>)
 80057d2:	f043 0301 	orr.w	r3, r3, #1
 80057d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80057d8:	e00b      	b.n	80057f2 <HAL_RCC_OscConfig+0x376>
 80057da:	4b5c      	ldr	r3, [pc, #368]	@ (800594c <HAL_RCC_OscConfig+0x4d0>)
 80057dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057de:	4a5b      	ldr	r2, [pc, #364]	@ (800594c <HAL_RCC_OscConfig+0x4d0>)
 80057e0:	f023 0301 	bic.w	r3, r3, #1
 80057e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80057e6:	4b59      	ldr	r3, [pc, #356]	@ (800594c <HAL_RCC_OscConfig+0x4d0>)
 80057e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ea:	4a58      	ldr	r2, [pc, #352]	@ (800594c <HAL_RCC_OscConfig+0x4d0>)
 80057ec:	f023 0304 	bic.w	r3, r3, #4
 80057f0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d015      	beq.n	8005826 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057fa:	f7fc ff19 	bl	8002630 <HAL_GetTick>
 80057fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005800:	e00a      	b.n	8005818 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005802:	f7fc ff15 	bl	8002630 <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005810:	4293      	cmp	r3, r2
 8005812:	d901      	bls.n	8005818 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e0d8      	b.n	80059ca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005818:	4b4c      	ldr	r3, [pc, #304]	@ (800594c <HAL_RCC_OscConfig+0x4d0>)
 800581a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d0ee      	beq.n	8005802 <HAL_RCC_OscConfig+0x386>
 8005824:	e014      	b.n	8005850 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005826:	f7fc ff03 	bl	8002630 <HAL_GetTick>
 800582a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800582c:	e00a      	b.n	8005844 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800582e:	f7fc feff 	bl	8002630 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	f241 3288 	movw	r2, #5000	@ 0x1388
 800583c:	4293      	cmp	r3, r2
 800583e:	d901      	bls.n	8005844 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e0c2      	b.n	80059ca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005844:	4b41      	ldr	r3, [pc, #260]	@ (800594c <HAL_RCC_OscConfig+0x4d0>)
 8005846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1ee      	bne.n	800582e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005850:	7dfb      	ldrb	r3, [r7, #23]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d105      	bne.n	8005862 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005856:	4b3d      	ldr	r3, [pc, #244]	@ (800594c <HAL_RCC_OscConfig+0x4d0>)
 8005858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585a:	4a3c      	ldr	r2, [pc, #240]	@ (800594c <HAL_RCC_OscConfig+0x4d0>)
 800585c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005860:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	2b00      	cmp	r3, #0
 8005868:	f000 80ae 	beq.w	80059c8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800586c:	4b37      	ldr	r3, [pc, #220]	@ (800594c <HAL_RCC_OscConfig+0x4d0>)
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f003 030c 	and.w	r3, r3, #12
 8005874:	2b08      	cmp	r3, #8
 8005876:	d06d      	beq.n	8005954 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	2b02      	cmp	r3, #2
 800587e:	d14b      	bne.n	8005918 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005880:	4b32      	ldr	r3, [pc, #200]	@ (800594c <HAL_RCC_OscConfig+0x4d0>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a31      	ldr	r2, [pc, #196]	@ (800594c <HAL_RCC_OscConfig+0x4d0>)
 8005886:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800588a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800588c:	f7fc fed0 	bl	8002630 <HAL_GetTick>
 8005890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005892:	e008      	b.n	80058a6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005894:	f7fc fecc 	bl	8002630 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d901      	bls.n	80058a6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e091      	b.n	80059ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058a6:	4b29      	ldr	r3, [pc, #164]	@ (800594c <HAL_RCC_OscConfig+0x4d0>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1f0      	bne.n	8005894 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	69da      	ldr	r2, [r3, #28]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	431a      	orrs	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c0:	019b      	lsls	r3, r3, #6
 80058c2:	431a      	orrs	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c8:	085b      	lsrs	r3, r3, #1
 80058ca:	3b01      	subs	r3, #1
 80058cc:	041b      	lsls	r3, r3, #16
 80058ce:	431a      	orrs	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d4:	061b      	lsls	r3, r3, #24
 80058d6:	431a      	orrs	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058dc:	071b      	lsls	r3, r3, #28
 80058de:	491b      	ldr	r1, [pc, #108]	@ (800594c <HAL_RCC_OscConfig+0x4d0>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058e4:	4b19      	ldr	r3, [pc, #100]	@ (800594c <HAL_RCC_OscConfig+0x4d0>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a18      	ldr	r2, [pc, #96]	@ (800594c <HAL_RCC_OscConfig+0x4d0>)
 80058ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f0:	f7fc fe9e 	bl	8002630 <HAL_GetTick>
 80058f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058f6:	e008      	b.n	800590a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058f8:	f7fc fe9a 	bl	8002630 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b02      	cmp	r3, #2
 8005904:	d901      	bls.n	800590a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e05f      	b.n	80059ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800590a:	4b10      	ldr	r3, [pc, #64]	@ (800594c <HAL_RCC_OscConfig+0x4d0>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d0f0      	beq.n	80058f8 <HAL_RCC_OscConfig+0x47c>
 8005916:	e057      	b.n	80059c8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005918:	4b0c      	ldr	r3, [pc, #48]	@ (800594c <HAL_RCC_OscConfig+0x4d0>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a0b      	ldr	r2, [pc, #44]	@ (800594c <HAL_RCC_OscConfig+0x4d0>)
 800591e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005924:	f7fc fe84 	bl	8002630 <HAL_GetTick>
 8005928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800592a:	e008      	b.n	800593e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800592c:	f7fc fe80 	bl	8002630 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b02      	cmp	r3, #2
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e045      	b.n	80059ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800593e:	4b03      	ldr	r3, [pc, #12]	@ (800594c <HAL_RCC_OscConfig+0x4d0>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1f0      	bne.n	800592c <HAL_RCC_OscConfig+0x4b0>
 800594a:	e03d      	b.n	80059c8 <HAL_RCC_OscConfig+0x54c>
 800594c:	40023800 	.word	0x40023800
 8005950:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005954:	4b1f      	ldr	r3, [pc, #124]	@ (80059d4 <HAL_RCC_OscConfig+0x558>)
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d030      	beq.n	80059c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800596c:	429a      	cmp	r2, r3
 800596e:	d129      	bne.n	80059c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800597a:	429a      	cmp	r2, r3
 800597c:	d122      	bne.n	80059c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005984:	4013      	ands	r3, r2
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800598a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800598c:	4293      	cmp	r3, r2
 800598e:	d119      	bne.n	80059c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800599a:	085b      	lsrs	r3, r3, #1
 800599c:	3b01      	subs	r3, #1
 800599e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d10f      	bne.n	80059c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d107      	bne.n	80059c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059be:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d001      	beq.n	80059c8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e000      	b.n	80059ca <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3718      	adds	r7, #24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	40023800 	.word	0x40023800

080059d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80059e2:	2300      	movs	r3, #0
 80059e4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d101      	bne.n	80059f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e0d0      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059f0:	4b6a      	ldr	r3, [pc, #424]	@ (8005b9c <HAL_RCC_ClockConfig+0x1c4>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 030f 	and.w	r3, r3, #15
 80059f8:	683a      	ldr	r2, [r7, #0]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d910      	bls.n	8005a20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059fe:	4b67      	ldr	r3, [pc, #412]	@ (8005b9c <HAL_RCC_ClockConfig+0x1c4>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f023 020f 	bic.w	r2, r3, #15
 8005a06:	4965      	ldr	r1, [pc, #404]	@ (8005b9c <HAL_RCC_ClockConfig+0x1c4>)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a0e:	4b63      	ldr	r3, [pc, #396]	@ (8005b9c <HAL_RCC_ClockConfig+0x1c4>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 030f 	and.w	r3, r3, #15
 8005a16:	683a      	ldr	r2, [r7, #0]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d001      	beq.n	8005a20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e0b8      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d020      	beq.n	8005a6e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0304 	and.w	r3, r3, #4
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d005      	beq.n	8005a44 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a38:	4b59      	ldr	r3, [pc, #356]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	4a58      	ldr	r2, [pc, #352]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8005a3e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005a42:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0308 	and.w	r3, r3, #8
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d005      	beq.n	8005a5c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a50:	4b53      	ldr	r3, [pc, #332]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	4a52      	ldr	r2, [pc, #328]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8005a56:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005a5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a5c:	4b50      	ldr	r3, [pc, #320]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	494d      	ldr	r1, [pc, #308]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d040      	beq.n	8005afc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d107      	bne.n	8005a92 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a82:	4b47      	ldr	r3, [pc, #284]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d115      	bne.n	8005aba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e07f      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d107      	bne.n	8005aaa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a9a:	4b41      	ldr	r3, [pc, #260]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d109      	bne.n	8005aba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e073      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aaa:	4b3d      	ldr	r3, [pc, #244]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0302 	and.w	r3, r3, #2
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e06b      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005aba:	4b39      	ldr	r3, [pc, #228]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f023 0203 	bic.w	r2, r3, #3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	4936      	ldr	r1, [pc, #216]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005acc:	f7fc fdb0 	bl	8002630 <HAL_GetTick>
 8005ad0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ad2:	e00a      	b.n	8005aea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ad4:	f7fc fdac 	bl	8002630 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e053      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aea:	4b2d      	ldr	r3, [pc, #180]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f003 020c 	and.w	r2, r3, #12
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d1eb      	bne.n	8005ad4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005afc:	4b27      	ldr	r3, [pc, #156]	@ (8005b9c <HAL_RCC_ClockConfig+0x1c4>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 030f 	and.w	r3, r3, #15
 8005b04:	683a      	ldr	r2, [r7, #0]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d210      	bcs.n	8005b2c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b0a:	4b24      	ldr	r3, [pc, #144]	@ (8005b9c <HAL_RCC_ClockConfig+0x1c4>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f023 020f 	bic.w	r2, r3, #15
 8005b12:	4922      	ldr	r1, [pc, #136]	@ (8005b9c <HAL_RCC_ClockConfig+0x1c4>)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b1a:	4b20      	ldr	r3, [pc, #128]	@ (8005b9c <HAL_RCC_ClockConfig+0x1c4>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 030f 	and.w	r3, r3, #15
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d001      	beq.n	8005b2c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e032      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0304 	and.w	r3, r3, #4
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d008      	beq.n	8005b4a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b38:	4b19      	ldr	r3, [pc, #100]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	4916      	ldr	r1, [pc, #88]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0308 	and.w	r3, r3, #8
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d009      	beq.n	8005b6a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005b56:	4b12      	ldr	r3, [pc, #72]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	00db      	lsls	r3, r3, #3
 8005b64:	490e      	ldr	r1, [pc, #56]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005b6a:	f000 f821 	bl	8005bb0 <HAL_RCC_GetSysClockFreq>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	091b      	lsrs	r3, r3, #4
 8005b76:	f003 030f 	and.w	r3, r3, #15
 8005b7a:	490a      	ldr	r1, [pc, #40]	@ (8005ba4 <HAL_RCC_ClockConfig+0x1cc>)
 8005b7c:	5ccb      	ldrb	r3, [r1, r3]
 8005b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b82:	4a09      	ldr	r2, [pc, #36]	@ (8005ba8 <HAL_RCC_ClockConfig+0x1d0>)
 8005b84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005b86:	4b09      	ldr	r3, [pc, #36]	@ (8005bac <HAL_RCC_ClockConfig+0x1d4>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7fc f9b8 	bl	8001f00 <HAL_InitTick>

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	40023c00 	.word	0x40023c00
 8005ba0:	40023800 	.word	0x40023800
 8005ba4:	08006f70 	.word	0x08006f70
 8005ba8:	20000000 	.word	0x20000000
 8005bac:	20000004 	.word	0x20000004

08005bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bb4:	b090      	sub	sp, #64	@ 0x40
 8005bb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bc8:	4b59      	ldr	r3, [pc, #356]	@ (8005d30 <HAL_RCC_GetSysClockFreq+0x180>)
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f003 030c 	and.w	r3, r3, #12
 8005bd0:	2b08      	cmp	r3, #8
 8005bd2:	d00d      	beq.n	8005bf0 <HAL_RCC_GetSysClockFreq+0x40>
 8005bd4:	2b08      	cmp	r3, #8
 8005bd6:	f200 80a1 	bhi.w	8005d1c <HAL_RCC_GetSysClockFreq+0x16c>
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d002      	beq.n	8005be4 <HAL_RCC_GetSysClockFreq+0x34>
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d003      	beq.n	8005bea <HAL_RCC_GetSysClockFreq+0x3a>
 8005be2:	e09b      	b.n	8005d1c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005be4:	4b53      	ldr	r3, [pc, #332]	@ (8005d34 <HAL_RCC_GetSysClockFreq+0x184>)
 8005be6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005be8:	e09b      	b.n	8005d22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005bea:	4b53      	ldr	r3, [pc, #332]	@ (8005d38 <HAL_RCC_GetSysClockFreq+0x188>)
 8005bec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005bee:	e098      	b.n	8005d22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bf0:	4b4f      	ldr	r3, [pc, #316]	@ (8005d30 <HAL_RCC_GetSysClockFreq+0x180>)
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005bf8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005bfa:	4b4d      	ldr	r3, [pc, #308]	@ (8005d30 <HAL_RCC_GetSysClockFreq+0x180>)
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d028      	beq.n	8005c58 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c06:	4b4a      	ldr	r3, [pc, #296]	@ (8005d30 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	099b      	lsrs	r3, r3, #6
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	623b      	str	r3, [r7, #32]
 8005c10:	627a      	str	r2, [r7, #36]	@ 0x24
 8005c12:	6a3b      	ldr	r3, [r7, #32]
 8005c14:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005c18:	2100      	movs	r1, #0
 8005c1a:	4b47      	ldr	r3, [pc, #284]	@ (8005d38 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c1c:	fb03 f201 	mul.w	r2, r3, r1
 8005c20:	2300      	movs	r3, #0
 8005c22:	fb00 f303 	mul.w	r3, r0, r3
 8005c26:	4413      	add	r3, r2
 8005c28:	4a43      	ldr	r2, [pc, #268]	@ (8005d38 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c2a:	fba0 1202 	umull	r1, r2, r0, r2
 8005c2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c30:	460a      	mov	r2, r1
 8005c32:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005c34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c36:	4413      	add	r3, r2
 8005c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	61bb      	str	r3, [r7, #24]
 8005c40:	61fa      	str	r2, [r7, #28]
 8005c42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005c4a:	f7fa faf5 	bl	8000238 <__aeabi_uldivmod>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	460b      	mov	r3, r1
 8005c52:	4613      	mov	r3, r2
 8005c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c56:	e053      	b.n	8005d00 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c58:	4b35      	ldr	r3, [pc, #212]	@ (8005d30 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	099b      	lsrs	r3, r3, #6
 8005c5e:	2200      	movs	r2, #0
 8005c60:	613b      	str	r3, [r7, #16]
 8005c62:	617a      	str	r2, [r7, #20]
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005c6a:	f04f 0b00 	mov.w	fp, #0
 8005c6e:	4652      	mov	r2, sl
 8005c70:	465b      	mov	r3, fp
 8005c72:	f04f 0000 	mov.w	r0, #0
 8005c76:	f04f 0100 	mov.w	r1, #0
 8005c7a:	0159      	lsls	r1, r3, #5
 8005c7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c80:	0150      	lsls	r0, r2, #5
 8005c82:	4602      	mov	r2, r0
 8005c84:	460b      	mov	r3, r1
 8005c86:	ebb2 080a 	subs.w	r8, r2, sl
 8005c8a:	eb63 090b 	sbc.w	r9, r3, fp
 8005c8e:	f04f 0200 	mov.w	r2, #0
 8005c92:	f04f 0300 	mov.w	r3, #0
 8005c96:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005c9a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005c9e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005ca2:	ebb2 0408 	subs.w	r4, r2, r8
 8005ca6:	eb63 0509 	sbc.w	r5, r3, r9
 8005caa:	f04f 0200 	mov.w	r2, #0
 8005cae:	f04f 0300 	mov.w	r3, #0
 8005cb2:	00eb      	lsls	r3, r5, #3
 8005cb4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cb8:	00e2      	lsls	r2, r4, #3
 8005cba:	4614      	mov	r4, r2
 8005cbc:	461d      	mov	r5, r3
 8005cbe:	eb14 030a 	adds.w	r3, r4, sl
 8005cc2:	603b      	str	r3, [r7, #0]
 8005cc4:	eb45 030b 	adc.w	r3, r5, fp
 8005cc8:	607b      	str	r3, [r7, #4]
 8005cca:	f04f 0200 	mov.w	r2, #0
 8005cce:	f04f 0300 	mov.w	r3, #0
 8005cd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005cd6:	4629      	mov	r1, r5
 8005cd8:	028b      	lsls	r3, r1, #10
 8005cda:	4621      	mov	r1, r4
 8005cdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ce0:	4621      	mov	r1, r4
 8005ce2:	028a      	lsls	r2, r1, #10
 8005ce4:	4610      	mov	r0, r2
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cea:	2200      	movs	r2, #0
 8005cec:	60bb      	str	r3, [r7, #8]
 8005cee:	60fa      	str	r2, [r7, #12]
 8005cf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cf4:	f7fa faa0 	bl	8000238 <__aeabi_uldivmod>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005d00:	4b0b      	ldr	r3, [pc, #44]	@ (8005d30 <HAL_RCC_GetSysClockFreq+0x180>)
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	0c1b      	lsrs	r3, r3, #16
 8005d06:	f003 0303 	and.w	r3, r3, #3
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005d10:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d18:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005d1a:	e002      	b.n	8005d22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d1c:	4b05      	ldr	r3, [pc, #20]	@ (8005d34 <HAL_RCC_GetSysClockFreq+0x184>)
 8005d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3740      	adds	r7, #64	@ 0x40
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d2e:	bf00      	nop
 8005d30:	40023800 	.word	0x40023800
 8005d34:	00f42400 	.word	0x00f42400
 8005d38:	017d7840 	.word	0x017d7840

08005d3c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d40:	4b03      	ldr	r3, [pc, #12]	@ (8005d50 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d42:	681b      	ldr	r3, [r3, #0]
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	20000000 	.word	0x20000000

08005d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d58:	f7ff fff0 	bl	8005d3c <HAL_RCC_GetHCLKFreq>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	4b05      	ldr	r3, [pc, #20]	@ (8005d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	0a9b      	lsrs	r3, r3, #10
 8005d64:	f003 0307 	and.w	r3, r3, #7
 8005d68:	4903      	ldr	r1, [pc, #12]	@ (8005d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d6a:	5ccb      	ldrb	r3, [r1, r3]
 8005d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	40023800 	.word	0x40023800
 8005d78:	08006f80 	.word	0x08006f80

08005d7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	220f      	movs	r2, #15
 8005d8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005d8c:	4b12      	ldr	r3, [pc, #72]	@ (8005dd8 <HAL_RCC_GetClockConfig+0x5c>)
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f003 0203 	and.w	r2, r3, #3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005d98:	4b0f      	ldr	r3, [pc, #60]	@ (8005dd8 <HAL_RCC_GetClockConfig+0x5c>)
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005da4:	4b0c      	ldr	r3, [pc, #48]	@ (8005dd8 <HAL_RCC_GetClockConfig+0x5c>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005db0:	4b09      	ldr	r3, [pc, #36]	@ (8005dd8 <HAL_RCC_GetClockConfig+0x5c>)
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	08db      	lsrs	r3, r3, #3
 8005db6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005dbe:	4b07      	ldr	r3, [pc, #28]	@ (8005ddc <HAL_RCC_GetClockConfig+0x60>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 020f 	and.w	r2, r3, #15
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	601a      	str	r2, [r3, #0]
}
 8005dca:	bf00      	nop
 8005dcc:	370c      	adds	r7, #12
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	40023800 	.word	0x40023800
 8005ddc:	40023c00 	.word	0x40023c00

08005de0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b088      	sub	sp, #32
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005de8:	2300      	movs	r3, #0
 8005dea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005dec:	2300      	movs	r3, #0
 8005dee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005df0:	2300      	movs	r3, #0
 8005df2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005df4:	2300      	movs	r3, #0
 8005df6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d012      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005e08:	4b69      	ldr	r3, [pc, #420]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	4a68      	ldr	r2, [pc, #416]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e0e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005e12:	6093      	str	r3, [r2, #8]
 8005e14:	4b66      	ldr	r3, [pc, #408]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e16:	689a      	ldr	r2, [r3, #8]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e1c:	4964      	ldr	r1, [pc, #400]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d017      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e3a:	4b5d      	ldr	r3, [pc, #372]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e40:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e48:	4959      	ldr	r1, [pc, #356]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e58:	d101      	bne.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005e66:	2301      	movs	r3, #1
 8005e68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d017      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005e76:	4b4e      	ldr	r3, [pc, #312]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e7c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e84:	494a      	ldr	r1, [pc, #296]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e94:	d101      	bne.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005e96:	2301      	movs	r3, #1
 8005e98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0320 	and.w	r3, r3, #32
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 808b 	beq.w	8005fda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ec4:	4b3a      	ldr	r3, [pc, #232]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec8:	4a39      	ldr	r2, [pc, #228]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ece:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ed0:	4b37      	ldr	r3, [pc, #220]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ed8:	60bb      	str	r3, [r7, #8]
 8005eda:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005edc:	4b35      	ldr	r3, [pc, #212]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a34      	ldr	r2, [pc, #208]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ee2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ee6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ee8:	f7fc fba2 	bl	8002630 <HAL_GetTick>
 8005eec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005eee:	e008      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ef0:	f7fc fb9e 	bl	8002630 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b64      	cmp	r3, #100	@ 0x64
 8005efc:	d901      	bls.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e38f      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005f02:	4b2c      	ldr	r3, [pc, #176]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d0f0      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f0e:	4b28      	ldr	r3, [pc, #160]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f16:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d035      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d02e      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f2c:	4b20      	ldr	r3, [pc, #128]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f34:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f36:	4b1e      	ldr	r3, [pc, #120]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f3a:	4a1d      	ldr	r2, [pc, #116]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f40:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f42:	4b1b      	ldr	r3, [pc, #108]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f46:	4a1a      	ldr	r2, [pc, #104]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f4c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005f4e:	4a18      	ldr	r2, [pc, #96]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005f54:	4b16      	ldr	r3, [pc, #88]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d114      	bne.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f60:	f7fc fb66 	bl	8002630 <HAL_GetTick>
 8005f64:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f66:	e00a      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f68:	f7fc fb62 	bl	8002630 <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d901      	bls.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e351      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d0ee      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f96:	d111      	bne.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005f98:	4b05      	ldr	r3, [pc, #20]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005fa4:	4b04      	ldr	r3, [pc, #16]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005fa6:	400b      	ands	r3, r1
 8005fa8:	4901      	ldr	r1, [pc, #4]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	608b      	str	r3, [r1, #8]
 8005fae:	e00b      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005fb0:	40023800 	.word	0x40023800
 8005fb4:	40007000 	.word	0x40007000
 8005fb8:	0ffffcff 	.word	0x0ffffcff
 8005fbc:	4bac      	ldr	r3, [pc, #688]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	4aab      	ldr	r2, [pc, #684]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fc2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005fc6:	6093      	str	r3, [r2, #8]
 8005fc8:	4ba9      	ldr	r3, [pc, #676]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fd4:	49a6      	ldr	r1, [pc, #664]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0310 	and.w	r3, r3, #16
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d010      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005fe6:	4ba2      	ldr	r3, [pc, #648]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fec:	4aa0      	ldr	r2, [pc, #640]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ff2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005ff6:	4b9e      	ldr	r3, [pc, #632]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ff8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006000:	499b      	ldr	r1, [pc, #620]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006002:	4313      	orrs	r3, r2
 8006004:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00a      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006014:	4b96      	ldr	r3, [pc, #600]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800601a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006022:	4993      	ldr	r1, [pc, #588]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006024:	4313      	orrs	r3, r2
 8006026:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00a      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006036:	4b8e      	ldr	r3, [pc, #568]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800603c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006044:	498a      	ldr	r1, [pc, #552]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006046:	4313      	orrs	r3, r2
 8006048:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00a      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006058:	4b85      	ldr	r3, [pc, #532]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800605a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800605e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006066:	4982      	ldr	r1, [pc, #520]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006068:	4313      	orrs	r3, r2
 800606a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00a      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800607a:	4b7d      	ldr	r3, [pc, #500]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800607c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006080:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006088:	4979      	ldr	r1, [pc, #484]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800608a:	4313      	orrs	r3, r2
 800608c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00a      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800609c:	4b74      	ldr	r3, [pc, #464]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800609e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060a2:	f023 0203 	bic.w	r2, r3, #3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060aa:	4971      	ldr	r1, [pc, #452]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00a      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80060be:	4b6c      	ldr	r3, [pc, #432]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060c4:	f023 020c 	bic.w	r2, r3, #12
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060cc:	4968      	ldr	r1, [pc, #416]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00a      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80060e0:	4b63      	ldr	r3, [pc, #396]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060e6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060ee:	4960      	ldr	r1, [pc, #384]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00a      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006102:	4b5b      	ldr	r3, [pc, #364]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006108:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006110:	4957      	ldr	r1, [pc, #348]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006112:	4313      	orrs	r3, r2
 8006114:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00a      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006124:	4b52      	ldr	r3, [pc, #328]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800612a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006132:	494f      	ldr	r1, [pc, #316]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006134:	4313      	orrs	r3, r2
 8006136:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00a      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006146:	4b4a      	ldr	r3, [pc, #296]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800614c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006154:	4946      	ldr	r1, [pc, #280]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006156:	4313      	orrs	r3, r2
 8006158:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00a      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006168:	4b41      	ldr	r3, [pc, #260]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800616a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800616e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006176:	493e      	ldr	r1, [pc, #248]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006178:	4313      	orrs	r3, r2
 800617a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00a      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800618a:	4b39      	ldr	r3, [pc, #228]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800618c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006190:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006198:	4935      	ldr	r1, [pc, #212]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800619a:	4313      	orrs	r3, r2
 800619c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00a      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80061ac:	4b30      	ldr	r3, [pc, #192]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061b2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061ba:	492d      	ldr	r1, [pc, #180]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d011      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80061ce:	4b28      	ldr	r3, [pc, #160]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061d4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061dc:	4924      	ldr	r1, [pc, #144]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061ec:	d101      	bne.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80061ee:	2301      	movs	r3, #1
 80061f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0308 	and.w	r3, r3, #8
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80061fe:	2301      	movs	r3, #1
 8006200:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00a      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800620e:	4b18      	ldr	r3, [pc, #96]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006214:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800621c:	4914      	ldr	r1, [pc, #80]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800621e:	4313      	orrs	r3, r2
 8006220:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00b      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006230:	4b0f      	ldr	r3, [pc, #60]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006236:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006240:	490b      	ldr	r1, [pc, #44]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006242:	4313      	orrs	r3, r2
 8006244:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00f      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006254:	4b06      	ldr	r3, [pc, #24]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800625a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006264:	4902      	ldr	r1, [pc, #8]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006266:	4313      	orrs	r3, r2
 8006268:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800626c:	e002      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800626e:	bf00      	nop
 8006270:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00b      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006280:	4b8a      	ldr	r3, [pc, #552]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006282:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006286:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006290:	4986      	ldr	r1, [pc, #536]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006292:	4313      	orrs	r3, r2
 8006294:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00b      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80062a4:	4b81      	ldr	r3, [pc, #516]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062aa:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062b4:	497d      	ldr	r1, [pc, #500]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d006      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 80d6 	beq.w	800647c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80062d0:	4b76      	ldr	r3, [pc, #472]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a75      	ldr	r2, [pc, #468]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80062da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062dc:	f7fc f9a8 	bl	8002630 <HAL_GetTick>
 80062e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062e2:	e008      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80062e4:	f7fc f9a4 	bl	8002630 <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	2b64      	cmp	r3, #100	@ 0x64
 80062f0:	d901      	bls.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e195      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062f6:	4b6d      	ldr	r3, [pc, #436]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1f0      	bne.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	2b00      	cmp	r3, #0
 800630c:	d021      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006312:	2b00      	cmp	r3, #0
 8006314:	d11d      	bne.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006316:	4b65      	ldr	r3, [pc, #404]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006318:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800631c:	0c1b      	lsrs	r3, r3, #16
 800631e:	f003 0303 	and.w	r3, r3, #3
 8006322:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006324:	4b61      	ldr	r3, [pc, #388]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006326:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800632a:	0e1b      	lsrs	r3, r3, #24
 800632c:	f003 030f 	and.w	r3, r3, #15
 8006330:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	019a      	lsls	r2, r3, #6
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	041b      	lsls	r3, r3, #16
 800633c:	431a      	orrs	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	061b      	lsls	r3, r3, #24
 8006342:	431a      	orrs	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	071b      	lsls	r3, r3, #28
 800634a:	4958      	ldr	r1, [pc, #352]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800634c:	4313      	orrs	r3, r2
 800634e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d004      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006362:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006366:	d00a      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006370:	2b00      	cmp	r3, #0
 8006372:	d02e      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006378:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800637c:	d129      	bne.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800637e:	4b4b      	ldr	r3, [pc, #300]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006380:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006384:	0c1b      	lsrs	r3, r3, #16
 8006386:	f003 0303 	and.w	r3, r3, #3
 800638a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800638c:	4b47      	ldr	r3, [pc, #284]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800638e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006392:	0f1b      	lsrs	r3, r3, #28
 8006394:	f003 0307 	and.w	r3, r3, #7
 8006398:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	019a      	lsls	r2, r3, #6
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	041b      	lsls	r3, r3, #16
 80063a4:	431a      	orrs	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	061b      	lsls	r3, r3, #24
 80063ac:	431a      	orrs	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	071b      	lsls	r3, r3, #28
 80063b2:	493e      	ldr	r1, [pc, #248]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80063ba:	4b3c      	ldr	r3, [pc, #240]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063c0:	f023 021f 	bic.w	r2, r3, #31
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c8:	3b01      	subs	r3, #1
 80063ca:	4938      	ldr	r1, [pc, #224]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d01d      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80063de:	4b33      	ldr	r3, [pc, #204]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063e4:	0e1b      	lsrs	r3, r3, #24
 80063e6:	f003 030f 	and.w	r3, r3, #15
 80063ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80063ec:	4b2f      	ldr	r3, [pc, #188]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063f2:	0f1b      	lsrs	r3, r3, #28
 80063f4:	f003 0307 	and.w	r3, r3, #7
 80063f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	019a      	lsls	r2, r3, #6
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	041b      	lsls	r3, r3, #16
 8006406:	431a      	orrs	r2, r3
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	061b      	lsls	r3, r3, #24
 800640c:	431a      	orrs	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	071b      	lsls	r3, r3, #28
 8006412:	4926      	ldr	r1, [pc, #152]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006414:	4313      	orrs	r3, r2
 8006416:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006422:	2b00      	cmp	r3, #0
 8006424:	d011      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	019a      	lsls	r2, r3, #6
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	041b      	lsls	r3, r3, #16
 8006432:	431a      	orrs	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	061b      	lsls	r3, r3, #24
 800643a:	431a      	orrs	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	071b      	lsls	r3, r3, #28
 8006442:	491a      	ldr	r1, [pc, #104]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006444:	4313      	orrs	r3, r2
 8006446:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800644a:	4b18      	ldr	r3, [pc, #96]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a17      	ldr	r2, [pc, #92]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006450:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006454:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006456:	f7fc f8eb 	bl	8002630 <HAL_GetTick>
 800645a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800645c:	e008      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800645e:	f7fc f8e7 	bl	8002630 <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	2b64      	cmp	r3, #100	@ 0x64
 800646a:	d901      	bls.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e0d8      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006470:	4b0e      	ldr	r3, [pc, #56]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d0f0      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	2b01      	cmp	r3, #1
 8006480:	f040 80ce 	bne.w	8006620 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006484:	4b09      	ldr	r3, [pc, #36]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a08      	ldr	r2, [pc, #32]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800648a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800648e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006490:	f7fc f8ce 	bl	8002630 <HAL_GetTick>
 8006494:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006496:	e00b      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006498:	f7fc f8ca 	bl	8002630 <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	2b64      	cmp	r3, #100	@ 0x64
 80064a4:	d904      	bls.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e0bb      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80064aa:	bf00      	nop
 80064ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80064b0:	4b5e      	ldr	r3, [pc, #376]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80064b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064bc:	d0ec      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d003      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d009      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d02e      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d12a      	bne.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80064e6:	4b51      	ldr	r3, [pc, #324]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80064e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ec:	0c1b      	lsrs	r3, r3, #16
 80064ee:	f003 0303 	and.w	r3, r3, #3
 80064f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80064f4:	4b4d      	ldr	r3, [pc, #308]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80064f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064fa:	0f1b      	lsrs	r3, r3, #28
 80064fc:	f003 0307 	and.w	r3, r3, #7
 8006500:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	019a      	lsls	r2, r3, #6
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	041b      	lsls	r3, r3, #16
 800650c:	431a      	orrs	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	061b      	lsls	r3, r3, #24
 8006514:	431a      	orrs	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	071b      	lsls	r3, r3, #28
 800651a:	4944      	ldr	r1, [pc, #272]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800651c:	4313      	orrs	r3, r2
 800651e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006522:	4b42      	ldr	r3, [pc, #264]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006524:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006528:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006530:	3b01      	subs	r3, #1
 8006532:	021b      	lsls	r3, r3, #8
 8006534:	493d      	ldr	r1, [pc, #244]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006536:	4313      	orrs	r3, r2
 8006538:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d022      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800654c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006550:	d11d      	bne.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006552:	4b36      	ldr	r3, [pc, #216]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006558:	0e1b      	lsrs	r3, r3, #24
 800655a:	f003 030f 	and.w	r3, r3, #15
 800655e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006560:	4b32      	ldr	r3, [pc, #200]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006566:	0f1b      	lsrs	r3, r3, #28
 8006568:	f003 0307 	and.w	r3, r3, #7
 800656c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	019a      	lsls	r2, r3, #6
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	041b      	lsls	r3, r3, #16
 800657a:	431a      	orrs	r2, r3
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	061b      	lsls	r3, r3, #24
 8006580:	431a      	orrs	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	071b      	lsls	r3, r3, #28
 8006586:	4929      	ldr	r1, [pc, #164]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006588:	4313      	orrs	r3, r2
 800658a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0308 	and.w	r3, r3, #8
 8006596:	2b00      	cmp	r3, #0
 8006598:	d028      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800659a:	4b24      	ldr	r3, [pc, #144]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800659c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065a0:	0e1b      	lsrs	r3, r3, #24
 80065a2:	f003 030f 	and.w	r3, r3, #15
 80065a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80065a8:	4b20      	ldr	r3, [pc, #128]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ae:	0c1b      	lsrs	r3, r3, #16
 80065b0:	f003 0303 	and.w	r3, r3, #3
 80065b4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	019a      	lsls	r2, r3, #6
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	041b      	lsls	r3, r3, #16
 80065c0:	431a      	orrs	r2, r3
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	061b      	lsls	r3, r3, #24
 80065c6:	431a      	orrs	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	69db      	ldr	r3, [r3, #28]
 80065cc:	071b      	lsls	r3, r3, #28
 80065ce:	4917      	ldr	r1, [pc, #92]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065d0:	4313      	orrs	r3, r2
 80065d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80065d6:	4b15      	ldr	r3, [pc, #84]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e4:	4911      	ldr	r1, [pc, #68]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065e6:	4313      	orrs	r3, r2
 80065e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80065ec:	4b0f      	ldr	r3, [pc, #60]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a0e      	ldr	r2, [pc, #56]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065f8:	f7fc f81a 	bl	8002630 <HAL_GetTick>
 80065fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80065fe:	e008      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006600:	f7fc f816 	bl	8002630 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	2b64      	cmp	r3, #100	@ 0x64
 800660c:	d901      	bls.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e007      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006612:	4b06      	ldr	r3, [pc, #24]	@ (800662c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800661a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800661e:	d1ef      	bne.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3720      	adds	r7, #32
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	40023800 	.word	0x40023800

08006630 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d101      	bne.n	8006644 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e025      	b.n	8006690 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800664a:	b2db      	uxtb	r3, r3
 800664c:	2b00      	cmp	r3, #0
 800664e:	d106      	bne.n	800665e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f7fb fc47 	bl	8001eec <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2202      	movs	r2, #2
 8006662:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	3304      	adds	r3, #4
 800666e:	4619      	mov	r1, r3
 8006670:	4610      	mov	r0, r2
 8006672:	f000 fb3b 	bl	8006cec <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6818      	ldr	r0, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	461a      	mov	r2, r3
 8006680:	6839      	ldr	r1, [r7, #0]
 8006682:	f000 fb8f 	bl	8006da4 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b086      	sub	sp, #24
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80066aa:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80066ac:	7dfb      	ldrb	r3, [r7, #23]
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d101      	bne.n	80066b6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80066b2:	2302      	movs	r3, #2
 80066b4:	e021      	b.n	80066fa <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80066b6:	7dfb      	ldrb	r3, [r7, #23]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d002      	beq.n	80066c2 <HAL_SDRAM_SendCommand+0x2a>
 80066bc:	7dfb      	ldrb	r3, [r7, #23]
 80066be:	2b05      	cmp	r3, #5
 80066c0:	d118      	bne.n	80066f4 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2202      	movs	r2, #2
 80066c6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	68b9      	ldr	r1, [r7, #8]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f000 fbd0 	bl	8006e78 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d104      	bne.n	80066ea <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2205      	movs	r2, #5
 80066e4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80066e8:	e006      	b.n	80066f8 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80066f2:	e001      	b.n	80066f8 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e000      	b.n	80066fa <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3718      	adds	r7, #24
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006702:	b580      	push	{r7, lr}
 8006704:	b082      	sub	sp, #8
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
 800670a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006712:	b2db      	uxtb	r3, r3
 8006714:	2b02      	cmp	r3, #2
 8006716:	d101      	bne.n	800671c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006718:	2302      	movs	r3, #2
 800671a:	e016      	b.n	800674a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006722:	b2db      	uxtb	r3, r3
 8006724:	2b01      	cmp	r3, #1
 8006726:	d10f      	bne.n	8006748 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2202      	movs	r2, #2
 800672c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6839      	ldr	r1, [r7, #0]
 8006736:	4618      	mov	r0, r3
 8006738:	f000 fbc2 	bl	8006ec0 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006744:	2300      	movs	r3, #0
 8006746:	e000      	b.n	800674a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
}
 800674a:	4618      	mov	r0, r3
 800674c:	3708      	adds	r7, #8
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b082      	sub	sp, #8
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d101      	bne.n	8006764 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e049      	b.n	80067f8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b00      	cmp	r3, #0
 800676e:	d106      	bne.n	800677e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f841 	bl	8006800 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2202      	movs	r2, #2
 8006782:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	3304      	adds	r3, #4
 800678e:	4619      	mov	r1, r3
 8006790:	4610      	mov	r0, r2
 8006792:	f000 f9e7 	bl	8006b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2201      	movs	r2, #1
 80067aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3708      	adds	r7, #8
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006822:	b2db      	uxtb	r3, r3
 8006824:	2b01      	cmp	r3, #1
 8006826:	d001      	beq.n	800682c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e054      	b.n	80068d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68da      	ldr	r2, [r3, #12]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f042 0201 	orr.w	r2, r2, #1
 8006842:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a26      	ldr	r2, [pc, #152]	@ (80068e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d022      	beq.n	8006894 <HAL_TIM_Base_Start_IT+0x80>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006856:	d01d      	beq.n	8006894 <HAL_TIM_Base_Start_IT+0x80>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a22      	ldr	r2, [pc, #136]	@ (80068e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d018      	beq.n	8006894 <HAL_TIM_Base_Start_IT+0x80>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a21      	ldr	r2, [pc, #132]	@ (80068ec <HAL_TIM_Base_Start_IT+0xd8>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d013      	beq.n	8006894 <HAL_TIM_Base_Start_IT+0x80>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a1f      	ldr	r2, [pc, #124]	@ (80068f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d00e      	beq.n	8006894 <HAL_TIM_Base_Start_IT+0x80>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a1e      	ldr	r2, [pc, #120]	@ (80068f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d009      	beq.n	8006894 <HAL_TIM_Base_Start_IT+0x80>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a1c      	ldr	r2, [pc, #112]	@ (80068f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d004      	beq.n	8006894 <HAL_TIM_Base_Start_IT+0x80>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a1b      	ldr	r2, [pc, #108]	@ (80068fc <HAL_TIM_Base_Start_IT+0xe8>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d115      	bne.n	80068c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689a      	ldr	r2, [r3, #8]
 800689a:	4b19      	ldr	r3, [pc, #100]	@ (8006900 <HAL_TIM_Base_Start_IT+0xec>)
 800689c:	4013      	ands	r3, r2
 800689e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2b06      	cmp	r3, #6
 80068a4:	d015      	beq.n	80068d2 <HAL_TIM_Base_Start_IT+0xbe>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068ac:	d011      	beq.n	80068d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f042 0201 	orr.w	r2, r2, #1
 80068bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068be:	e008      	b.n	80068d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f042 0201 	orr.w	r2, r2, #1
 80068ce:	601a      	str	r2, [r3, #0]
 80068d0:	e000      	b.n	80068d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3714      	adds	r7, #20
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	40010000 	.word	0x40010000
 80068e8:	40000400 	.word	0x40000400
 80068ec:	40000800 	.word	0x40000800
 80068f0:	40000c00 	.word	0x40000c00
 80068f4:	40010400 	.word	0x40010400
 80068f8:	40014000 	.word	0x40014000
 80068fc:	40001800 	.word	0x40001800
 8006900:	00010007 	.word	0x00010007

08006904 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b00      	cmp	r3, #0
 8006924:	d020      	beq.n	8006968 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f003 0302 	and.w	r3, r3, #2
 800692c:	2b00      	cmp	r3, #0
 800692e:	d01b      	beq.n	8006968 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f06f 0202 	mvn.w	r2, #2
 8006938:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2201      	movs	r2, #1
 800693e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	f003 0303 	and.w	r3, r3, #3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d003      	beq.n	8006956 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f8e9 	bl	8006b26 <HAL_TIM_IC_CaptureCallback>
 8006954:	e005      	b.n	8006962 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f8db 	bl	8006b12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 f8ec 	bl	8006b3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	f003 0304 	and.w	r3, r3, #4
 800696e:	2b00      	cmp	r3, #0
 8006970:	d020      	beq.n	80069b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f003 0304 	and.w	r3, r3, #4
 8006978:	2b00      	cmp	r3, #0
 800697a:	d01b      	beq.n	80069b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f06f 0204 	mvn.w	r2, #4
 8006984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2202      	movs	r2, #2
 800698a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006996:	2b00      	cmp	r3, #0
 8006998:	d003      	beq.n	80069a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f8c3 	bl	8006b26 <HAL_TIM_IC_CaptureCallback>
 80069a0:	e005      	b.n	80069ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f8b5 	bl	8006b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 f8c6 	bl	8006b3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	f003 0308 	and.w	r3, r3, #8
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d020      	beq.n	8006a00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f003 0308 	and.w	r3, r3, #8
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d01b      	beq.n	8006a00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f06f 0208 	mvn.w	r2, #8
 80069d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2204      	movs	r2, #4
 80069d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	f003 0303 	and.w	r3, r3, #3
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d003      	beq.n	80069ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f89d 	bl	8006b26 <HAL_TIM_IC_CaptureCallback>
 80069ec:	e005      	b.n	80069fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f88f 	bl	8006b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 f8a0 	bl	8006b3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	f003 0310 	and.w	r3, r3, #16
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d020      	beq.n	8006a4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f003 0310 	and.w	r3, r3, #16
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d01b      	beq.n	8006a4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f06f 0210 	mvn.w	r2, #16
 8006a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2208      	movs	r2, #8
 8006a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d003      	beq.n	8006a3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f877 	bl	8006b26 <HAL_TIM_IC_CaptureCallback>
 8006a38:	e005      	b.n	8006a46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 f869 	bl	8006b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 f87a 	bl	8006b3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00c      	beq.n	8006a70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f003 0301 	and.w	r3, r3, #1
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d007      	beq.n	8006a70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f06f 0201 	mvn.w	r2, #1
 8006a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7fa ff5c 	bl	8001928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d104      	bne.n	8006a84 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00c      	beq.n	8006a9e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d007      	beq.n	8006a9e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 f913 	bl	8006cc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00c      	beq.n	8006ac2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d007      	beq.n	8006ac2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006aba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 f90b 	bl	8006cd8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00c      	beq.n	8006ae6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d007      	beq.n	8006ae6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006ade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 f834 	bl	8006b4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	f003 0320 	and.w	r3, r3, #32
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00c      	beq.n	8006b0a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f003 0320 	and.w	r3, r3, #32
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d007      	beq.n	8006b0a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f06f 0220 	mvn.w	r2, #32
 8006b02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 f8d3 	bl	8006cb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b0a:	bf00      	nop
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b12:	b480      	push	{r7}
 8006b14:	b083      	sub	sp, #12
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b1a:	bf00      	nop
 8006b1c:	370c      	adds	r7, #12
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr

08006b26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b26:	b480      	push	{r7}
 8006b28:	b083      	sub	sp, #12
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b2e:	bf00      	nop
 8006b30:	370c      	adds	r7, #12
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b083      	sub	sp, #12
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b42:	bf00      	nop
 8006b44:	370c      	adds	r7, #12
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b083      	sub	sp, #12
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b56:	bf00      	nop
 8006b58:	370c      	adds	r7, #12
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
	...

08006b64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a43      	ldr	r2, [pc, #268]	@ (8006c84 <TIM_Base_SetConfig+0x120>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d013      	beq.n	8006ba4 <TIM_Base_SetConfig+0x40>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b82:	d00f      	beq.n	8006ba4 <TIM_Base_SetConfig+0x40>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a40      	ldr	r2, [pc, #256]	@ (8006c88 <TIM_Base_SetConfig+0x124>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d00b      	beq.n	8006ba4 <TIM_Base_SetConfig+0x40>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a3f      	ldr	r2, [pc, #252]	@ (8006c8c <TIM_Base_SetConfig+0x128>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d007      	beq.n	8006ba4 <TIM_Base_SetConfig+0x40>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a3e      	ldr	r2, [pc, #248]	@ (8006c90 <TIM_Base_SetConfig+0x12c>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d003      	beq.n	8006ba4 <TIM_Base_SetConfig+0x40>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a3d      	ldr	r2, [pc, #244]	@ (8006c94 <TIM_Base_SetConfig+0x130>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d108      	bne.n	8006bb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006baa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a32      	ldr	r2, [pc, #200]	@ (8006c84 <TIM_Base_SetConfig+0x120>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d02b      	beq.n	8006c16 <TIM_Base_SetConfig+0xb2>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bc4:	d027      	beq.n	8006c16 <TIM_Base_SetConfig+0xb2>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a2f      	ldr	r2, [pc, #188]	@ (8006c88 <TIM_Base_SetConfig+0x124>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d023      	beq.n	8006c16 <TIM_Base_SetConfig+0xb2>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a2e      	ldr	r2, [pc, #184]	@ (8006c8c <TIM_Base_SetConfig+0x128>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d01f      	beq.n	8006c16 <TIM_Base_SetConfig+0xb2>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a2d      	ldr	r2, [pc, #180]	@ (8006c90 <TIM_Base_SetConfig+0x12c>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d01b      	beq.n	8006c16 <TIM_Base_SetConfig+0xb2>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a2c      	ldr	r2, [pc, #176]	@ (8006c94 <TIM_Base_SetConfig+0x130>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d017      	beq.n	8006c16 <TIM_Base_SetConfig+0xb2>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a2b      	ldr	r2, [pc, #172]	@ (8006c98 <TIM_Base_SetConfig+0x134>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d013      	beq.n	8006c16 <TIM_Base_SetConfig+0xb2>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a2a      	ldr	r2, [pc, #168]	@ (8006c9c <TIM_Base_SetConfig+0x138>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d00f      	beq.n	8006c16 <TIM_Base_SetConfig+0xb2>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a29      	ldr	r2, [pc, #164]	@ (8006ca0 <TIM_Base_SetConfig+0x13c>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d00b      	beq.n	8006c16 <TIM_Base_SetConfig+0xb2>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a28      	ldr	r2, [pc, #160]	@ (8006ca4 <TIM_Base_SetConfig+0x140>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d007      	beq.n	8006c16 <TIM_Base_SetConfig+0xb2>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a27      	ldr	r2, [pc, #156]	@ (8006ca8 <TIM_Base_SetConfig+0x144>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d003      	beq.n	8006c16 <TIM_Base_SetConfig+0xb2>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a26      	ldr	r2, [pc, #152]	@ (8006cac <TIM_Base_SetConfig+0x148>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d108      	bne.n	8006c28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	695b      	ldr	r3, [r3, #20]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	689a      	ldr	r2, [r3, #8]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a0e      	ldr	r2, [pc, #56]	@ (8006c84 <TIM_Base_SetConfig+0x120>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d003      	beq.n	8006c56 <TIM_Base_SetConfig+0xf2>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a10      	ldr	r2, [pc, #64]	@ (8006c94 <TIM_Base_SetConfig+0x130>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d103      	bne.n	8006c5e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	691a      	ldr	r2, [r3, #16]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f043 0204 	orr.w	r2, r3, #4
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	601a      	str	r2, [r3, #0]
}
 8006c76:	bf00      	nop
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	40010000 	.word	0x40010000
 8006c88:	40000400 	.word	0x40000400
 8006c8c:	40000800 	.word	0x40000800
 8006c90:	40000c00 	.word	0x40000c00
 8006c94:	40010400 	.word	0x40010400
 8006c98:	40014000 	.word	0x40014000
 8006c9c:	40014400 	.word	0x40014400
 8006ca0:	40014800 	.word	0x40014800
 8006ca4:	40001800 	.word	0x40001800
 8006ca8:	40001c00 	.word	0x40001c00
 8006cac:	40002000 	.word	0x40002000

08006cb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d121      	bne.n	8006d42 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	4b27      	ldr	r3, [pc, #156]	@ (8006da0 <FMC_SDRAM_Init+0xb4>)
 8006d04:	4013      	ands	r3, r2
 8006d06:	683a      	ldr	r2, [r7, #0]
 8006d08:	6851      	ldr	r1, [r2, #4]
 8006d0a:	683a      	ldr	r2, [r7, #0]
 8006d0c:	6892      	ldr	r2, [r2, #8]
 8006d0e:	4311      	orrs	r1, r2
 8006d10:	683a      	ldr	r2, [r7, #0]
 8006d12:	68d2      	ldr	r2, [r2, #12]
 8006d14:	4311      	orrs	r1, r2
 8006d16:	683a      	ldr	r2, [r7, #0]
 8006d18:	6912      	ldr	r2, [r2, #16]
 8006d1a:	4311      	orrs	r1, r2
 8006d1c:	683a      	ldr	r2, [r7, #0]
 8006d1e:	6952      	ldr	r2, [r2, #20]
 8006d20:	4311      	orrs	r1, r2
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	6992      	ldr	r2, [r2, #24]
 8006d26:	4311      	orrs	r1, r2
 8006d28:	683a      	ldr	r2, [r7, #0]
 8006d2a:	69d2      	ldr	r2, [r2, #28]
 8006d2c:	4311      	orrs	r1, r2
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	6a12      	ldr	r2, [r2, #32]
 8006d32:	4311      	orrs	r1, r2
 8006d34:	683a      	ldr	r2, [r7, #0]
 8006d36:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	431a      	orrs	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	601a      	str	r2, [r3, #0]
 8006d40:	e026      	b.n	8006d90 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	69d9      	ldr	r1, [r3, #28]
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	4319      	orrs	r1, r3
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d58:	430b      	orrs	r3, r1
 8006d5a:	431a      	orrs	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685a      	ldr	r2, [r3, #4]
 8006d64:	4b0e      	ldr	r3, [pc, #56]	@ (8006da0 <FMC_SDRAM_Init+0xb4>)
 8006d66:	4013      	ands	r3, r2
 8006d68:	683a      	ldr	r2, [r7, #0]
 8006d6a:	6851      	ldr	r1, [r2, #4]
 8006d6c:	683a      	ldr	r2, [r7, #0]
 8006d6e:	6892      	ldr	r2, [r2, #8]
 8006d70:	4311      	orrs	r1, r2
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	68d2      	ldr	r2, [r2, #12]
 8006d76:	4311      	orrs	r1, r2
 8006d78:	683a      	ldr	r2, [r7, #0]
 8006d7a:	6912      	ldr	r2, [r2, #16]
 8006d7c:	4311      	orrs	r1, r2
 8006d7e:	683a      	ldr	r2, [r7, #0]
 8006d80:	6952      	ldr	r2, [r2, #20]
 8006d82:	4311      	orrs	r1, r2
 8006d84:	683a      	ldr	r2, [r7, #0]
 8006d86:	6992      	ldr	r2, [r2, #24]
 8006d88:	430a      	orrs	r2, r1
 8006d8a:	431a      	orrs	r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	ffff8000 	.word	0xffff8000

08006da4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d128      	bne.n	8006e08 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	1e59      	subs	r1, r3, #1
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	011b      	lsls	r3, r3, #4
 8006dcc:	4319      	orrs	r1, r3
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	021b      	lsls	r3, r3, #8
 8006dd6:	4319      	orrs	r1, r3
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	031b      	lsls	r3, r3, #12
 8006de0:	4319      	orrs	r1, r3
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	3b01      	subs	r3, #1
 8006de8:	041b      	lsls	r3, r3, #16
 8006dea:	4319      	orrs	r1, r3
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	695b      	ldr	r3, [r3, #20]
 8006df0:	3b01      	subs	r3, #1
 8006df2:	051b      	lsls	r3, r3, #20
 8006df4:	4319      	orrs	r1, r3
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	699b      	ldr	r3, [r3, #24]
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	061b      	lsls	r3, r3, #24
 8006dfe:	430b      	orrs	r3, r1
 8006e00:	431a      	orrs	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	609a      	str	r2, [r3, #8]
 8006e06:	e02d      	b.n	8006e64 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	689a      	ldr	r2, [r3, #8]
 8006e0c:	4b19      	ldr	r3, [pc, #100]	@ (8006e74 <FMC_SDRAM_Timing_Init+0xd0>)
 8006e0e:	4013      	ands	r3, r2
 8006e10:	68ba      	ldr	r2, [r7, #8]
 8006e12:	68d2      	ldr	r2, [r2, #12]
 8006e14:	3a01      	subs	r2, #1
 8006e16:	0311      	lsls	r1, r2, #12
 8006e18:	68ba      	ldr	r2, [r7, #8]
 8006e1a:	6952      	ldr	r2, [r2, #20]
 8006e1c:	3a01      	subs	r2, #1
 8006e1e:	0512      	lsls	r2, r2, #20
 8006e20:	430a      	orrs	r2, r1
 8006e22:	431a      	orrs	r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	1e59      	subs	r1, r3, #1
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	011b      	lsls	r3, r3, #4
 8006e3e:	4319      	orrs	r1, r3
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	3b01      	subs	r3, #1
 8006e46:	021b      	lsls	r3, r3, #8
 8006e48:	4319      	orrs	r1, r3
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	041b      	lsls	r3, r3, #16
 8006e52:	4319      	orrs	r1, r3
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	699b      	ldr	r3, [r3, #24]
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	061b      	lsls	r3, r3, #24
 8006e5c:	430b      	orrs	r3, r1
 8006e5e:	431a      	orrs	r2, r3
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	ff0f0fff 	.word	0xff0f0fff

08006e78 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	691a      	ldr	r2, [r3, #16]
 8006e88:	4b0c      	ldr	r3, [pc, #48]	@ (8006ebc <FMC_SDRAM_SendCommand+0x44>)
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	68ba      	ldr	r2, [r7, #8]
 8006e8e:	6811      	ldr	r1, [r2, #0]
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	6852      	ldr	r2, [r2, #4]
 8006e94:	4311      	orrs	r1, r2
 8006e96:	68ba      	ldr	r2, [r7, #8]
 8006e98:	6892      	ldr	r2, [r2, #8]
 8006e9a:	3a01      	subs	r2, #1
 8006e9c:	0152      	lsls	r2, r2, #5
 8006e9e:	4311      	orrs	r1, r2
 8006ea0:	68ba      	ldr	r2, [r7, #8]
 8006ea2:	68d2      	ldr	r2, [r2, #12]
 8006ea4:	0252      	lsls	r2, r2, #9
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	431a      	orrs	r2, r3
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3714      	adds	r7, #20
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr
 8006ebc:	ffc00000 	.word	0xffc00000

08006ec0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	695a      	ldr	r2, [r3, #20]
 8006ece:	4b07      	ldr	r3, [pc, #28]	@ (8006eec <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	683a      	ldr	r2, [r7, #0]
 8006ed4:	0052      	lsls	r2, r2, #1
 8006ed6:	431a      	orrs	r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	370c      	adds	r7, #12
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	ffffc001 	.word	0xffffc001

08006ef0 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8006ef4:	bf00      	nop
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr

08006efe <memset>:
 8006efe:	4402      	add	r2, r0
 8006f00:	4603      	mov	r3, r0
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d100      	bne.n	8006f08 <memset+0xa>
 8006f06:	4770      	bx	lr
 8006f08:	f803 1b01 	strb.w	r1, [r3], #1
 8006f0c:	e7f9      	b.n	8006f02 <memset+0x4>
	...

08006f10 <__libc_init_array>:
 8006f10:	b570      	push	{r4, r5, r6, lr}
 8006f12:	4d0d      	ldr	r5, [pc, #52]	@ (8006f48 <__libc_init_array+0x38>)
 8006f14:	4c0d      	ldr	r4, [pc, #52]	@ (8006f4c <__libc_init_array+0x3c>)
 8006f16:	1b64      	subs	r4, r4, r5
 8006f18:	10a4      	asrs	r4, r4, #2
 8006f1a:	2600      	movs	r6, #0
 8006f1c:	42a6      	cmp	r6, r4
 8006f1e:	d109      	bne.n	8006f34 <__libc_init_array+0x24>
 8006f20:	4d0b      	ldr	r5, [pc, #44]	@ (8006f50 <__libc_init_array+0x40>)
 8006f22:	4c0c      	ldr	r4, [pc, #48]	@ (8006f54 <__libc_init_array+0x44>)
 8006f24:	f000 f818 	bl	8006f58 <_init>
 8006f28:	1b64      	subs	r4, r4, r5
 8006f2a:	10a4      	asrs	r4, r4, #2
 8006f2c:	2600      	movs	r6, #0
 8006f2e:	42a6      	cmp	r6, r4
 8006f30:	d105      	bne.n	8006f3e <__libc_init_array+0x2e>
 8006f32:	bd70      	pop	{r4, r5, r6, pc}
 8006f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f38:	4798      	blx	r3
 8006f3a:	3601      	adds	r6, #1
 8006f3c:	e7ee      	b.n	8006f1c <__libc_init_array+0xc>
 8006f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f42:	4798      	blx	r3
 8006f44:	3601      	adds	r6, #1
 8006f46:	e7f2      	b.n	8006f2e <__libc_init_array+0x1e>
 8006f48:	080071a0 	.word	0x080071a0
 8006f4c:	080071a0 	.word	0x080071a0
 8006f50:	080071a0 	.word	0x080071a0
 8006f54:	080071a4 	.word	0x080071a4

08006f58 <_init>:
 8006f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5a:	bf00      	nop
 8006f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f5e:	bc08      	pop	{r3}
 8006f60:	469e      	mov	lr, r3
 8006f62:	4770      	bx	lr

08006f64 <_fini>:
 8006f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f66:	bf00      	nop
 8006f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f6a:	bc08      	pop	{r3}
 8006f6c:	469e      	mov	lr, r3
 8006f6e:	4770      	bx	lr
